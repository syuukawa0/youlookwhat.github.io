<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[开发中所遇问题归纳（持续更新）]]></title>
      <url>%2F2017%2F11%2F23%2F%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3%2F</url>
      <content type="text"><![CDATA[DataBinding layout节点写了 xmlns:android=”http://schemas.android.com/apk/res/android 后，子布局不能写 include 子布局时子布局根节点也要声明id，不然引用不到子布局id databinding 绑定子布局。先绑定,后父布局再addView() 注入 databinding 后，AndriodStudio包结构变乱。解决：Android Studio2.2会出现此情况，升级到2.2.2就可以了。 databinding绑定bean时，里面的子类也需要继承BaseObservable,否则会报错。 recyclerview 的viewhodler 里，获得绑定 view 的databinding:DataBindingUtil.getBinding(this.itemView);。 布局里没有声明id,则对应的 ItemEverydayBinding 无法生成。 更改包名之后（rename – gradle.applicationId）， databinding 相关文件会报错，进入Build --&gt; Build Project就好了！ 注意：引用如：android:showImg=’@{bean.images.large}’时，里面的bean写错会造成编译错误！ 注意：text=&#39;@{xx}&#39;里面的值应为String类型。引用方法里的参数类型应一致。报错是不告诉具体的哪行代码，写多了只能自己一个个地方找。 android:showImg=’@{bean.images.large}’这样设置图片会闪一下！尤其是在recyclerview里面，效果很不好，如果是写在 adapter里就好了：ImgLoadUtil.displayEspImage(bean.getImages().getLarge(), binding.ivTopPhoto, 0);。不仅仅图片，文字也会闪。加上这句就好了：binding.executePendingBindings();，意思是：当数据改变时，binding会在下一帧去改变数据，如果我们需要立即改变，就去调用executePendingBindings方法。 布局里面的子布局里引用的bean可以一样（type一样），但是最好name不一样，不然可能会导致setBean()无效。改变name名就好了。 文件里引用bean: 123&lt;variable name="subjectsBean" type="com.example.jingbin.bean.moviechild.SubjectsBean" /&gt; 文件里调用静态方法： 123&lt;import type="com.example.yunyue.utils.StringFormatUtil"/&gt;// 布局调用android:text="@&#123;StringFormatUtil.formatName(subjectsBean.directors)&#125;" 字符串和静态方法拼接(注意外层引号的区别，里面没有字符串时任意都行，有则使用单引号)： 1android:text='@&#123;"类型："+StringFormatUtil.formatGenres(subjectsBean.genres)&#125;' 使用@BindingAdapter()，自定义loader用来异步载入图像： 一个参数时： 1234567 // 任意类里声明 @BindingAdapter("android:showImgBg") public static void showImgBg(ImageView imageView,String url) &#123; displayGaussian(imageView.getContext(),url,imageView); &#125;// 布局调用android:showImgBg='@&#123;subjectsBean.images.large&#125;' 两个或多个参数时： 123456789101112/** * 妹子，电影列表图 * @param defaultPicType 妹子：1 电影：0 */@BindingAdapter(&#123;"android:displayFadeImage","android:defaultPicType"&#125;)public static void displayFadeImage(ImageView imageView, String url,int defaultPicType) &#123; displayEspImage(url, imageView, defaultPicType);&#125;// XML里使用：android:defaultPicType="@&#123;1&#125;"android:displayFadeImage="@&#123;bean.url&#125;" 注意： 1. 方法参数第一个是控件声明,放在第二位不可以！ 2. 布局调用时，命名空间可自动生成。 建议： 1. android:showImgBg可任意写，但是项目里不能出现相同的命名，否则会被后来的覆盖掉！ 2. 如果 imgload:showImgBg 这样写,第一次编译会提示找不到该命名空间，跳到声明处。建议写成 android:showImgBg。 三元运算法： 123导入：&lt;import type="android.text.TextUtils" /&gt;使用：android:text='@&#123;TextUtils.isEmpty(resultsBean.who)?"佚名":resultsBean.who&#125;'也可以直接使用这时返回为null会不显示。 RecyclerView ✔️ NestedScrollView里嵌套 RecyclerView 官方后期已经解决了显示不全问题！看引用的包是什么版本的！还需要加上这两行代码：(这样不推荐，会把内容全部一次性的加载进内存，造成卡顿) 12recyclerView.setNestedScrollingEnabled(false);recyclerView.setHasFixedSize(false); ❌ NestedScrollView里嵌套 RecyclerView ,在recyclerView.setLayoutManager(new FullyLinearLayoutManager(getActivity()));之后，需要加上,不然滑动不流畅: 12recyclerView.setNestedScrollingEnabled(false);recyclerView.setHasFixedSize(false); 以上切换还是会卡顿，原因是角标越界，虽然try了，还是会卡。使用MyScrollView也不可以。显示不全！FullyLinearLayoutManager&amp; MyScrollView RecyclerView 的item显示出现控件显示不全,item只显示一部分，非常怪异！在adapter中的onCreateViewHolder()中View inflate = layoutInflater.inflate(R.layout.xxx, parent, false);注意要依附于parent。这样就好了！ RecyclerView: No adapter attached; skipping layout 没有数据时，gone掉，不然一直会提示这个！ addFooterView时，使用LinearLayout 包裹时会显示部分，改为RelativeLayout或FrameLayout正常。 添加headerview后，隐藏显示，进度条不会到达屏幕顶端。 ViewPager 与 Fragment 父布局使用fragment或scrollview下拉会有阴影效果。 viewpager左右预加载页面的个数设置：setOffscreenPageLimit(3);,设置后保证页面不被销毁，切换时就不会卡顿了（显示时加载数据）。注意，如果是这个viewpager本身就在父一个viewpager的一个页面里，则设置adapter时，应传getChildFragmentManager(),不然以上会设置不上，非法状态异常！ Fragment 和当前自身所在的Activity 走一套生命周期，意思就是Activity走了onResume(),fragment才会走自身的onResume()，多个Fragment 相互切换是不走onResume()和onDestroy()的。 如果listview 里addHeaderView()添加轮播图，则轮播图滚动时会调用 listview 的滚动监听，且返回的firstVisiblePosition = 0。 Activity 里放多个fragment，当加载过其中一个fragment A后，切到其他的fragment，直至销毁fragment A后,再直接切到fragment A，这时fragmentA.getUserVisibleHint() = false。所以依赖getUserVisibleHint() = true的逻辑要注意了！最好的方式是在 viewpager 的监听里，手动fragment.setUserVisibleHint(true)。 根据setUserVisibleHint()方法的调用时间，来实现 fragment 的懒加载。setUserVisibleHint() 会在onActivityCreated()之前调用，所以可以在onActivityCreated() 进行一系列初始化的操作，然后在 setUserVisibleHint() 里请求数据。具体请见这里。 其他 兼容5.0以下水波纹效果：新建drawable-21文件，里面放ripple文件，其他正常，详情。 listview某图标显示亮或不亮的问题：先全部不亮，再根据条件变亮。 当ScrollView里的元素想填满ScrollView时，使用 fill_parent 是不管用的，必需为ScrollView设置：android:fillViewport=&quot;true&quot;。 使TextView实现长按复制文本的功能，加上属性：android:textIsSelectable=&quot;true&quot; textView中间加横线:textView .getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG ); 使用retrofit请求时，Bean里如有Drawable字段，而且没有赋值，会数据解析异常，出现StackOverflowError错误。 Android 5.1的SDK把Button的默认Style改了，使Button上显示因为全为大写，加上属性android:textAllCaps=&quot;false&quot;就好了,详情。 使用retrofit请求时，若请求成功且有数据返回还报错，看Bean里字段或字段类型是否写错。 toolbar中设置标题和副标题文字颜色和大小时，在xml文件配置app:titleTextAppearance=&quot;@style/ToolBar.Title&quot;可以，其中 1234&lt;style name="ToolBar.Title" parent="@style/TextAppearance.Widget.AppCompat.Toolbar.Title"&gt; &lt;item name="android:textSize"&gt;18.0sp&lt;/item&gt; &lt;item name="android:textColor"&gt;@color/colorWhite&lt;/item&gt; &lt;/style&gt; 也可以在activity中设置：binding.titleToolBar.setTitleTextAppearance(this, R.style.ToolBar_Title); 设置透明状态栏时，布局根节点不要设置android:fitsSystemWindows=&quot;true&quot;否则状态栏会一直存在，被这个问题坑了一整天！！还有整块布局也不要给设置颜色。 retrofit设置post请求时，传数组时使用image_ids[] 12345@FormUrlEncoded@POST("/vip/diagnostic_explains")Observable&lt;ErrorBean&gt; postDiagnosticExplains(@Header("a") String a, @Field("userkey") String userkey, @Field("comment") String comment, @Field("image_ids[]") List&lt;Integer&gt; image_ids); 使用ACache工具缓存时，如果缓存的bean类名一致，或类里面的内部类一致，这时logcat会提示有两个相同bean的id，就是无效的类，或找不到该类。所以：缓存的文件里的类名最好不要一样！ 使用ACache工具缓存时，subList没有实现序列化！缓存List时会出错！详情 ImageView图片直接src会内存泄漏，图片宽高大时会很严重，建议代码设置。 1920*1080(1080p) 小米3，小米5等，属于xxhdpi，将图片放在这个文件夹内，这个分辨率的手机显示图片会很清晰，放在xhdpi清晰度会降低。 1.文字颜色选择器：里面的根节点应为color且最好放在新建color文件下。2.作为背景选择器来说，根节点应该是drawble，最好放在drawble文件夹下。 Glide加载图片：自动缓存当前图片的尺寸，如果其他地方取这个比例的图片则取的是缓存。不缓存等比例的图片！如果其他地方想要取当前图片的缓存，可加载时设置当前图片的宽高，用这个方法：override(300,400),值在dimens里取，直接设置会损失清晰度。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[更新日志-云阅]]></title>
      <url>%2F2016%2F12%2F30%2F%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-%E4%BA%91%E9%98%85%2F</url>
      <content type="text"><![CDATA[大家好，很高兴大家能看到这里，这里是云阅开源项目的当前所在版本的内容和下一版计划更新的内容，希望能帮到大家。 版本 V1.0 此版的具体说明请见项目主页：点击这里。 干货区（gank.io） 每日推荐 福利 干货订制 大安卓 电影区（豆瓣） 电影热映区 &amp; 豆瓣电影Top250 书籍区（豆瓣） 综合 文学 生活 抽屉界面 项目主页 扫码下载 问题反馈 关于云阅 下版本更新计划 保存图片按钮UI优化 toolbar标题栏文字滚动显示 增加干货、电影、书籍搜索功能。 书籍部分增加多个类别供更多数据选择，样式参考网易云音乐歌单筛选页 书籍部分adapter优化 感谢您的关注~]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常见问题-云阅]]></title>
      <url>%2F2016%2F12%2F25%2F%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E4%BA%91%E9%98%85%2F</url>
      <content type="text"><![CDATA[大家好，为了帮助大家更加愉快的使用云阅开源项目，现将大家可能遇到的问题及产生原因列举在这里，希望能帮到大家。 1.为什么我安装不上App？本APP只支持Android 4.4及以上系统版本，低于这之下的版本是安装不上的哦。 2.搜索，调整栏目等其他按钮点击没效果？由于项目需要做的功能点比较多，为了每个功能点做的精细，所以耗时较长，导致没有完善每个功能。后期将逐步的完善其中的功能，完善后会及时更新。 3.为了网页一直显示“加载中…”？在App中打开的网页皆是外链，由于网速慢，或限时访问等问题有可能会导致访问失败，这时不妨试试其他网页或等一段时间再访问。 4.问题反馈中点击QQ跳转错误。点击QQ直接跳转的是QQ会话页面，没有加好友可能导致此问题出现，可以加我的qq:770413277,然后再向我反馈即可。 5.首页没有内容展示？由于使用的代码家gank.io提供的api，双休时是不更新的，如果双休有数据取得则是之前的缓存。 6.上下迅速滑动后轮播图会跳动。这是暂时的一个问题所在，因为没有产生比较大的问题，所以被延后处理，后期将修复。 7.书籍或电影详情页一直访问失败？因为豆瓣api限制普通用于，每个ip每分钟请求次数是40次，超过ip会被暂时停用，一般为半小时左右，建议换到其他网络，或过一段时间再次访问。 8.点击更多进入详情页后返回要快速返回两次才有效。因为详情页是豆瓣提供的网页链接，我们这边无法处理，其他页面可能是正常的，谢谢。 9.有比较多的书籍详情的部分内容缺失。因为是展示的豆瓣提供的书籍页面，一切的数据内容都是豆瓣提供，如出现此类情况不能满足您的需要，请采用其他搜索引擎搜索，给您带来的不变深感抱歉。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[漫威电影宇宙]]></title>
      <url>%2F2016%2F12%2F04%2F%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99%2F</url>
      <content type="text"><![CDATA[漫威电影宇宙漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU），是由漫威影业（Marvel Studios）基于漫威漫画出版物中的角色独立制作的一系列电影所构成的共同的架空世界。它像漫画中的漫威主宇宙一样，是由共同的元素、设定、表演和角色通过跨界作品所建立的。 漫威电影宇宙独立于漫威宇宙（Earth-616）和终极宇宙（Earth-1610），编号为Earth-199999。 平行宇宙 漫威平行宇宙，例如616，199999这些，都是漫威宏大宇宙观里不同平行世界的地球编号。也许你们已经知道，钢铁侠，雷神，美国队长，这些我们所熟悉的伟大漫画英雄共同战斗在同一个世界中，相互往来，互相穿插，这，也是美漫的魅力之一。而简单来说，相对于我们真正生活的这个世界而言，漫画人物所身处的世界就是一个平行宇宙。他们的纽约，也有克莱斯勒大厦高高耸立，但与我们不同的是，那里，是黑帮老大，金并的资产;他们的地球，也曾遭受过两次世界大战的创伤，但与我们不同的是，众多的超级英雄们投身进入与纳粹的战斗。 地球199999MCU是漫威的复仇者联盟电影系列作品所在时空的简称，即Marvel Cinematic Universe，宇宙编号为Earth-199999。MCU 这个世界年龄很小，诞生至今，最多不过十年，但却用七年的成长书写了属于它的宇宙，千年的背景，未来的每周，它都会继续着讲述自己的故事，直到英雄落幕。 推荐观看顺序时间轴仅为时间发展顺序，仅作参考：《美国队长》→《探员卡特》→《特工卡特》→《钢铁侠》→《钢铁侠2》=&gt;《无敌浩克》→《神盾顾问》→《寻找雷神锤子路上发生的趣事》→《雷神》→《复仇者联盟》→《47号物品》→《钢铁侠3》→《王者万岁》→《神盾局特工》1-7集→《雷神2：黑暗世界》→《神盾局特工》8-16集→《美国队长2》→《神盾局特工》17-22集→《银河护卫队》→《神盾局特工第二季》1-19集→《复仇者联盟2：奥创纪元》→《神盾局特工第二季》20-22集（剧透部分已删，时间轴将《钢铁侠2》调整至《无敌浩克》之前，二者基本同时发生，从片尾来看《钢铁侠2》略早一点。将《顾问》调整至《无敌浩克》之后。） 拷贝了很多百度百科的描述之后，开始正式记录了.. 漫威漫画电影 复仇者复仇者联盟（2012年） 基于 宇宙魔方的战斗。宇宙魔方，拥有无穷的能量，是钢铁人把美国队长找回来时在海洋里带回来的，神盾局意在研究它制造武器。结果来自外星球（神域）的人（雷神的星球，他是雷神的弟弟）的抢夺。神盾局应付不来，于是请来了 美国队长，钢铁人，绿巨人，绿箭侠，黑寡妇，雷神众多的英雄一起对付，虽然刚开始有摩擦，到最后终究是齐心协力战胜了。最后，是钢铁侠推着原子弹进入了外星球把原子弹扔过去了，和他女朋友商量怎样重建他的工业大厦。 复仇者联盟2：奥创纪元 出现了双胞胎超能力的俩人（是美国队长2最后预示的），最初复仇者联盟成立之后一直在铲除九头蛇的人。遇到一个组织正在做奥创相关事情，这里面有一直存在里面的双胞胎姐弟。搞笑的一段是雷神在美国队长的盾牌上捶了一下把坦克给炸了。雷神的锤子没有人能拿得起，除了被钢铁侠创造出来的 幻，也是靠这个让大家服了，有一颗宝石在幻的头上，共有五颗宝石。他们去那组织带回来了奥创 ，即将完成的，然后放在斯塔克的大厦里，准备拿来创造新的纪元。然后被那个坏的把钢铁侠的人工智能机器人弄碎封闭了起来。最后双胞胎知道坏的那个想要毁灭地球，就背叛了他，弟弟为救“绿箭侠”牺牲了，姐姐使用魔法停住了火车，帮了很多。最后的奥创是被幻把电路的同化了。。剩下最后一个机器人，在谈话后也解决了。雷神和钢铁侠把在天空中的城市毁灭，才拯救了地球。 复仇者联盟3：无限之战I(2018年) 复仇者联盟3：无限战争》是复仇者联盟系列电影的第三部，是漫威电影宇宙的第十九部电影，本片将与《银河护卫队2》剧情连接[1] ，本片将会集齐所有漫威电影宇宙的超级英雄进行对抗灭霸，上演一场史无前例的拯救宇宙大战。漫威电影有史以来最强反派：灭霸登场。 复仇者联盟3：无限之战II(2019年) 《复仇者联盟3：无限战争（下）》（Avengers: Infinity War - Part II）是漫威影业出品的一部科幻动作电影，取材自漫威漫画，是漫威电影宇宙的第二十二部电影、同时也是《复仇者联盟》系列电影第三部的下集。由安东尼·罗素、乔·罗素兄弟执导，定于2019年5月3日美国上映。 银河护卫队银河护卫队(2014年) 自以为是的冒险家“星爵”彼得·奎尔在偷走一块神秘球体后成为赏金猎人的头号目标，原来邪恶反派罗南对此物体垂涎已久。为了逃脱无休止的追杀，奎尔被迫和四个格格不入的乌合之众结成同盟——手持机枪的火箭浣熊、树人格鲁特、凶残神秘的加美拉，以及复仇心切的毁灭者德拉克斯。然而当奎尔发现这颗球体蕴含的真正能量，以及它能给宇宙带来的巨大威胁时，他必须团结这群不入流的队友，破釜沉舟、决一死战，才有可能解救整个银河系。 银河护卫队：第二章(2017年) 在《银河护卫队》中，星爵的父亲惊鸿一瞥，被称为“古老的外星人”而被人所惦记。而《银河护卫队2》或许会从这位神秘的人物身上开始自己故事的讲述。影片的导演詹姆斯·古恩表示，这部电影将继续把故事主线放在星爵一家的关系之上，这次，将讲述的是星爵的父亲。他说：“这会是一个关于父亲们（fathers）的故事，所以我很期待故事的进展和最终的成品。”另外，由于银河护卫队系列联系到漫威宇宙，《银河护卫队2》中可能会出现未曾出现的最后一颗无限宝石。 异人族（延期） 地球时间数百万年前，宇宙两大种族Kree人和Skrull人发生了战争，为战略需要，Kree人来到太阳系，在天王星上设立了工作站。不久他们对当时地球生命的遗传潜能发生了兴趣，于是他们在当时的智人身上进行了一系列试验。这类试验的显然有双重意义，一是为了研究并防止自身进化中可能出现的停滞现象，同时为当时的战场制造一种强大的变种士兵。然而，当他们成功地创造出一群拥有非凡能力的人形物种时，不知什么原因，Kree人遗弃了他们的试验产物。 这个种群——异人族（Inhumans），在之后的日子里开始自我发展，他们发展出了自己的社会制度；与世隔离的生活使得他们拥有超越人类的先进技术。通过Terrigen雾，他们得到了各式各样的超能力，但同时也造成了基因的损坏与畸形。这导致一个长期的选育计划的实施，目的是为了减轻这些变异。他们的城市Attilan经常迁移，截至2005年的故事，Attilan已搬迁到了月球上的Blue Area。 浩克环球影业 绿巨人（2003年） 本名罗伯特·布鲁斯·班纳（Robert Bruce Banner），是一位天才核子物理学博士，在一次意外中为了保护同事而被自己制造出的伽玛炸弹（Gamma Bomb）放射线大量辐射，身体产生异变，后每当他情绪激动心跳加速的时候就会变成名为浩克的绿色怪物。由于变身后往往不受控制、所以为了不伤害自己周围的人、班纳游走于世界各地寻找控制愤怒的方法、即便如此班纳的浩克身份还是时常会造成毁灭性的破坏、因此常成为警方与有关单位追捕的对象。 漫威电影宇宙 无敌浩克（2008年） 故事讲述科学家布鲁斯·班纳（爱德华·诺顿饰）继续绝望地寻找能治愈他那被γ辐射毒害的体内细胞之疗法，以及解除那蕴藏体内、不受约束的另一个自己──绿巨人。 活在孤独及没有爱人的阴霾之下，布斯在治疗过程中还需过五关斩六将，一方面需逃避不断找寻他、扰人的复仇者霹雳将军罗斯（威廉·赫特饰）；另一方面要逃离一直欲捉拿他、利用他的异能之残暴军方。当布鲁斯在治疗上有了重大突破，变回常人的日子近在眼前之际，另一股同样拥有恐怖摧毁程度的力量突然出现。布斯眼看一切努力与心血快要毁于一旦，决定作出一次前所未有的反击。 钢铁侠钢铁侠（2008年） 被绑架时，被迫制造了第一个钢铁人，绑架的他是他的公司合伙人，然后挖走了他的供能芯片，最后基地爆炸把合伙人终结（女主引爆）。 钢铁侠2（2010年） 又一天才物理学家，因四十年前对他父亲造成惨败，怀恨在心，制造出一个仿冒的供能芯片，在赛车场和他决斗，被抓住后，被一位参议院解救，并利用他的资源，做了很多钢铁人（并会自爆）。最后和少尉的钢铁侠冲击波对冲炸掉了那个自制的仿冒钢铁侠。并在危急时刻解救了女主，抱到了阳台上，正式确定关系。 钢铁侠3（2013年） 因自己的自大，伤害了一位做人脑DNA研究的人（AIM），让他在阳台等了一晚上。后来变成恶人，和副总统合作，意在杀死总统。对方能是自己的NDA重组，不怕伤害，自动修复，身体能达到3000℃的高温，爆炸找不到弹片且威力巨大。将药打入女主的身体里，最后使得女主变体。干掉了攻击她的钢铁人，和那个恶人。最后，女主被治好，钢铁侠也取出了身体里一直存在的弹片（第一部被自己的炸弹爆炸植入）。 雷神雷神（2011年） 《雷神》的故事发生在现今的地球以及艾斯卡的奇幻世界。故事的中心人物是拥有强大神力的雷神托尔（Thor），但是他自大鲁莽的行为掀起了一场古老的战争，他也因此被贬入凡间作为惩罚，被迫与人类一同生活。托尔必须学会如何成为一个真正的英雄，才能对抗来自神界的强大黑暗势力。《雷神》一片探讨一个人的传奇冒险，他从一个傲慢自大的神界王位继承人被贬入凡间，他必须成为一名超级英雄才能登上王位。 雷神2：黑暗世界（2013年） 剧情承接《复仇者联盟》，讲诉了在纽约大战结束一年后，押送着弟弟洛基（汤姆·希德勒斯顿 Tom Hiddleston 饰）回到神域接受审判的雷神托尔（克里斯·海姆斯沃斯 Chris Hemsworth 饰）将面对一股远古黑暗势力的挑战——复仇心切的黑暗精灵首领马勒凯斯（克里斯托弗·埃克莱斯顿 Christopher Eccleston 饰）率领神秘而强大的种族卷土重来，了解他们的人只有一个——洛基。托尔不得不向洛基寻求帮助，并与之结盟，踏上有生以来最危险的征程——这次旅途固然会令他与地球恋人简·福斯特（娜塔丽·波特曼 Natalie Portman 饰）久别重逢，但也将迫使他牺牲一切，唯此才能拯救整个宇宙。 雷神3：诸神黄昏（2017年） 漫威旗下的超级英雄电影系列已经成为了迪士尼的摇钱树，目前，《雷神》系列第3部已经正在前期准备中。漫威日前宣布了担任这部续作的编剧人选：克里斯托弗·约斯特（《雷神2：黑暗世界》的编剧）与克雷格·凯尔。后者其实是漫威影业制片部的高级副总裁。 美国队长1990年系列美国队长（1990年） 无具体记录 漫威电影宇宙美国队长：复仇者先锋（2011年） 美国队长小的时候目标明确:保卫国家。但因为身体不好一直难以入选当兵。他一起的叫“冬兵”，是美队3里面的称呼。比他高大，做到了中尉级别。然后队长被博士发觉，看他善良，深刻的一幕是:扔了一个手榴弹过去，其他人都跑开了，队长把手榴弹跑在怀里，让别人走开。然后队长进行实验，成了很强壮，能力很强的人。在“冬兵”的帮助下，打败了红骷髅将军，宇宙魔方掉在了海里，将军消失了。冬兵掉在了悬崖下，但他是经过实验的，被九头蛇的人发现了，用来作为杀手。出现在美队2。（自己记录） 斯蒂夫·罗杰斯是出生于经济大萧条时期的一个家境贫寒的脆弱青年。因为看到纳粹在欧洲肆虐侵略的新闻而想入伍参军。但因为体弱多病被拒绝了。无意中得知了斯蒂夫·罗杰斯真心愿望的切斯特·菲利普斯将军决定给他一个机会，让他参加“重生计划”。经过几个星期的测试，斯蒂夫·罗杰斯被注射了超级士兵的血清并被用紫外线照射轰击，终于拥有了人类可能拥有的最完美躯体。 接着他接受了身体和战术上的训练。三个月后，他得到了作为“美国队长”的第一份任务，带着坚不可摧的盾牌和深谙战术的头脑，他投入了与红骷髅的斗争，最终阻止了红骷髅的邪恶计划，但是自己也因此被冰封，直到70年后才醒来。 美国队长2（2014年） 九头蛇的人渗透在神盾局。美国队长，猎鹰（有翅膀的那个），黑寡妇，神盾局局长（独眼龙）三人，闯入神盾局，安放三个芯片，使三个航母互相开火毁灭可。冬兵被派去打美国队长，但最后由于美国队长的一再劝说，美队掉入水中也是冬兵救的。（最后，钢铁侠中，一直针对他的一个官员也是九头蛇的，也被逮捕了。在《钢铁侠》中，那个官员被要求，给钢铁侠颁发奖章）（自己记录） 在经历了《复仇者联盟》的纽约大战后，美国队长史蒂夫·罗杰斯如今在华盛顿过着恬淡的生活，努力尝试着融入现代社会。然而当一名神盾局同事遭遇袭击后，史蒂夫被迫卷入了一场威胁全球安危的阴谋。他与黑寡妇携手出击，一边防备欲将自己灭口的杀手，一边努力揭露这个巨大阴谋的真面目。而当敌人的邪恶计划全局曝光后，美国队长和黑寡妇得到了一位新同盟“猎鹰”的协助。然而他们也发现自己将要面临的，是前所未遇、出乎意料的黑暗劲敌——冬兵。 美国队长3：内战（2016年） 因为解救人时出现了很多伤害民众的事件，复仇者联盟被要求被组织制约。美队不同意，也许是之前被组织背叛过。钢铁侠同意。国王被炸身亡后，出现了冬兵的影子，误认为是冬兵行动了，化身“黑豹”要杀了冬兵，被美队救下。最后冬兵被抓，一名被意外杀害了父母的人，找到了冬兵的“激活码”，让冬兵制造了杀戮。钢铁侠领着一批人和美队引着的一批人对打。最后钢铁侠发现自己错了，一起和美队去抓那个背后的人。那个人给看了一段视频，放的是，钢铁侠的父母被 九头蛇操控了的冬兵杀害了的事实。然后就彻底开战了。打到最后钢铁侠被打道，美队用盾牌打掉了钢铁侠胸前的电源。钢铁侠说盾牌是他父亲造的，然后就把盾牌丢了。背后的人 被黑豹交给了神盾局。冬兵也被美国队长带到黑豹那冰冻了起来。（自己记录） 在奥创对这个世界造成了巨大的影响之后，复仇者联盟还是团结一致保护人类的。但是在一些政治角力的背后，政府中有人认为是有必要控制一下这些超级英雄的超自然能力和他们的行动了。于是，一项管控措施出台。这个措施就是要求复联按照政府的要求来行动。任务的开展、进程和结束，都要由政府主导。这个管控措施在复联中引起了极大的争议。意见最极端、最两极分化不可调和的，就是钢铁侠和美国队长之间的问题，于是，这两个同盟者之间的矛盾就此爆发了出来。而复联的“内战”也不可避免的爆发。 蚁人蚁人（2015年） 行骗为生的斯科特·朗（保罗·路德饰），在偷了生化学家汉克·皮姆博士（迈克尔·道格拉斯饰）发明的蚁人战服后，拥有了自由收缩身体大小的超能力。汉克·皮姆博士开发出一种“皮姆粒子”，并和斯科特·朗一同成为“蚁人”。斯科特也不得不接受自己的英雄身份，并帮助皮姆博士守护蚁人技术之谜。在强大的敌人威胁下，两人必须精心策划并执行一场惊天骗局来拯救世界维护和平。 蚁人与黄蜂女（2018年） 《蚁人与黄蜂女》（Ant-Man and the Wasp），是漫威影业出品的一部科幻动作电影，取材自漫威漫画，是漫威电影宇宙的第二十部电影、同时也是《蚁人》系列电影的第二部。影片将在2018年7月6日上映。 奇异博士电视电影：奇异博士（1978年） 无记录 漫威电影宇宙：奇异博士（2016年） 性格高傲的神经外科手术专家史蒂芬·斯特兰奇（本尼迪克特·康伯巴奇饰）事业有成，在遭遇一次车祸悲剧后，双手再也无法握住手术刀，不能继续他的医生职业，为了治疗他的伤，他远赴尼泊尔费尽千辛万苦见到了古一法师（蒂尔达·斯文顿饰），斯蒂芬-斯特兰奇把自己曾经的自负都抛在了一边，开始接触和学习鲜为人知的玄学、以及多维空间世界的学问。在纽约的格林威治村，变身奇异博士的斯特兰奇，现实世界和多维空间的中间人，他利用超自然能力和神器来保护着世界，更要与力量强大党羽众多的卡西利亚斯（麦斯·米科尔森饰）一决高下，来拯救即将崩塌的多维世界。 黑豹（2018年） 黑豹（Black Panther）是美国漫威漫画旗下超级英雄，初次登场于《神奇四侠》第52期（1966年7月），由编辑斯坦·李以及漫画家杰克·科比共同创造，是第一位在主流美国漫画公司登场的非讽刺黑人超级英雄。本名特查拉（T’Challa），是非洲国家瓦坎达（Wakanda）的国王。为了使自己的国家变得更加富强，少年时的特查拉王子便前往英国留学，后毕业于牛津大学，在其父——前任黑豹特查卡（T’Chaka）死后，接任瓦坎达的国王。同时，黑豹也是一名杰出的科学家，还是复仇者联盟的成员之一，此外他的前妻则是X战警成员暴风女。 惊奇队长（2019年） 黑寡妇的独立电影遥遥无期，《惊奇队长》则成为漫威旗下第一部以女性为主角的超级英雄电影。漫威漫画中有男版和女版两位惊奇队长，而现任惊奇队长则是一名名为Carol Danvers的女士。凯文·费奇也在昨日的发布会表示这是一部以女惊奇队长为主角的电影。目前主演人选尚未确定。惊奇女士是复仇者联盟成员之一，因与外星人的接触而获得超乎于常人的力量和对痛苦的忍耐力，令人敬畏的物理伤害抵御能力，飞行能力和预知能力。 蜘蛛侠蜘蛛侠蜘蛛侠（2002年） 影片主要讲述彼特天性开朗，腼腆中仍包藏着一份单纯。拯救他的是一只哥伦比亚大学实验室的特殊蜘蛛，咬了他一口后，他眼镜消失了、脸蛋英俊了、肌肉发达了。遵循优良品种嫁接的原理，彼特当然也自动具有了撒网、织网、弹跳、飞跃、倒贴天花板的本事。彼特有了特异功能，叔父对他谆谆教诲：“能力越大，责任也越大。” 蜘蛛侠2（2004年） 《蜘蛛侠2》的故事发生在第1集结束2年后，彼得·帕克继续过着自己的双重生活，平时是性情温和的大学生，晚上则化身为拥有超能力的英雄蜘蛛侠，可是这两者之间的微妙平衡却越来越难以维系，爱人、朋友和慈爱的阿姨都开始怀疑他的真实身份；同时他还多了个更可怕的敌人——章鱼博士，彼得·帕克必须用尽全力对付这位邪恶魔头的疯狂计划。 蜘蛛侠3（2007年） 影片讲述在经历了重重考验之后，代表正义的蜘蛛侠成为了人人敬仰的正义英雄，抱得美人归。但是，被“毒液”共生体寄生下的帕克开始变得目中无人，邪恶开始在他的心中反客为主。蜘蛛侠的道德准则越来越模糊。 超凡蜘蛛侠超凡蜘蛛俠（2012年） 作为这个世界上最具有吸引力、最受追捧的超级英雄之一，与“蜘蛛侠”有关的文化传奇终于展开了一个全新的故事篇章，这一次重点强调的则是彼得·帕克（安德鲁·加菲尔德饰）不为人知的另一面。作为一个总是没办法融入到周遭环境的高中生，彼得很小的时候就被父母遗弃了，由他的叔叔本（马丁·辛饰）和婶子梅（莎莉·菲尔德饰）抚养长大。与大多数他这个年纪的少年一样，在当今这样一个大环境下，彼得也在尝试着寻找到那个真实的自我，他想知道自己到底是谁，来自于何处；与此同时，他还一直在摸索当中，不知道应该如何与自己的初恋格温·斯泰西（艾玛·斯通饰）坦然的相处，他们一起在爱、承诺与秘密中奋力的挣扎着。 随着彼得在无意之中发现了一个神秘的公文包，显然是属于他的亲生父亲的，也迫使着他展开了一场探寻真相的揭秘之旅，他要弄明白他的父母失踪的真正原因。遵循着自己所能收集到的蛛丝马迹，彼得径直来到了他爸爸曾经的搭档科特·康纳斯博士（瑞斯·伊凡斯饰）的实验室……然后，意外发生了，彼得化身成为了“蜘蛛侠”，与科特的另外一个身份——“蜥蜴人”展开了激烈的碰撞与对决，他需要做出的是足以改变一生的决定和选择，那就是利用超能力重新塑造属于他的命运，然后成为一个真正意义上的英雄。 超凡蜘蛛俠2（2014年） 彼得·帕克（安德鲁·加菲尔德饰）依然很忙，因为他一边要作为正常人谈恋爱，一边要变身蜘蛛侠打坏人。而格温（艾玛·斯通饰）高中还没毕业，彼得·帕克给格温父亲承诺过要以远离她的方式保护她，但他显然做不到。当一个新的大反派“电光人”（杰米·福克斯饰）出现后，彼得·帕克的生活更加不得安宁。一个老朋友哈利·奥斯本（戴恩·德哈恩饰）回归，帕克发现了关于他自己身世的新线索。 漫威电影宇宙蜘蛛侠：返校日（2017年） 正在拍摄中的《蜘蛛侠：返校节》近日传出片场照，确认了一个新反派：除迈克尔·基顿饰演的秃鹫，反派团体“邪恶六人组”另外一位成员惊悚（Shocker）也会在电影中出现，由Bokeem Woodbine饰演。之前就有些传言称惊悚会现身，如今看来他的造型比起漫画，更像《超凡蜘蛛侠2》游戏中的样子。 刀锋战士刀锋战士（1998年） 刀锋（韦斯利·斯奈普斯饰）自小就被专门打造新式武器的吸血鬼猎人亚伯拉罕·惠斯勒（克里斯·克里斯托佛森饰）收养，专门出入有吸血鬼出没的场所，拯救即将被消灭吞噬的人类，凭着他驾骑着机车，手持无敌火力的巨型火焰枪，以及无敌旋风刀和身后背负着的那把长剑，不死的无敌战神刀锋战士所向披靡，只要他一出现，躲藏在人群当中的吸血鬼将无所遁形。 于是，在这个未来的世界中，刀锋战士成了人类和吸血鬼双方争夺生存空间下最勇猛的正义战士，也因此，吸血鬼领袖狄肯·费斯（斯蒂芬·多尔夫饰）处心积虑要除去这心头大患，以完成他一统天下的大梦，他先利用刀锋战士的心理弱点给他致命的攻击，原来，刀锋出身时被吸血鬼血液浸满子宫，也成了半个吸血鬼，必须随时克制着自己对血的渴望。 狄肯·费斯先是邀请刀锋战士加入邪恶势力的一方，只要他们两方联手，相信没有人可以逃过他们的力量，然而刀锋战士作为献祭品以请出血王，增强自己的力量。在正邪双方的互斗之下，究竟谁才能获得最后的胜利。 刀锋战士2（2002年） 刀锋（韦斯利·斯奈普斯饰）的朋友惠斯勒（克里斯·克里斯托佛森饰）被一群吸血鬼捉去，被放进一个储藏罐里保鲜，供他们随时解渴。刀锋一路杀来救出了威斯勒，然后给他注入了抗病毒的药物，使他恢复了人的常态。但他们还没来得及叙旧，吸血鬼王国竟派信使来求援，他们请刀锋帮助打击一种威胁所有吸血鬼和人类的突变的吸血怪物，他们说这股吸血鬼新势力名为“收割机”。就这样，一种可以轻易使人变成怪物的名叫“收割机”的家伙使刀锋战士和本来势不两立的“采血包”吸血鬼暂时结为同盟。 “收割机”嗜血如命，但它们不是用嘴吸血，实际上，在它们的手掌中央有些细密的针管，就是说，只要它们把手放在你的身上就可以饱餐一顿。吸血鬼王国的内阁派出一直接受严格训练，本来是准备用来暗杀刀锋的突击队去和刀锋合作。为表示诚意，他们还特地派来美丽的妮莎（莱昂·维埃拉饰）协助刀锋战士。带着新机械师斯克斯和美女，刀锋战士准备向这些突变的吸血鬼恶棍开战了。 刀锋战士3（2004年） 在遥远的沙漠深处，一些吸血鬼正在试图让能产下更多吸血鬼的恐怖怪物复活，他就是德雷克（多米尼克·珀塞尔饰），这个可怕的吸血鬼拥有一种特殊的力量可以使自己在白天还能自由行动。如此以来，刀锋战士所面临的形式便更为严峻。此时，吸血鬼的领袖还对刀锋战士实施了一项恶毒的诽谤计划，他们把刀锋战士定义为了一个杀人怪物，制作了种种伪证并将它们送给了FBI，致使刀锋战士成为了FBI抓捕的对象。在刀锋战士和他的导师惠斯勒（克里斯·克里斯多佛森饰）与FBI探员坎伯兰得（詹姆斯·瑞马尔饰）以及他的手下进行了一次火药味十足的摊牌以后，刀锋战士极不情愿地与一群由人类组成的猎捕吸血鬼的小队结成了同盟，这个小队的头儿正是惠斯勒的漂亮女儿阿尔贝特（杰西卡·贝尔饰）和俏皮话满天飞的汉尼拔·金（瑞安·雷诺兹饰）。 当科学家萨姆菲尔德(娜塔莎·雷昂饰)一直在潜心研究以便可以制造出对付吸血鬼的终极溶液时，阿比盖尔带领的小队正与由强大的吸血鬼丹尼卡·塔罗斯(帕克·波西饰)所领导的一帮不死吸血鬼以及她那带有毒牙的随从们进行着一系列无情的厮杀。最终，刀锋战士发现他自己正在慢慢变成一个最为强大的吸血鬼，他的命运以及整个人类的命运都安危未定。 夜魔侠/艾丽卡夜魔侠（2003年） 又名超胆侠。影片主要讲述马特·默多克幼时意外双目失明，却也意外增强其余感官能力，在父亲遭歹徒袭击横死街头后，马特誓言为无辜受害者报复。白天是律师的他，晚上就化身超胆侠，将法律无法伸张的恶徒就地正法。 艾丽卡（2005年） 影片围绕一个雇佣杀手Elektra Natchios，她是一个杀手组织Hand训练、培养出来的一个杀手中的精英。Elektra接受了最新的刺杀任务，而目标包括一个13岁的小女孩Abby，Elektra不忍下手，后来更和Abby成为朋友。 惩罚者惩罚者（2004年） 弗兰克·卡斯特（Frank Castle）是原美国海军陆战队出身的军人，在越战退伍后担任部队训练教官，在与妻儿某日在公园聚餐时因目睹黑道私刑事件而一家三口当场惨遭黑道开枪灭口，侥幸伤重未死的弗兰克在出院后，运用自己的情报系统找出杀害妻儿的凶手并诉诸法律，但黑道却以各种管道和法律漏洞逃过制裁，对司法彻底感到绝望的弗兰克为了替妻儿报仇，决定以自己的方式诉诸武力来替妻儿讨回公道，并且对于任何罪犯都采取杀无赦的制裁手段。 他的做法太过于残暴，以至于很多的英雄都看不惯他的做法。 在大事件“内战”中，救了从钢铁侠那逃出来的蜘蛛侠，并送到了美国队长的据点。他还请求加入美国队长的队伍中，遭到了一些英雄的反对。途中，有两名罪犯也想加入美国队长的队伍中，惩罚者不由分说的杀了他们，这激怒了队长，队长打了他一顿，叫人把他送走了。 “黑暗王朝”时期，惩罚者被黑暗金刚狼戴肯所杀，但得到血石的力量暂时成为科学怪人，并与戴肯大战一场。目前，惩罚者已经恢复原来人体，继续自己的惩罚事业。 惩罚者2：战争特区（2009年） 本想归隐田园，与家人共度天伦的FBI探员弗兰克·卡斯特，无奈的在黑帮杀掉妻儿之后走向了黑暗复仇的不归路。弗兰克·卡斯特大难不死，在悲痛过后开始成为这个城市里隐秘的“惩罚者”，在黑暗中打击那些猖狂的犯罪分子的头号先锋。在处决了城内走私行当的龙头老大之后，惩罚者的名声鹊起，因此也令城内不少罪犯闻风丧胆，而他也就继续穿着代表惩罚者的骷髅制服，穿梭在这个充满罪恶的都市中。 可偏偏就有不信邪的人出现，一名新崛起的黑帮份子比利开始向惩罚者叫嚣，并且还要统领城内各大帮派，大有和惩罚者正面对决的气势。一番激斗之后，比利最终还是败在惩罚者的枪下。 不过出乎所有人意料的是，比利并没有成为弗兰克的枪下游魂。他竟然幸存了下来。但他的脸已经严重损毁，看上去好似一副混乱至极的拼图。在复仇烈焰的灼烧下，比利正式埋葬了自己，化名为“拼图”重出江湖。这时又一个奇怪而恐怖的人物出现了，从某种程度上来说他与弗兰克很相似，不论是当初坚定的复仇意志，还是绝不留情干净利落的冷血手法，但“拼图”的野心可不仅仅限于此，他还要将城内的黑帮一一吞并，自然这些帮派的头目也成了他砧板之肉。虽然这在一定程度上等于协助了弗兰克的工作，但敌人就是敌人。而在弗兰克逐步调查“拼图”的过程中，他惊讶地发现，事实的真相远非一般人能够承担。不过对于惩罚者来说，回应暴力的只有更加强大的暴力。 恶灵骑士恶灵骑士（2007年） 初代恶灵骑士本名乔纳森·布雷泽（Jonathan Blaze），简称强尼·布雷泽（Johnny Blaze），原是一名摩托车特技车手，为了拯救患癌养父便和魔鬼墨菲斯托做了交易而被邪灵扎坦诺斯附身，随后得到了控制地狱火的力量和可以让罪恶感受到痛苦的审判之眼。强尼成为了追求复仇的恶灵骑士。 灵魂战车2：复仇时刻（2012年） 该片讲述了强尼·布雷兹为救病重父亲和魔鬼做了交易，把灵魂卖给了魔鬼，布雷兹被一个古代恶魔附身，他化身为幽灵骑士。神父莫洛来到布雷兹的住处请布雷兹帮他找一个男孩，并答应作为回报，帮助布雷兹解除诅咒的故事。 X战警X战警X战警（2000年） 镭射眼（X战警的队长，可由两眼射出致命雷射光）、琴葛蕾（有心电感应、隔空取物，及瞬间移动的能力）、暴风女（X战警的副队长，拥有控制气候的能力）是X战警的核心人物。 而X战警队伍来了一位危险人物——金刚狼（拥有超强的回复能力，两腕上有超合金的金钢爪）是个脾气暴躁，几乎不受控制的变种人，使X战警内部危机四伏。X战警让它训练新兵，并想吸收它加入自己的行列。但无人知道它的来历，不久又发现它的大部分思维受外人操纵。更糟的是，又一种突变生物“万磁王”出现了，它能控制磁力和地球引力。它曾被人类当作怪物巡回展出，饱受屈辱。它憎恨人类，认为突变生物比人类更优秀，应该主宰人类。它和“金钢狼”携手为实现这一目标而不择手段。 而誓死保卫人类的X战警，将会发现他们在尽力保卫人类之时，人类也对他们也产生了极大的恐惧，双方关系渐渐紧绷。再加上X战警得面对金钢狼一触即发的脾气，与万磁王的到处杀戮，X战警陷入了进退两难的重重危机中[2] 。 X战警2（2003年） 故事开场紧接着第一集的结尾，“金刚狼”罗根为了找回自己过去的记忆离开了X教授的学校，隐姓埋名前往艾卡里湖（AkaliLake）工业中心；另一边，人类议会正忙于重建在变种人大战中受到重创的自由女神像；万磁王则继续在X教授精心打造的塑料监狱中服刑。从表面上看这个世界似乎渐渐回复了正常，但是X战警们没有察觉到，在这个世界的黑暗深处，新的阴谋正在悄悄临近，包括富有正义感的X战警在内的变种人。在普通人眼中代表着社会新物种对旧人类的挑战与威胁，因此他们必须在充满歧视和敌意的环境里挣扎求存。金刚狼的身世也将在本集中进一步揭开。 战警3：最后之战（2006年） 又称背水一战。在《X战警2》中，由于军方科学家的离间，人类对变种人的愤恨与压制彻底越过了底线，X教授与其带领的身怀绝技的X特警们面对着和解的难题与反抗的抉择，而一心企图令变种人称霸世界的万磁王摆脱囚禁后变得更为强大而狡猾。 三方都吸收了更庞大的新鲜力量，一场前所未有的人种之战剑拔弩张。与此同时，金刚狼和独眼龙还没能从痛失我爱中自拔，珍葛蕾却如凤凰涅磐般奇迹地回到战友中间。众人欣喜之外，却发觉她的性格变得狂乱分裂，甚至有倒戈相向的倾向，让X教授等对水坝一役后她死里逃生的经历不禁生疑。而在黑凤凰缺席的时间里，风暴女和金刚狼通力合作，日渐生情。沿着上集的线索，逐渐觉醒的金刚狼也破译了自己的基因密码。四人再聚首，感情的纠葛与身世的秘密和变种人的未来一样愈发扑朔迷离。人类已经按捺不住对自身势力受胁迫的恐惧，向变种人正式宣战。X教授虽坚持和平发展论，但在生死存亡之际，不得不与万磁王再次联手，为变种人的生存权利作最后一搏。而变种人内部关系也因为对仇恨的不同解读而势成水火，一位重要角色将因此牺牲。X战警必须自保并防止万磁王的野心在变种人中蔓延。 X战警：第一战（2011年） 影片将背景设在60年代古巴导弹危机发生时，讲述在变种人未被世人所知的时候，Charles Xavier和Erik Lensherr还没有被人称作“X教授”和“万磁王”。他们只是变种人中最早发现自己超能力的两个年轻人。他们那时也不是对手，而是非常亲密的朋友。两人以及其他几个变种人在一起工作，试图阻止“末日”的到来。但在这个过程中，两人之间出现了裂缝，最终，在万磁王的兄弟会与X教授率领的X战警之间，一场永恒之战开始了。 X战警：逆转未来（2014年） 故事发生在并不遥远的未来，X战警遭遇了史上最大的生存危机，他们必须回到过去拯救自己的命运。X战警也许在我们这个时代，是有着最先进基因的生物，但在不久的未来，他们都被“特拉斯克工业”创始人玻利瓦尔·特拉斯克所制造并指挥的新型特种战斗机器人“哨兵”所猎杀，并有着被灭绝的危险。 哨兵机器人可以检测出任何形式的变种类型，而他们的基因则能够让他们瞬间变换和改造自身，从而击败X战警。这使得X战警的唯一希望，便是回到过去，在特拉斯克的研究最终导致他们的灭绝之前，改变历史。 利用幻影猫凯蒂的能力，金刚狼罗根穿越时空开始了这个艰辛的旅程。这一次，他必须联合年轻的变种人领袖X教授，以及他一生的对手万磁王，去找到魔形女，并阻止特拉斯克。时间已经迫在眉睫，在过去，亦在未来，X战警同哨兵机器人的大决战即将展开。 X戰警：天啟（2016年） 天启出生于埃及第一王朝，是地球上最古老、最强大的变种人沙巴泊，曾拥有无数信众，但后来遭人背叛，被人活埋。几千年后，强大无匹而且永生不朽的天启从数千年的深埋中获释，愤怒的他发现同类不再被视为神祇，他对人类世界充满厌恶，决定摧毁它重造一个新世界。为了实现自己的野心，天启四处游走，开始搜集他的s仆人——天启四骑士。因为天启的力量，暴风女、灵碟、天使、万磁王的超能力得到巨幅提升，同时他也计划将他的意识移入X教授体内，从而组建一支变种人的军队。 天启的阴谋遭到正义的X战警们的顽强抵抗，X教授、魔形女、琴·格雷、镭射眼、夜行者、野兽、快银等变种人联起手来，与这个看似无法阻挡的敌人进行一场史诗对决。 金刚狼X战警前传：金刚狼（2009年） 《X战警前传》是由加文·胡德执导的科幻片，休·杰克曼、李佛·薛伯等主演。《X战警前传》包括2009 《X战警前传：金刚狼》（X-Men Origins: Wolverine）、2011《X战警：第一战》（X-Men: First Class）、2014 《X战警：逆转未来》（X-Men: Days of Future Past）三部影片。 金刚狼的原名是詹姆斯·霍莱特，出生于19世纪末加拿大的一个富裕家庭，他天生体弱但是骨骼清奇，而且他的家庭并不和睦，所以小詹姆斯性格内向而且孤僻。他一直就这样平静而枯燥地生活着，直到有一天晚上，园丁罗根杀死了父亲，丧父之痛让小詹姆斯激发了体内的奇特能力，他从身体里长出了由骨骼形成的“骨爪”，小詹姆斯用“骨爪”杀死了罗根。然而没想到的是，其实罗根才是小詹姆斯的生父，生父在临死前告诉了金刚狼他的身世。 于是小詹姆斯和哥哥维克多两人出逃。之后，两人参加了多次的战争，从一战一直打到越南战役。后来兄弟二人被史崔克将军招募，从事特种工作，厌倦了杀人的金刚狼后来脱离组织，才到了加拿大的林场当伐木工，改名为罗根。在逃亡中的罗根一直对自己天生的异能感到既恐惧又厌恶，于是自暴自弃。直到有一次，他在森林中偶遇并且爱上一名印第安血统女子“银狐”凯娅。凯娅后来被金刚狼的哥哥维克多（剑齿虎）所杀，愤怒的金刚狼决定接受史崔克将军的条件，同意进行变种人的改造实验。 罗根给自己起名为“金刚狼”，并且本身骨骼被改造成不可摧毁，天生的骨爪变成了金刚爪。被改造的金刚狼还被“X武器”组织洗脑，金刚狼苏醒后杀死了“X武器”组织的人之后逃跑，谁知道剑齿虎此时前来追杀，于是金刚狼与剑齿虎大战一场，金刚狼险胜之后离开。之后遇到了X教授，被得到了收留，开始了自己的X战警生涯，戎马一生。 金刚狼（2013年） 位于加拿大的深山老林，背负着永生之苦的金刚狼罗根（休·杰克曼饰）隐居于此，但每日恶梦不断。在一次与猎人的冲突中，他得到东瀛女子雪绪（福岛莉拉饰）的帮助，雪绪是罗根二战期间的旧相识矢志田市朗派来的下属，似乎不久于人世的老友渴望死去之间再见罗根一面。跨越重洋的罗根终于见到了虚弱的矢志田市朗，对方希望他能够保护自己的孙女真理子（冈本多绪饰）。随着老人谢世，葬礼上突然战火点燃。罗根在雪绪的帮助下拼死救出真理子，两人一起逃亡，并因此互生情愫。而矢志田市朗的儿子矢志田信玄（真田广之饰）似乎另有所图。在逃亡途中，罗根意外发现他丧失了自愈的能力，金刚狼最大的危机降临。 金刚狼3:罗根（2017年） 影片讲述了《X战警：逆转未来》未来逆转的一年后。也就是新2024年的故事 许多年过去了，变种人渐渐消失。金刚狼罗根迟暮，带着老年X教授独自生活。一天，一个小女孩出现在罗根的生活中，X教授告诉罗根她很像他，并请罗根保护她。随着小女孩的出现，一个阴谋浮出水面，原来她竟是金刚狼的复制体：X-23。与此同时，一个右手为机械手的生化人唐纳德·皮尔斯追踪到了X-23，同时也发现了罗根和教授的踪迹。为了保护自己最后的同伴兼家人，罗根与唐纳德·皮尔斯，以及幕后黑手，展开了他人生中，也是最后一次，殊死之战…… 死侍死侍（2016年）牌王漫威漫画改编电影列表 先停止更新，复制了很长时间，累了. https://zh.wikipedia.org/wiki/%E6%BC%AB%E5%A8%81%E6%BC%AB%E7%94%BB%E6%94%B9%E7%BC%96%E7%94%B5%E5%BD%B1%E5%88%97%E8%A1%A8 站外链接 【当贝市场】漫威系列电影、电视剧系列的正确顺序 灭霸前十都进不去？漫威电影宇宙反派人气排行榜 冯小刚给周星驰演戏 这片场照绝版了(走错片场了) 写在最后 记得看的第一部印象深刻的漫威电影的是《绿巨人》，当时觉得看的很振奋，纯属打斗场景，后来有机会接触了这系列的电影，知道是漫威宇宙，于是找到了这系列的全部电影，并一一全部看了。自己感到共鸣的并不是打斗的多么精彩，而是每个英雄为拯救人类的那种精神。 听见有人说美国英雄系列电影的一些套路就是：主角刚开始是个毫不起眼的角色，然后经历了一场灾难，获得了某种特殊能力，最初并不想用这种能力来帮助人类，经历很多事情的催化之后，明白自己应该承担起这份责任，保护人类，保护地球。（大概就是介么个意思） 开始认真看漫威系列电影的时候，看的是《钢铁侠》三部曲，然后是美国队长，刚开始每看完一部就写完这部的故事情节，最后因为看的太多了，一天可能看完好几部，就没有坚持下去，但觉得是个遗憾，因为不写下来，之后有一些主要情节可能都忘记了，跟别人谈论时，明明当时看的很认真，但是不知道从哪说起，花几分钟时间记录很重要，可以回顾故事情节的同时，也好日后好跟别人吹牛掰。哈哈 所以，这里记下电影的主要故事情节，有些是自己写的，有些则是网上摘录的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android 关于WebView全方面的使用（项目应用篇）]]></title>
      <url>%2F2016%2F12%2F04%2FAndroid%20%E5%85%B3%E4%BA%8EWebView%E5%85%A8%E6%96%B9%E9%9D%A2%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8%E7%AF%87%EF%BC%89%2F</url>
      <content type="text"><![CDATA[与JS交互 拨打电话、发送短信、发送邮件 上传图片(版本兼容) 进度条设置 字体大小设置 返回网页上一层、显示网页标题 全屏播放网络视频 文章说明WebView的使用已经是老生常谈了，看到很多文章说了用法，但我很少看到全的或者是项目中可以直接使用的，都是看了很多后，自己把功能都集合在一起。这里是一份比较全面的WebView项目应用篇，其中已经解决了应用时出现的很多bug，希望能对大家有帮助。 项目地址WebViewStudy 内容详细介绍电话短信邮件 给WebView设置WebViewClient： 1webView.setWebViewClient(new MyWebViewClient(this)); 其中MyWebViewClient内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/** * 监听网页链接:* - 优酷视频直接跳到自带浏览器 * - 根据标识:打电话、发短信、发邮件 * - 进度条的显示 * - 加载完成后，添加javascript监听 */public class MyWebViewClient extends WebViewClient &#123; private IWebPageView iWebPageView; private WebViewActivity activity; public MyWebViewClient(IWebPageView iWebPageView) &#123; this.iWebPageView = iWebPageView; activity = (WebViewActivity) iWebPageView; &#125; @SuppressWarnings("deprecation") @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; // 优酷视频跳转浏览器播放 if (url.startsWith("http://v.youku.com/")) &#123; Intent intent = new Intent(); intent.setAction("android.intent.action.VIEW"); intent.addCategory("android.intent.category.DEFAULT"); intent.addCategory("android.intent.category.BROWSABLE"); Uri content_url = Uri.parse(url); intent.setData(content_url); activity.startActivity(intent); return true; // 电话、短信、邮箱 &#125; else if (url.startsWith(WebView.SCHEME_TEL) || url.startsWith("sms:") || url.startsWith(WebView.SCHEME_MAILTO)) &#123; try &#123; Intent intent = new Intent(Intent.ACTION_VIEW); intent.setData(Uri.parse(url)); activity.startActivity(intent); &#125; catch (ActivityNotFoundException ignored) &#123; &#125; return true; &#125; iWebPageView.startProgress(); view.loadUrl(url); return false; &#125; @Override public void onPageFinished(WebView view, String url) &#123; if (activity.progress90) &#123; iWebPageView.hindProgressBar(); &#125; else &#123; activity.pageFinish = true; &#125; if (!CheckNetwork.isNetworkConnected(activity)) &#123; iWebPageView.hindProgressBar(); &#125; // html加载完成之后，添加监听图片的点击js函数 iWebPageView.addImageClickListener(); super.onPageFinished(view, url); &#125; // 视频全屏播放按返回页面被放大的问题 @Override public void onScaleChanged(WebView view, float oldScale, float newScale) &#123; super.onScaleChanged(view, oldScale, newScale); if(newScale - oldScale &gt; 7) &#123; view.setInitialScale((int)(oldScale / newScale * 100)); //异常放大，缩回去。 &#125; &#125;&#125; 因为有很多配置，这里把各个功能模块通过接口IWebPageView分离了出来，这样逻辑更清晰。 与JS交互相信大家已经看到了上面”—-点击了图片”的Toast，这里需要先给WebView设置JavascriptInterface：webView.addJavascriptInterface(new ImageClickInterface(this), &quot;injectedObject&quot;); 其中ImageClickInterface相关代码： 1234567891011121314151617public class ImageClickInterface &#123; private Context context; public ImageClickInterface(Context context) &#123; this.context = context; &#125; @JavascriptInterface public void imageClick(String imgUrl, String hasLink) &#123; Toast.makeText(context, "----点击了图片", Toast.LENGTH_SHORT).show(); // 查看大图// Intent intent = new Intent(context, ViewBigImageActivity.class);// intent.putStringArrayListExtra("imgUrl",imgUrl);// context.startActivity(intent);// Log.e("----点击了图片 url: ", "" + imgUrl); &#125;&#125; 加入监听：1234567891011public void addImageClickListener() &#123; // 这段js函数的功能就是，遍历所有的img节点， // 并添加onclick函数，函数的功能是在图片点击的时候调用本地java接口并传递对应src和has_link里的值过去 webView.loadUrl("javascript:(function()&#123;" + "var objs = document.getElementsByTagName(\"img\");" + "for(var i=0;i&lt;objs.length;i++)" + "&#123;" + "objs[i].onclick=function()&#123;window.injectedObject.imageClick(this.getAttribute(\"src\"),this.getAttribute(\"has_link\"));&#125;" + "&#125;" + "&#125;)()"); &#125; 我们来看一下网页对应的源码：1&lt;img src="[./callsms_files/753b877c-c098-43e9-85cc-6df5bbdaaafe](./callsms_files/753b877c-c098-43e9-85cc-6df5bbdaaafe)" style="width: 100%"&gt; 大家可能觉得有点怪异..因为这是保存的本地网页，如是线上的话，是这样：1&lt;img src='[http://7xk154.com1.z0.glb.clouddn.com/article/753b877c-c098-43e9-85cc-6df5bbdaaafe](http://7xk154.com1.z0.glb.clouddn.com/article/753b877c-c098-43e9-85cc-6df5bbdaaafe)' style='width: 100%'&gt; 这里传递过去的是一个图片url的值，没有的属性传过去的则是null。这样我们就可以对其进行具体的操作了。 字体大小设置12/** 设置字体默认缩放大小(改变网页字体大小,setTextSize api14被弃用)*/ws.setTextZoom(100); 其中100为默认缩放比，通过设置缩放比来控制字体大小。 上传图片(版本兼容) &amp; 全屏播放网络视频 &amp; 显示网页标题这里因为篇幅原因，里面的代码很多，就不贴出来了，大家可以点击MyWebChromeClient.java，查看具体代码。 返回网页上一层返回网页上一层及退出全屏等操作：12345678910111213141516171819@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) &#123; if (keyCode == KeyEvent.KEYCODE_BACK) &#123; //全屏播放退出全屏 if (webChromeClient.inCustomView()) &#123; hideCustomView(); return true; //返回网页上一页 &#125; else if (webView.canGoBack()) &#123; webView.goBack(); return true; //退出网页 &#125; else &#123; webView.loadUrl("about:blank"); finish(); &#125; &#125; return false;&#125; 进度条设置这里用的是先加载到90%再加载到100%, 具体为什么相信大家都懂吧… 123456789101112131415161718// 进度条 假装加载到90%public void startProgress90() &#123; for (int i = 0; i &lt; 900; i++) &#123; final int progress = i + 1; mProgressBar.postDelayed(new Runnable() &#123; @Override public void run() &#123; mProgressBar.setProgress(progress); if (progress == 900) &#123; progress90 = true; if (pageFinish) &#123; startProgress90to100(); &#125; &#125; &#125; &#125;, (i + 1) * 2); &#125; &#125; 再加载到100%:123456789101112// 加载到90%后再加载到100%public void progressChanged(int newProgress) &#123; if (progress90) &#123; int progress = newProgress * 100; if (progress &gt; 900) &#123; mProgressBar.setProgress(progress); if (progress == 1000) &#123; mProgressBar.setVisibility(View.GONE); &#125; &#125; &#125; &#125; 推荐阅读 如很多细节不知缘由的查看这里 https://developer.android.com/reference/android/webkit/WebSettings.html http://www.jianshu.com/p/32d48ca7d0e0 http://www.apkfuns.com/android-webview%E4%B8%8Ejavascript%E4%BA%A4%E4%BA%92.html 所遇问题 WebView加载网页不显示图片解决办法 webview: 视频全屏播放按返回页面被放大的问题 Failed to init browser shader disk cache. EGL_BAD_DISPLAY Unknown frame routing id: 3 找不到assets目录下资源：注意assets在哪层文件夹下！与AndroidManifest.xml同级 视频播放宽度比webview设置的宽度大，超过屏幕：设置ws.setLoadWithOverviewMode(false); onDestroy时的清除资源操作 End最后再附一遍项目地址😆：WebViewStudy]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android 关于Glide的使用(高斯模糊、加载监听、圆角图片)]]></title>
      <url>%2F2016%2F11%2F29%2FAndroid%20%E5%85%B3%E4%BA%8EGlide%E7%9A%84%E4%BD%BF%E7%94%A8(%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E3%80%81%E5%8A%A0%E8%BD%BD%E7%9B%91%E5%90%AC%E3%80%81%E5%9C%86%E8%A7%92%E5%9B%BE%E7%89%87)%2F</url>
      <content type="text"><![CDATA[引用1compile 'com.github.bumptech.glide:glide:3.7.0' 加载图片基本加载123Glide.with(context) .load(url) .into(imageView); 设置加载中和加载失败的情况12345Glide.with(context) .load(url) .placeholder(R.drawable.loading) //占位符 也就是加载中的图片，可放个gif .error(R.drawable.failed) //失败图片 .into(view); 只加载动画1234Glide.with(context) .load(url) .asGif() // 只能加载gif文件 .into(imageView); 添加图片淡入加载的效果123456Glide.with(context) .load(url) .placeholder(R.drawable.loading) .error(R.drawable.failed) .crossFade(1000) // 可设置时长，默认“300ms” .into(view); 加载高斯模糊图1234567Glide.with(context) .load(url) .placeholder(R.drawable.loading) .error(R.drawable.failed) .crossFade(1000) .bitmapTransform(new BlurTransformation(context,23,4)) // “23”：设置模糊度(在0.0到25.0之间)，默认”25";"4":图片缩放比例,默认“1”。 .into(view); 加载监听器RequestListener12345678910111213Glide.with(this).load(internetUrl).listener(new RequestListener&lt;String, GlideDrawable&gt;() &#123; @Override public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123; Toast.makeText(getApplicationContext(),"资源加载异常",Toast.LENGTH_SHORT).show(); return false; &#125; //这个用于监听图片是否加载完成 @Override public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123; Toast.makeText(getApplicationContext(),"图片加载完成",Toast.LENGTH_SHORT).show(); return false; &#125; &#125;).into(imageView); 注意：如果需要加载完成后设置图片透明度为0，则不能设置.placeholder(R.drawable.url)，否则达不到你想要的效果。 图片缓存机制Glide缓存策略 Glide默认开启磁盘缓存和内存缓存，当然也可以对单张图片进行设置特定的缓存策略。设置图片不加入到内存缓存 1234Glide.with( context ) .load( eatFoodyImages[0] ) .skipMemoryCache( true ) .into( imageViewInternet ); 设置图片不加入到磁盘缓存 1234Glide.with( context ) .load( eatFoodyImages[0] ) .diskCacheStrategy( DiskCacheStrategy.NONE ) .into( imageViewInternet ); Glide支持多种磁盘缓存策略： DiskCacheStrategy.NONE :不缓存图片DiskCacheStrategy.SOURCE :缓存图片源文件DiskCacheStrategy.RESULT:缓存修改过的图片DiskCacheStrategy.ALL:缓存所有的图片，默认 加载圆角图片1234567891011121314151617181920212223242526272829303132333435public class GlideCircleTransform extends BitmapTransformation &#123; public GlideCircleTransform(Context context) &#123; super(context); &#125; @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123; return circleCrop(pool, toTransform); &#125; private static Bitmap circleCrop(BitmapPool pool, Bitmap source) &#123; if (source == null) return null; int size = Math.min(source.getWidth(), source.getHeight()); int x = (source.getWidth() - size) / 2; int y = (source.getHeight() - size) / 2; // TODO this could be acquired from the pool too Bitmap squared = Bitmap.createBitmap(source, x, y, size, size); Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888); if (result == null) &#123; result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888); &#125; Canvas canvas = new Canvas(result); Paint paint = new Paint(); paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP)); paint.setAntiAlias(true); float r = size / 2f; canvas.drawCircle(r, r, r, paint); return result; &#125; @Override public String getId() &#123; return getClass().getName(); &#125;&#125; 使用： 1234Glide.with(mContext) .load(imageUrl) .transform(new GlideCircleTransform(mContext)) .into(holder.imageView); 获得图片缓存路径12345678910111213private String getImagePath(String imgUrl) &#123; String path = null; FutureTarget&lt;File&gt; future = Glide.with(ViewBigImageActivity.this) .load(imgUrl) .downloadOnly(500, 500); try &#123; File cacheFile = future.get(); path = cacheFile.getAbsolutePath(); &#125; catch (InterruptedException | ExecutionException e) &#123; e.printStackTrace(); &#125; return path;&#125; 注意：应在子线程中执行。 使用： 123456789101112131415new Thread(new Runnable() &#123; @Override public void run() &#123; // 子线程获得图片路径 final String imagePath = getImagePath(imageUrl); // 主线程更新 MainActivity.this.runOnUiThread(new Runnable() &#123; @Override public void run() &#123; // 操作代码 &#125; &#125;); &#125;&#125;).start(); 参考 http://blog.csdn.net/zhihui_520/article/details/51822336 http://blog.csdn.net/u010694658/article/details/52689317]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[收集“新奇的网站”]]></title>
      <url>%2F2016%2F11%2F23%2F%E6%94%B6%E9%9B%86%E2%80%9C%E6%96%B0%E5%A5%87%E7%9A%84%E7%BD%91%E7%AB%99%E2%80%9D%2F</url>
      <content type="text"><![CDATA[产品原型制作 Sketch，最佳原型制作工具 Dribbble，养成一双发现并懂得美的眼睛(美图) 新奇-Get quickly inspiration!（页面） 免费的高清图片 dribbble 全球最优质的设计作品聚集地 UI设计师推荐 站酷(ZCOOL)-设计师互动平台 黄蜂网 UI中国-专业界面交互平台 behance 展示和发现创意作品 颜色搭配及icon制作 ColorHunt-色彩搭配 icon在线制作 icon图标库 RGB颜色值转换成十六进制颜色码 移动应用分发 Fir.im 豌豆荚 play store]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[可能是讲解Android事件分发最好的文章]]></title>
      <url>%2F2016%2F11%2F22%2F%E5%8F%AF%E8%83%BD%E6%98%AF%E8%AE%B2%E8%A7%A3Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%80%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0%2F</url>
      <content type="text"><![CDATA[这是在简书上看到的一篇文章，感觉非常好，就转了过来，这是老外写的，这个作者翻译过来的。 综合之前在CSDN写过的一篇类似的文章[Android 简述事件分发机制]，差不多这个知识点就清晰了。 我几乎看过国内讲解Android事件分发的所有文章，但遗憾的是都没有这篇讲的好，原因有二：它阐明了具体的事件分发机制的设计意图，让人既知其然，又知其所以然；它没有贴源码，吓唬本宝宝。所以我决定将它翻译出来，造福广大Android开发者。原文请点击这里 有时，你必须要自己处理触摸事件（touch events）而不能依赖于有可用的onSomethingListener。我就遇到过这样的时候，当时我很想有一篇文章能简单地解释触摸事件是怎样在视图层次（view hierarchy）中传播的，从而可以将之作为进一步深入学习的起点。这篇博客是我的一次尝试，它看起来有点长，但这是因为我是按照触摸事件的传播过程一步一步来写的。 一些假设我们只考虑最重要的四个触摸事件，即：DOWN,MOVE,UP和CANCEL。一个手势（gesture）是一个事件列，以一个DOWN事件开始（当用户触摸屏幕时产生），后跟0个或多个MOVE事件（当用户四处移动手指时产生），最后跟一个单独的UP或CANCEL事件（当用户手指离开屏幕或者系统告诉你手势（gesture）由于其他原因结束时产生）。当我们说到“手势剩余部分”时指的是手势后续的MOVE事件和最后的UP或CANCEL事件。 在这里我也不考虑多点触摸手势（我们只假设用一个手指）并且忽略多个MOVE事件可以被归为一组这一实际情况。最后，我们假设文中的view都没有注册onTouchListener。 我们将要讨论的视图层次是这样的：最外层是一个ViewGroup A，包含一个或多个子view（children），其中一个子view是ViewGroup B，ViewGroupB中又包含一个或多个子view，其中一个子view是 View C,C不是一个ViewGroup。这里我们忽略同层级view之间可能的交叉叠加。 假设用户首先触摸到的屏幕上的点是C上的某个点，该点被标记为触摸点（touch point），DOWN事件就在该点产生。然后用户移动手指并最后离开屏幕，此过程中手指是否离开C的区域无关紧要，关键是手势（gesture）是从哪里开始的。 默认情况假设上面的A,B,C都没有覆写默认的事件传播行为，那么下面就是事件传播的过程： DOWN事件被传到C的onTouchEvent方法中，该方法返回false，表示“我不关心这个手势（gesture）”。 因此，DOWN事件被传到B的onTouchEvent方法中，该方法同样返回false，表示B也不关心这个手势。 同样，因为B不关心这个手势，DOWN事件被传到A的onTouchEvent方法中，该方法也返回false。 由于没有view关心这个手势（gesture），它们将不再会从“手势剩余部分”中接收任何事件。 处理事件现在，让我们假设C实际上是关心这个手势（gesture）的，原因可能是C被设置成可点击的（clickable）或者你覆写了C的onTouchEvent方法。 DOWN事件被传递给C的onTouchEvent方法，该方法可以做任何它想做的事情，最后返回true。 因为C说它正在处理这个手势（gesture），则DOWN事件将不再被传递给B和A的onTouchEvent方法。 因为C说它正在处理这个手势（gesture），所以“手势剩余部分”的事件也将传递给C的onTouchEvent方法，此时该方法返回true或false都无关紧要了，但是为保持一致最好还是返回true。 个人理解：从这里可以看出，各个View的onTouchEvent方法对DOWN事件的处理，代表了该View对以此DOWN开始的整个手势（gesture）的处理意愿，返回true代表愿意处理该gesture，返回false代表不愿意处理该gesture。 onInterceptTouchEvent现在我们将讨论一个新的方法：onInterceptTouchEvent，它只存在于ViewGroup中，普通的View中没有这个方法。在任何一个view的onTouchEvent被调用之前，它的父辈们（ancestors）将先获得拦截这个事件的一次机会，换句话说，它们可以窃取该事件。在刚才的“处理事件”部分中，我们遗漏了这一过程，现在，让我们把它加上： DOWN事件被传给A的onInterceptTouchEvent，该方法返回false，表示它不想拦截。 DOWN又被传递给B的onInterceptTouchEvent，它也不想拦截，因此该方法也返回false。 现在，DOWN事件被传递到C的onTouchEvent方法，该方法返回true，因为它想处理以该事件为首的手势（gesture）。 现在，该手势的下一个事件MOVE到来了。这个MOVE事件再一次被传递给A的onInterceptTouchEvent方法，该方法再一次返回false，B也同样如此。 然后，MOVE事件被传递给C的onTouchEvent，就像在前一部分中一样。 “手势剩余部分”中其他事件的处理过程和上面一样，假如A和B的onInterceptTouchEvent方法继续返回false的话。 这里有两点需要注意： 虽然ViewGroup A和B的onInterceptTouchEvent方法对DOWN事件返回了false，后续的事件依然会传递给它们的onInterceptTouchEvent方法，这一点与onTouchEvent的行为是不一样的。 假如DOWN事件传给C的onTouchEvent方法时，它返回了false，DOWN事件会继续向上传递给B和A的onTouchEvent，即使它们在onInterceptTouchEvent方法中说它们不想拦截这个DOWN事件，但没办法，没有子View愿意处理该事件。 个人理解：感谢@编程世界的孩子 的提醒，由此可见，DOWN事件的处理实际上经历了一下一上两个过程，下是指A-&gt;B的onInterceptTouchEvent，上是指C-&gt;B-&gt;A的onTouchEvent，当然，任意一步的方法中返回true,都能阻止它继续传播。 拦截事件现在，让我们更进一步，假设B没有拦截DOWN事件，但它拦截了接下来的MOVE事件。原因可能是B是一个scrolling view。当用户仅仅在它的区域内点击（tap）时，被点击到的元素应当能处理该点击事件。但是当用户手指移动了一定的距离后，就不能再视该手势（gesture）为点击了——很明显，用户是想scroll。这就是为什么B要接管该手势（gesture）。 下面是事件被处理的顺序： DOWN事件被依次传到A和B的onInterceptTouchEvent方法中，它们都返回的false，因为它们目前还不想拦截。 DOWN事件传递到C的onTouchEvent方法，返回了true。 在后续到来MOVE事件时，A的onInterceptTouchEvent方法仍然返回false。 B的onInterceptTouchEvent方法收到了该MOVE事件，此时B注意到用户手指移动距离已经超过了一定的threshold（或者称为slop）。因此，B的onInterceptTouchEvent方法决定返回true，从而接管该手势（gesture）后续的处理。 然后，这个MOVE事件将会被系统变成一个CANCEL事件，这个CANCEL事件将会传递给C的onTouchEvent方法。 现在，又来了一个MOVE事件，它被传递给A的onInterceptTouchEvent方法，A还是不关心该事件，因此onInterceptTouchEvent方法继续返回false。 此时，该MOVE事件将不会再传递给B的onInterceptTouchEvent方法，该方法一旦返回一次true，就再也不会被调用了。事实上，该MOVE以及“手势剩余部分”都将传递给B的onTouchEvent方法（除非A决定拦截“手势剩余部分”）。 C再也不会收到该手势（gesture）产生的任何事件了。 下面的一些小事情可能会令你感到吃惊： 如果一个ViewGroup拦截了最初的DOWN事件，该事件仍然会传递到该ViewGroup的onTouchEvent方法中。 另一方面，如果ViewGroup拦截了一个半路的事件（比如，MOVE），这个事件将会被系统变成一个CANCEL事件，并传递给之前处理该手势（gesture）的子View，而且不会再传递（无论是被拦截的MOVE还是系统生成的CANCEL）给ViewGroup的onTouchEvent方法。只有再到来的事件才会传递到ViewGroup的onTouchEvent方法中。 从此开始，你可以更进一步。比如对mouthful-method （实在不知道该怎么翻译啦！）requestDisallowInterceptTouchEvent,C可以用该方法阻止B窃取事件。如果你想更加疯狂一点，你可以在你自己的ViewGroup中直接覆写dispatchTouchEvent方法，并对传递进来的事件做任何你想做的处理。但这样的话你可能会破坏一些约定，所以应当小心。 文／milter（简书作者)原文链接：http://www.jianshu.com/p/2be492c1df96]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Mac搭建Hexo博客流程记录，排雷完成]]></title>
      <url>%2F2016%2F11%2F19%2FMac%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95%EF%BC%8C%E6%8E%92%E9%9B%B7%E5%AE%8C%E6%88%90%2F</url>
      <content type="text"><![CDATA[经过一天的辛苦作战，总算基础的东西出来了。踩了太多的坑，综合我踩坑的经过，明白到，选好一篇引导文很重要！有些步骤不要先做了，不然后面会把你坑的很惨.. 引很多博客都已经详细讲述了Hexo博客框架的好处和怎么做，下面的推荐文章里会给出链接。但有些过于复杂，让初次配置的人有点雨里雾里；有些又太简单，出了问题就会不知道怎么回事。下面是自己的搭建记录，及所遇问题的解决。 在此感谢小马哥Mark和 wingjay先前分享的教程，有些段落是从你们里搬运过来的，希望博主见谅，如有侵权，请联系我删除。 Ok，现在开始： GitHub Pages在不购买服务器的前提下，我们的网站需要挂在GitHub Pages上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。 首先你需要拥有一个GitHub账号。 然后进入GitHub Pages，一步步做，完成后就能在浏览器打开http://username.github.io了。 至此，我们已经利用GitHub Pages搭建好了个人博客雏形了。下面要做的，就是个性化了。 注意：如果你http://username.github.io首页就要是博客首页的话，建议初次配置选择首页，就是这样。完成后可以把index.html给删了，因为到最后你发现那是没用的，它将会给你造成干扰。 前期准备安装Hexo参考中文文档或英文文档。完成该步后，你的电脑便拥有了Git、Node.js和Hexo。 测试安装状态1234567$ node -v v4.2.4$ npm -v2.14.12$ hexo -v 正式开始确定拥有了Git、Node.js和Hexo后，进行下一步： 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 这样Hexo会在该文件夹创建本地博客所需的一切资源。这样本地博客就搭建好了，输入以下命令： 1hexo s --debug // 启动本地hexo 服务器，默认localhost:4000可以访问，可以看到调试信息 这样就开启了一个本地博客服务器，打开浏览器，在地址栏输入localhost:4000，就可以查看本地博客了，hexo默认生成了一片hello world博客。出现问题可以看terminal终端错误信息。按control + c关闭调试。 注意：以上hexo开头的命令，执行目录必须是你创建的博客文件夹目录。使用hexo s 也可以，只是没有了调试信息。 同步Hexo博客到Github现在你已经可以在本机查看你的博客了，但是要想让别人通过网络可以查看你的博客，还需要一步，那就是将你的博客发布到github仓库。在terminal终端，将当前目录切换到你的本地博客目录，执行以下命令： 1npm install hexo-deployer-git --save 安装完成之后，打开本地博客目录的_config.yml文件，编辑其中的deploy节点： 1234deploy: type: git repo: https://github.com/youlookwhat/youlookwhat.github.io.git branch: master 注意：字段前需加空格，hexo有严格的格式规范。 保存配置之后，你可以不着急传到仓库，先刷新本地博客，看是否还是原样，如有问题可以看到terminal终端上的错误信息，然后检查没问题为止。 确认无误之后，在本地博客目录执行以下命令： 123hexo clean // clean本地项目，防止缓存hexo g // 全拼是：hexo generate，可以简写成 hexo g; 根据你编辑的md格式的博客，生成静态网页hexo d // 全拼是：hexo deploy，可以简写成 hexo d; 将本地博客发布到github 然后，在浏览器地址栏输入username.github.io就可以访问你的博客了，别人也可以通过这个地址访问你的博客。如果错误请重复看以前流程，或参考其他文章，也可以联系我. NexT主题配置 Next主题 Hexo主题非常多，可以参考丰富多彩的Hexo主题，本文选Next为主题，NexT主题是一套简约的主题，设置完成之后，就像我的博客现在的样子，里面有详细的配置说明，这里就不重述了。 配置后调试： 123hexo cleanhexo ghexo s --debug 确认无误后上传： 123hexo cleanhexo ghexo d 注意：因为hexo有严格的格式规范，所以建议配置时及时调试页面。 优化环节 域名设置 fork me on github 配置SSH key 给博文添加tag和分类(主题) 手动实现某条博文置顶 域名设置大家可以看：替换自己的域名 ,里面讲述的详细。 注意：在万网买了域名以后直接在里面配置，这里只是参考用的。 其它四条大家可以看：其他遗漏的点 注意：配置后进入调试模式测试一下，这样错了就可以马上更正。 常用命令 cd 到仓库所在文件夹目录下： 1234567hexo init //在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件hexo new “my new blog title” //新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。hexo s --debug // 启动本地hexo 服务器，默认localhost:4000可以访问hexo clean // 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存hexo generate // 可以简写成hexo g 根据markdown文件生成静态文件hexo deploy // 或者简写成hexo d 将本地修改，部署到远端hexo version // 显示hexo版本 推荐文章 Mac搭建Hexo博客及NexT主题配置优化 如何在一天之内搭建以你自己名字为域名又具备cool属性的个人博客 使用GitHub和Hexo搭建免费静态Blog 动动手指，NexT主题与Hexo更搭哦（基础篇） 所遇问题 按照步骤来，及时调试，确认无误后再执行下一步。有一句话说的好，步子跨大了容易扯着蛋。 建议将基础的先搭建出来，主题细节可以之后再慢慢配置。 编辑站点_config.yml文件其中的deploy节点时，注意repo的值。 替换域名时： 直接在万维网设置解析方式； 在仓库Setting的要设置跳转链接； CNAME会被覆盖，安装CNAME工具hexo-generator-cname 为博客文章添加阅读量统计功能，参照这里，注意顺序，我在其中被坑过。 设置网站图标时，就是上传“.ico”文件时，确认成功后浏览器会有缓存，显示不出来，关掉浏览器清除缓存就好了（可放在最后）。 设置代码高亮主题测试时没事，上传后会有延迟，等等就好了（本人这样）。 设置搜索栏，进入swiftype官网，注册不上，应该收费了- -. 设置侧边栏社交链接时，social:下面字段前要有两个空格，切记。 相关网址NexT、多说、百度统计、leancloud、阿里云、fork me、ico制作 联系我 我的简书 我的CSDN 我的个人博客]]></content>
    </entry>

    
  
  
</search>
