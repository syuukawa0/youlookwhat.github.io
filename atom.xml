<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jing Bin&#39;blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jingbin.me/"/>
  <updated>2017-01-14T12:22:49.000Z</updated>
  <id>http://jingbin.me/</id>
  
  <author>
    <name>Jingbin_</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>云阅：一个基于网易云音乐UI，使用Gank.Io及豆瓣Api开发的开源项目</title>
    <link href="http://jingbin.me/2018/01/03/%E4%BA%91%E9%98%85%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90UI%EF%BC%8C%E4%BD%BF%E7%94%A8Gank-Io%E5%8F%8A%E8%B1%86%E7%93%A3Api%E5%BC%80%E5%8F%91%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://jingbin.me/2018/01/03/云阅：一个基于网易云音乐UI，使用Gank-Io及豆瓣Api开发的开源项目/</id>
    <published>2018-01-03T10:33:07.000Z</published>
    <updated>2017-01-14T12:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CloudReader"><a href="#CloudReader" class="headerlink" title="CloudReader"></a>CloudReader</h2><p>一款基于网易云音乐UI，使用GankIo及豆瓣api开发的符合Google Material Desgin阅读类的开源项目。项目采取的是Retrofit + RxJava + MVVM-DataBinding架构开发。开发中所遇到的各种问题已归纳在<a href="http://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/">这里</a>。</p>
<p>github地址：<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a></p>
<a id="more"></a>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><ul>
<li>部分效果图</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-6d119cdf55036fce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cloudreader.png"></p>
<ul>
<li>gif演示</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-d3c4ed3d57d58db7.gif?imageMogr2/auto-orient/strip" alt="cloudreader.gif"></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>网易云音乐于2013年4月23日正式发布，是一款主打发现和分享，带有浓厚社交基因的网络音乐产品。相信用过的人都知道它给人的体验是极好的，我看过了绝大多数仿写的案例，基本UI都不够细致，于是决定自己动手写一个，起初也不知道具体它是怎么布局的，后来使用SDK提供的工具<code>uiautomatorviewer</code>慢慢分析后再逐渐完善的，争取效果一致~ </p>
<h2 id="模块分析"><a href="#模块分析" class="headerlink" title="模块分析"></a>模块分析</h2><h3 id="干货（gank-io）"><a href="#干货（gank-io）" class="headerlink" title="干货（gank.io）"></a>干货（gank.io）</h3><blockquote>
<p>API使用的是动听（轮播图）和代码家的Gank.Io。</p>
</blockquote>
<ul>
<li><p><strong>每日推荐：</strong> 干货集中营推送的每日内容，包括每天一个妹子图，相关Android、IOS等其他干货。每天第12：30之后更新，因为双休不更新所以内容缓存三天网络取不到就取缓存。</p>
</li>
<li><p><strong>福利：</strong> Glide加载图片，点击查看大图，支持双指缩放，一下可查看列表的所有图片，再也不用逐个点击每张图啦。</p>
</li>
<li><p><strong>干货订制：</strong> 可以筛选自己喜欢干货的类别，有全部、IOS、App、前端、休息视频和拓展资源。</p>
</li>
<li><p><strong>大安卓：</strong> 显示安卓的全部资讯。支持下拉刷新方便查看最新的资源。</p>
</li>
</ul>
<h3 id="电影（豆瓣）"><a href="#电影（豆瓣）" class="headerlink" title="电影（豆瓣）"></a>电影（豆瓣）</h3><blockquote>
<p>API是豆瓣提供的，因为限制了每个ip每分钟请求的次数，所以请酌情使用，由此带来的不便请见谅。</p>
</blockquote>
<ul>
<li><strong>电影热映区：</strong> 每日更新，展示最新上映的电影热度排行榜。</li>
<li><strong>豆瓣电影Top250：</strong> 豆瓣高分电影集锦，让你放心找好片~</li>
</ul>
<h3 id="书籍（豆瓣）"><a href="#书籍（豆瓣）" class="headerlink" title="书籍（豆瓣）"></a>书籍（豆瓣）</h3><blockquote>
<p>使用的是豆瓣的搜索API。更多订制内容由于时间原因第一版还未添加，第二版会加上。</p>
</blockquote>
<ul>
<li><strong>综合：</strong> 检索豆瓣综合类的书籍并展示。</li>
<li><strong>文学：</strong> 检索豆瓣文学类的书籍并展示。</li>
<li><strong>生活：</strong> 检索豆瓣生活类的书籍并展示。</li>
</ul>
<h3 id="抽屉界面"><a href="#抽屉界面" class="headerlink" title="抽屉界面"></a>抽屉界面</h3><blockquote>
<p>完全仿网易云音乐抽屉界面，包括诸多细节如透明标题栏，背景透明度，水波纹颜色等。</p>
</blockquote>
<ul>
<li><strong>项目主页：</strong>展示项目介绍信息，及内容说明，可以分享给你的好友哦。</li>
<li><strong>扫码下载：</strong>扫码即可下载App，帮助您快速试用~</li>
<li><strong>问题反馈：</strong>常见问题归纳，反馈地方，联系方式都在这里哦！</li>
<li><strong>关于云阅：</strong>更新日志在这里可见，主人是利用工作外时间做的，周期较长，满意的小伙伴给个Star吧，这将是我继续迭代的动力，谢谢~</li>
</ul>
<h2 id="Features-特性"><a href="#Features-特性" class="headerlink" title="Features 特性"></a>Features 特性</h2><ul>
<li>1、干货集中营内容与豆瓣电影书籍内容。</li>
<li>2、高仿网易云音乐歌单详情页。</li>
<li>3、<code>NavigationView</code>搭配<code>DrawerLayout</code>的具体使用。</li>
<li>4、MvvM-DataBing的项目应用。</li>
<li>5、RxBus代替EventBus进行组件之间通讯。</li>
<li>6、<code>ToolBar</code>及<code>TabLayout</code>的使用姿势。</li>
<li>7、<code>Glide</code>加载监听，获取缓存，圆角图片，高斯模糊。</li>
<li>8、水波纹点击效果详细使用与适配。</li>
<li>9、<code>RecyclerView</code>下拉刷新上拉加载。</li>
<li>10、基于<code>DataBinding</code>的<code>ViewHolder</code>。</li>
<li>11、基于<code>DataBinding</code>的<code>BaseActivity</code>和<code>BaseFragment</code>。</li>
<li>12、<code>Fragment</code>懒加载模式。</li>
<li>13、透明状态栏使用与版本适配。</li>
<li>14、<code>SwipeRefreshLayout</code>结合<code>RecyclerView</code>下拉刷新上拉加载。</li>
<li>15、<code>CoordinatorLayout + Behavior</code>实现标题栏渐变。</li>
<li>16、<code>NestedScrollView</code>嵌套<code>RecyclerView</code>的使用。</li>
</ul>
<h2 id="细节分析-ToolBar-上的按钮点击效果"><a href="#细节分析-ToolBar-上的按钮点击效果" class="headerlink" title="细节分析 - ToolBar 上的按钮点击效果"></a>细节分析 - ToolBar 上的按钮点击效果</h2><p>仔细研究的人知道，网易云音乐的UI做的很精致，就拿一个<code>ToolBar</code>为例，上面的每个按钮的点击操作都有各自的效果。这给了用户一个很好的反馈，就是如下的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-71e53682c8ce9706.gif?imageMogr2/auto-orient/strip" alt="toolbar_click.gif"></p>
<p>上图是在android 5.1系统下的效果图。在6.0上搜索的点击效果有些许改变，其他基本类似；5.0以下点击则都表现出一般选择器的效果。</p>
<p>然而做到以上的效果并不容易，需要你对<code>ToolBar</code>有深入的了解；不仅如此，水波纹的点击效果在不同的主题下是有不同的表现。下面一起来谈谈如何达到以上的效果。</p>
<h3 id="关于ToolBar的布局"><a href="#关于ToolBar的布局" class="headerlink" title="关于ToolBar的布局"></a>关于ToolBar的布局</h3><p>看到上图我们了解到一个<code>ToolBar</code>上有三种点击效果..</p>
<p>这就有点尴尬了..不急，我们慢慢来分析。利用SDK下的工具<code>uiautomatorviewer</code>可得知：左边的<strong>菜单</strong>按钮是<code>ToolBar</code>内部包裹的一个<code>Fragment</code>,其中是一个<code>ImageView</code>和一个小红点；然后中间是<code>HorizontalScrollView</code>，其中是三个<code>ImageView</code>；右边的搜索键则是通过设置<code>Menu</code>菜单而来，这样会有长按弹出“搜索”二字的提示。</p>
<p>现总结出两个问题：1、<code>ToolBar</code>上按钮的设置；2、不同按钮点击的水波纹效果</p>
<p><strong>对于1：</strong> <code>ToolBar</code>上按钮的设置</p>
<p>些许研究了<code>ToolBar</code>的使用后得知，可以直接在其内部包裹<code>Imageview</code>外，还可以通过菜单文件设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">    getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，<code>main.xml</code>内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"&gt;</div><div class="line">    &lt;item</div><div class="line">        android:id="@+id/action_search"</div><div class="line">        android:icon="@drawable/actionbar_search"// 显示图标</div><div class="line">        android:orderInCategory="100"// 菜单显示优先级</div><div class="line">        android:title="@string/actionbar_search"// Toast文字“搜索”</div><div class="line">        app:showAsAction="always" /&gt;// 总是显示，其中还有"never"点击后弹出显示；``ifRoom``根据空间判断是否显示</div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure>
<p>然后再找到菜单相应的<code>id</code>处理点击事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.action_search:</div><div class="line"><span class="comment">//                Toast.makeText(this, "打开搜索页面", Toast.LENGTH_SHORT).show();</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">        &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这样就完成了两者点击效果不同的处理。</p>
<p><strong>对于2：</strong>不同按钮点击的水波纹效果</p>
<p>这里不是使用<code>ripple</code>属性了，而是使用系统自带的点击水波纹选择器，给要产生点击效果的控件设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background=<span class="string">"?attr/selectableItemBackgroundBorderless"</span></div></pre></td></tr></table></figure>
<p>然而设置后你会发现所有点击的颜色都是一致的，如果你使用主题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span></div></pre></td></tr></table></figure></p>
<p>点击效果就会全部是黑灰的，就是中间三个按钮的那种效果，如果想要点击效果是白色的话，需要设置主题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div></pre></td></tr></table></figure></p>
<p>知道这样后我们给不同的布局设置不同的主题就解决了这个问题。最终布局文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v7.widget.Toolbar</div><div class="line">	    android:id="@+id/toolbar"</div><div class="line">	    android:layout_width="match_parent"</div><div class="line">	    android:layout_height="?attr/actionBarSize"</div><div class="line">	    android:background="@color/colorTheme"</div><div class="line">	    app:contentInsetStart="0.0dp"</div><div class="line">	    app:popupTheme="@style/ThemeOverlay.AppCompat.Light"</div><div class="line">	    app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"&gt;</div><div class="line">	</div><div class="line">	    &lt;FrameLayout</div><div class="line">	        android:id="@+id/ll_title_menu"</div><div class="line">	        android:layout_width="wrap_content"</div><div class="line">	        android:layout_height="match_parent"</div><div class="line">	        android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	        android:paddingLeft="15dp"</div><div class="line">	        android:paddingRight="15dp"&gt;</div><div class="line">	</div><div class="line">	        &lt;ImageView</div><div class="line">	            android:id="@+id/iv_title_menu"</div><div class="line">	            android:layout_width="23dp"</div><div class="line">	            android:layout_height="wrap_content"</div><div class="line">	            android:layout_gravity="center"</div><div class="line">	            android:src="@drawable/titlebar_menu" /&gt;</div><div class="line">	    &lt;/FrameLayout&gt;</div><div class="line">	</div><div class="line">	    &lt;HorizontalScrollView</div><div class="line">	        android:layout_width="wrap_content"</div><div class="line">	        android:layout_height="match_parent"</div><div class="line">	        android:layout_gravity="center"&gt;</div><div class="line">	</div><div class="line">	        &lt;LinearLayout</div><div class="line">	            android:layout_width="wrap_content"</div><div class="line">	            android:layout_height="match_parent"</div><div class="line">	            android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	            app:theme="@style/Theme.AppCompat.Light.NoActionBar"&gt;</div><div class="line">	</div><div class="line">	            &lt;ImageView</div><div class="line">	                android:id="@+id/iv_title_gank"</div><div class="line">	                android:layout_width="55dp"</div><div class="line">	                android:layout_height="wrap_content"</div><div class="line">	                android:layout_gravity="center"</div><div class="line">	                android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	                android:src="@drawable/titlebar_disco" /&gt;</div><div class="line">	</div><div class="line">	            &lt;ImageView</div><div class="line">	                android:id="@+id/iv_title_one"</div><div class="line">	                android:layout_width="55dp"</div><div class="line">	                android:layout_height="match_parent"</div><div class="line">	                android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	                android:src="@drawable/titlebar_music" /&gt;</div><div class="line">	</div><div class="line">	            &lt;ImageView</div><div class="line">	                android:id="@+id/iv_title_dou"</div><div class="line">	                android:layout_width="55dp"</div><div class="line">	                android:layout_height="match_parent"</div><div class="line">	                android:background="?attr/selectableItemBackgroundBorderless"</div><div class="line">	                android:src="@drawable/titlebar_friends" /&gt;</div><div class="line">	</div><div class="line">	        &lt;/LinearLayout&gt;</div><div class="line">	</div><div class="line">	    &lt;/HorizontalScrollView&gt;</div><div class="line"></div><div class="line"> &lt;/android.support.v7.widget.Toolbar&gt;</div></pre></td></tr></table></figure>
<p>这样就得到了我们想要的效果~<br>更多细节优化我会慢慢整理在<a href="https://github.com/youlookwhat/CloudReader/wiki" target="_blank" rel="external">Wiki文档</a>，或你也可以直接查看源代码。</p>
<h2 id="DownLoad"><a href="#DownLoad" class="headerlink" title="DownLoad"></a>DownLoad</h2><p>　<a href="https://fir.im/cloudreader" target="_blank" rel="external">火速跳转</a><br><img src="http://upload-images.jianshu.io/upload_images/1354448-502cceae1674e70a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="download.png"></p>
<h2 id="宝贵意见"><a href="#宝贵意见" class="headerlink" title="宝贵意见"></a>宝贵意见</h2><p>如果有任何问题，请到github的<a href="https://github.com/youlookwhat/CloudReader/issues" target="_blank" rel="external">issue处</a>写上你不明白的地方，也可以通过下面提供的方式联系我，我会及时给予帮助。另外常见的问题已总结在<a href="http://jingbin.me/2016/12/25/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E4%BA%91%E9%98%85/">这里</a>。</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li><p>图片来源：<a href="http://www.iconfont.cn/plus" target="_blank" rel="external">iconfont</a>、UI工程师<a href="https://github.com/Sandawang" target="_blank" rel="external">Sandawang</a>和网易云音乐App。</p>
</li>
<li><p>参考项目：<a href="https://github.com/GiitSmile/ImitateNetEasyCloud" target="_blank" rel="external">ImitateNetEasyCloud</a>、<a href="https://github.com/forezp/banya" target="_blank" rel="external">banya</a>；主要数据来源：<a href="https://gank.io/api" target="_blank" rel="external">Gank.Io</a>、<a href="https://developers.douban.com/wiki/?title=terms" target="_blank" rel="external">豆瓣Api</a>。</p>
</li>
<li><p>使用到的开源库：<a href="https://github.com/bumptech/glide" target="_blank" rel="external">glide</a>、<a href="https://github.com/Flipboard/bottomsheet" target="_blank" rel="external">bottomsheet</a>、<a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">nineoldandroids</a>、<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">rxandroid</a>等等。</p>
</li>
<li><p>感谢<a href="https://github.com/daimajia" target="_blank" rel="external">代码家</a>、<a href="https://github.com/hongyangAndroid" target="_blank" rel="external">张鸿洋</a>、<a href="https://github.com/drakeet" target="_blank" rel="external">drakeet</a>、<a href="https://github.com/yang747046912" target="_blank" rel="external">yang747046912</a>、<a href="https://github.com/GiitSmile" target="_blank" rel="external">GiitSmile</a>、<a href="https://github.com/forezp" target="_blank" rel="external">forezp</a>等众多开发者贡献的开源项目，让我从中学到了很多!</p>
</li>
</ul>
<h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>感谢<a href="https://play.google.com/store/apps/details?id=com.netease.cloudmusic" target="_blank" rel="external">网易云音乐App</a>提供参考，附上<a href="http://www.25xt.com/appdesign/12385.html" target="_blank" rel="external">《网易云音乐Android 3.0视觉设计规范文档》</a>。本人是网易云音乐的粉丝，使用了其中的部分素材，并非攻击，如构成侵权请及时通知我修改或删除。大部分数据来自于干货集中营和豆瓣APIV2.0，一切数据解释权都归代码家和豆瓣所有。</p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>如果你觉得不错，对你有帮助，可以帮忙分享给你更多的朋友，这是给我们最大的动力与支持，同时希望你多多fork，star，follow，我将贡献更多的开源项目O(∩_∩)O~。开源使生活更美好！</p>
<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><ul>
<li><strong>CSDN：</strong><a href="http://blog.csdn.net/jingbin_" target="_blank" rel="external">Jingbin_</a></li>
<li><strong>Blog：</strong><a href="http://jingbin.me">http://jingbin.me</a></li>
<li><strong>Email：</strong>jingbin127@163.com</li>
<li><strong>GitHub：</strong><a href="https://github.com/youlookwhat" target="_blank" rel="external">https://github.com/youlookwhat</a></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-c282b9a84637ea73.gif?imageMogr2/auto-orient/strip" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CloudReader&quot;&gt;&lt;a href=&quot;#CloudReader&quot; class=&quot;headerlink&quot; title=&quot;CloudReader&quot;&gt;&lt;/a&gt;CloudReader&lt;/h2&gt;&lt;p&gt;一款基于网易云音乐UI，使用GankIo及豆瓣api开发的符合Google Material Desgin阅读类的开源项目。项目采取的是Retrofit + RxJava + MVVM-DataBinding架构开发。开发中所遇到的各种问题已归纳在&lt;a href=&quot;http://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/youlookwhat/CloudReader&quot;&gt;CloudReader&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jingbin.me/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="cloudreader" scheme="http://jingbin.me/tags/cloudreader/"/>
    
      <category term="开源项目" scheme="http://jingbin.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>开发中所遇问题归纳</title>
    <link href="http://jingbin.me/2017/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/"/>
    <id>http://jingbin.me/2017/11/23/开发中所遇问题归纳/</id>
    <published>2017-11-23T14:36:23.000Z</published>
    <updated>2017-01-11T08:04:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>持续更新，主要记录<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader</a>及工作上所遇到的问题。</p>
</blockquote>
<h2 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h2><ul>
<li><p><strong>DataBindingHelper.jar</strong>的使用：作为<a href="http://blog.csdn.net/yy1300326388/article/details/46409637" target="_blank" rel="external">插件导入</a>后，和<code>GsonFormat</code>的使用类似。在对应的<code>Bean</code>里，可自动生成<code>@Bindable</code>和<code>notifyPropertyChanged(BR.title);</code>。此杰作是同事做的。网上也有类似的插件可以使用。</p>
</li>
<li><p><strong>神坑！windows下<a href="http://www.th7.cn/Program/Android/201608/944362.shtml" target="_blank" rel="external">databinding引入文字</a>会有问题，而mac上没有！使用<code>@string/string_type</code>引入字符串！</strong></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>layout</code>节点写了<code>xmlns:android=&quot;http://schemas.android.com/apk/res/android</code>后，子布局不能写.</p>
</li>
<li><p>include 子布局时子布局根节点也要声明id，不然引用不到子布局id</p>
</li>
<li><p>databinding 绑定子布局。先绑定,后父布局再<code>addView()</code></p>
</li>
<li><p>注入 databinding 后，AndriodStudio包结构变乱。解决：Android Studio2.2会出现此情况，升级到2.2.2就可以了。</p>
</li>
<li><p>databinding绑定<code>bean</code>时，里面的子类也需要继承<code>BaseObservable</code>,否则会报错。</p>
</li>
<li><p>recyclerview 的viewhodler 里，获得绑定 view 的databinding:<code>DataBindingUtil.getBinding(this.itemView);</code>。</p>
</li>
<li><p>布局里没有声明<code>id</code>,则对应的 ItemEverydayBinding 无法生成。</p>
</li>
<li><p>更改包名之后（rename – gradle.applicationId）， databinding 相关文件会报错，进入<code>Build --&gt; Build Project</code>就好了！</p>
</li>
<li><p>注意：引用如：android:showImg=’@{bean.images.large}’时，里面的<code>bean</code>写错会造成编译错误！</p>
</li>
<li><p>注意：<code>text=&#39;@{xx}&#39;</code>里面的值应为<code>String</code>类型。引用方法里的参数类型应一致。报错是不告诉具体的哪行代码，写多了只能自己一个个地方找。</p>
</li>
<li><p>android:showImg=’@{bean.images.large}’这样设置图片会闪一下！尤其是在recyclerview里面，效果很不好，如果是写在 adapter里就好了：ImgLoadUtil.displayEspImage(bean.getImages().getLarge(), binding.ivTopPhoto, 0);。不仅仅图片，文字也会闪。加上这句就好了：<code>binding.executePendingBindings();</code>，意思是：<strong>当数据改变时，binding会在下一帧去改变数据，如果我们需要立即改变，就去调用executePendingBindings方法。</strong></p>
</li>
<li><p>布局里面的子布局里引用的bean可以一样（type一样），但是最好name不一样，不然可能会导致<code>setBean()</code>无效。改变name名就好了。</p>
</li>
</ul>
<ol>
<li><p>文件里引用bean:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;variable</div><div class="line">       name=<span class="string">"subjectsBean"</span></div><div class="line">	    type=<span class="string">"com.example.jingbin.bean.moviechild.SubjectsBean"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>文件里调用静态方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">import</span> type=<span class="string">"com.example.yunyue.utils.StringFormatUtil"</span>/&gt;</div><div class="line"><span class="comment">// 布局调用</span></div><div class="line">android:text=<span class="string">"@&#123;StringFormatUtil.formatName(subjectsBean.directors)&#125;"</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串和静态方法拼接(注意外层引号的区别，里面没有字符串时任意都行，有则使用单引号)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=<span class="string">'@&#123;"类型："+StringFormatUtil.formatGenres(subjectsBean.genres)&#125;'</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@BindingAdapter()</code>，自定义loader用来异步载入图像：</p>
<ul>
<li>一个参数时：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 任意类里声明</span></div><div class="line"> <span class="meta">@BindingAdapter</span>(<span class="string">"android:showImgBg"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showImgBg</span><span class="params">(ImageView imageView,String url)</span> </span>&#123;</div><div class="line">        displayGaussian(imageView.getContext(),url,imageView);</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 布局调用</span></div><div class="line">android:showImgBg=<span class="string">'@&#123;subjectsBean.images.large&#125;'</span></div></pre></td></tr></table></figure>
<ul>
<li>两个或多个参数时：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 妹子，电影列表图</div><div class="line"> * <span class="doctag">@param</span> defaultPicType 妹子：1 电影：0</div><div class="line"> */</div><div class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:displayFadeImage"</span>,<span class="string">"android:defaultPicType"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayFadeImage</span><span class="params">(ImageView imageView, String url,<span class="keyword">int</span> defaultPicType)</span> </span>&#123;</div><div class="line">    displayEspImage(url, imageView, defaultPicType);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// XML里使用：</span></div><div class="line">android:defaultPicType=<span class="string">"@&#123;1&#125;"</span></div><div class="line">android:displayFadeImage=<span class="string">"@&#123;bean.url&#125;"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：</p>
<ul>
<li><strong>1.</strong> 方法参数第一个是控件声明,放在第二位不可以！</li>
<li><strong>2.</strong> 布局调用时，命名空间可自动生成。</li>
</ul>
<p>建议：</p>
<ul>
<li><strong>1.</strong> <code>android:showImgBg</code>可任意写，但是项目里不能出现相同的命名，否则会被后来的覆盖掉！</li>
<li><strong>2.</strong> 如果 imgload:showImgBg 这样写,第一次编译会提示找不到该命名空间，跳到声明处。建议写成 android:showImgBg。</li>
</ul>
</blockquote>
<ol>
<li><p>三元运算法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">导入：&lt;<span class="keyword">import</span> type=<span class="string">"android.text.TextUtils"</span> /&gt;</div><div class="line">使用：android:text=<span class="string">'@&#123;TextUtils.isEmpty(resultsBean.who)?"佚名":resultsBean.who&#125;'</span></div><div class="line">也可以直接使用这时返回为<span class="keyword">null</span>会不显示。</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h2><ul>
<li><p>✔️ <code>NestedScrollView</code>里嵌套 RecyclerView 官方后期已经解决了显示不全问题！看引用的包是什么版本的！还需要加上这两行代码：(<strong>这样不推荐，会把内容全部一次性的加载进内存，造成卡顿</strong>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">recyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>);</div><div class="line">recyclerView.setHasFixedSize(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>❌ NestedScrollView里嵌套 RecyclerView ,在<code>recyclerView.setLayoutManager(new FullyLinearLayoutManager(getActivity()));</code>之后，需要加上,不然滑动不流畅: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">recyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>);</div><div class="line">recyclerView.setHasFixedSize(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>以上切换还是会卡顿，原因是角标越界，虽然<code>try</code>了，还是会卡。使用<code>MyScrollView</code>也不可以。显示不全！<a href="http://blog.csdn.net/fangchao3652/article/details/46914987" target="_blank" rel="external">FullyLinearLayoutManager&amp; MyScrollView</a></p>
</li>
<li>RecyclerView 的item显示出现控件显示不全,item只显示一部分，非常怪异！在adapter中的onCreateViewHolder()中<br><code>View inflate = layoutInflater.inflate(R.layout.xxx, parent, false);</code>注意要依附于parent。这样就好了！</li>
</ul>
<ul>
<li>RecyclerView: No adapter attached; skipping layout 没有数据时，<code>gone</code>掉，不然一直会提示这个！</li>
<li><p><code>addFooterView</code>时，使用LinearLayout 包裹时会显示部分，改为RelativeLayout或FrameLayout正常。</p>
</li>
<li><p><code>NestedScrollView</code>包裹<code>RecyclerView</code>如果没关联下面design包会显示不出，加了就好了！</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:design:24.2.1'</span></div></pre></td></tr></table></figure>
<p>同时此包里还含有<code>Toolbar</code>的属性：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app:layout_collapseMode=<span class="string">"pin"</span></div><div class="line">  app:layout_scrollFlags=<span class="string">"enterAlways|scroll"</span></div></pre></td></tr></table></figure>
</li>
<li><p>NestedScrollView里嵌套 RecyclerView 需要在<code>onResume</code>里加上<code>.setFocusable(false)</code>，不然进入页面会定位到列表第一条或其他问题。</p>
</li>
<li>添加<code>headerview</code>后，隐藏显示，进度条不会到达屏幕顶端。</li>
</ul>
<h2 id="ViewPager-与-Fragment"><a href="#ViewPager-与-Fragment" class="headerlink" title="ViewPager 与 Fragment"></a>ViewPager 与 Fragment</h2><ul>
<li><p>父布局使用<code>fragment</code>或<code>scrollview</code>下拉会有阴影效果。</p>
</li>
<li><p>viewpager左右预加载页面的个数设置：<code>setOffscreenPageLimit(3);</code>,设置后保证页面不被销毁，切换时就不会卡顿了（显示时加载数据）。注意，如果是这个viewpager本身就在父一个viewpager的一个页面里，则设置adapter时，应传<code>getChildFragmentManager()</code>,不然以上会设置不上，非法状态异常！</p>
</li>
<li><p>Fragment 和当前自身所在的Activity 走一套生命周期，意思就是<code>Activity</code>走了<code>onResume()</code>,<code>fragment</code>才会走自身的<code>onResume()</code>，多个Fragment 相互切换是不走onResume()和onDestroy()的。</p>
</li>
<li><p>如果listview 里<code>addHeaderView()</code>添加轮播图，则轮播图滚动时会调用 listview 的滚动监听，且返回的<code>firstVisiblePosition = 0</code>。</p>
</li>
<li><p>Activity 里放多个fragment，当加载过其中一个<code>fragment A</code>后，切到其他的fragment，直至销毁fragment A后,再直接切到fragment A，这时<code>fragmentA.getUserVisibleHint() = false</code>。所以依赖getUserVisibleHint() = true的逻辑要注意了！最好的方式是在 viewpager 的监听里，手动<code>fragment.setUserVisibleHint(true)</code>。</p>
</li>
<li><p>根据<code>setUserVisibleHint()</code>方法的调用时间，来实现 fragment 的懒加载。setUserVisibleHint() 会在<code>onActivityCreated()</code>之前调用，所以可以在onActivityCreated() 进行一系列初始化的操作，然后在 setUserVisibleHint() 里请求数据。具体请见<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1021/1813.html" target="_blank" rel="external">这里</a>。</p>
</li>
</ul>
<h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2><ul>
<li><p>使用<code>retrofit</code>请求时，Bean里如有<code>Drawable</code>字段，而且没有赋值，会数据解析异常，出现<code>StackOverflowError</code>错误。</p>
</li>
<li><p>使用<code>retrofit</code>请求时，若请求成功且有数据返回还报错，看<code>Bean</code>里字段或字段类型是否写错。</p>
</li>
<li><p><code>retrofit</code>设置<code>post</code>请求时，传数组时使用<code>image_ids[]</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"/vip/diagnostic_explains"</span>)</div><div class="line"><span class="function">Observable&lt;ErrorBean&gt; <span class="title">postDiagnosticExplains</span><span class="params">(@Header(<span class="string">"a"</span>)</span> String a, </span></div><div class="line">		@<span class="title">Field</span><span class="params">(<span class="string">"userkey"</span>)</span> String userkey, @<span class="title">Field</span><span class="params">(<span class="string">"comment"</span>)</span> String comment,  </div><div class="line">		@<span class="title">Field</span><span class="params">(<span class="string">"image_ids[]"</span>)</span> List&lt;Integer&gt; image_ids);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ACache"><a href="#ACache" class="headerlink" title="ACache"></a>ACache</h2><ul>
<li><p>使用<code>ACache</code>工具缓存时，如果缓存的<code>bean</code>类名一致，或类里面的内部类一致，这时logcat会提示有两个相同bean的id，就是<strong>无效的类</strong>，或<strong>找不到该类</strong>。所以：<strong><em>缓存的文件里的类名最好不要一样！</em></strong></p>
</li>
<li><p>使用<code>ACache</code>工具缓存时，subList没有实现序列化！缓存<code>List</code>时会出错！<a href="http://liyin-rookie.iteye.com/blog/1147284" target="_blank" rel="external">详情</a></p>
</li>
</ul>
<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><ul>
<li><p>使<code>TextView</code>实现长按复制文本的功能，加上属性：<code>android:textIsSelectable=&quot;true&quot;</code></p>
</li>
<li><p><code>textView</code>中间加横线:<code>textView .getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG );</code></p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>兼容5.0以下水波纹效果：新建drawable-21文件，里面放ripple文件，其他正常，<a href="http://blog.csdn.net/u012156512/article/details/50585193" target="_blank" rel="external">详情</a>。</p>
</li>
<li><p><code>listview</code>某图标显示亮或不亮的问题：先全部不亮，再根据条件变亮。</p>
</li>
<li><p>当ScrollView里的元素想填满ScrollView时，使用 fill_parent 是不管用的，必需为ScrollView设置：<code>android:fillViewport=&quot;true&quot;</code>。</p>
</li>
<li><p>Android 5.1的SDK把<code>Button</code>的默认Style改了，使Button上显示因为全为大写，加上属性<code>android:textAllCaps=&quot;false&quot;</code>就好了,<a href="http://blog.csdn.net/u010746364/article/details/50378056" target="_blank" rel="external">详情</a>。</p>
</li>
<li><p><code>toolbar</code>中设置标题和副标题文字颜色和大小时，在<strong>xml</strong>文件配置<code>app:titleTextAppearance=&quot;@style/ToolBar.Title&quot;</code>可以，其中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="ToolBar.Title" parent="@style/TextAppearance.Widget.AppCompat.Toolbar.Title"&gt;</div><div class="line">      &lt;item name="android:textSize"&gt;18.0sp&lt;/item&gt;</div><div class="line">      &lt;item name="android:textColor"&gt;@color/colorWhite&lt;/item&gt;</div><div class="line">  &lt;/style&gt;</div></pre></td></tr></table></figure>
<p>也可以在activity中设置：<br><code>binding.titleToolBar.setTitleTextAppearance(this, R.style.ToolBar_Title);</code></p>
</li>
<li><p>设置透明状态栏时，布局根节点不要设置<code>android:fitsSystemWindows=&quot;true&quot;</code>否则状态栏会一直存在，被这个问题坑了一整天！！还有整块布局也不要给设置颜色。 </p>
</li>
<li><p><code>ImageView</code>图片直接<code>src</code>会内存泄漏，图片宽高大时会很严重，建议代码设置。</p>
</li>
<li><p>1920*1080(1080p) 小米3，小米5等，属于xxhdpi，将图片放在这个文件夹内，这个分辨率的手机显示图片会很清晰，放在xhdpi清晰度会降低。</p>
</li>
<li><p>1.文字颜色选择器：里面的根节点应为<code>color</code>且最好放在新建<code>color</code>文件下。2.作为背景选择器来说，根节点应该是<code>drawble</code>，最好放在<code>drawble</code>文件夹下。</p>
</li>
<li><p><code>Glide</code>加载图片：自动缓存当前图片的尺寸，如果其他地方取这个比例的图片则取的是缓存。不缓存等比例的图片！如果其他地方想要取当前图片的缓存，可加载时设置当前图片的宽高，用这个方法：<code>override(300,400)</code>,值在<code>dimens</code>里取，直接设置会损失清晰度。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;持续更新，主要记录&lt;a href=&quot;https://github.com/youlookwhat/CloudReader&quot;&gt;CloudReader&lt;/a&gt;及工作上所遇到的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;DataBinding&quot;&gt;&lt;a href=&quot;#DataBinding&quot; class=&quot;headerlink&quot; title=&quot;DataBinding&quot;&gt;&lt;/a&gt;DataBinding&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DataBindingHelper.jar&lt;/strong&gt;的使用：作为&lt;a href=&quot;http://blog.csdn.net/yy1300326388/article/details/46409637&quot;&gt;插件导入&lt;/a&gt;后，和&lt;code&gt;GsonFormat&lt;/code&gt;的使用类似。在对应的&lt;code&gt;Bean&lt;/code&gt;里，可自动生成&lt;code&gt;@Bindable&lt;/code&gt;和&lt;code&gt;notifyPropertyChanged(BR.title);&lt;/code&gt;。此杰作是同事做的。网上也有类似的插件可以使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;神坑！windows下&lt;a href=&quot;http://www.th7.cn/Program/Android/201608/944362.shtml&quot;&gt;databinding引入文字&lt;/a&gt;会有问题，而mac上没有！使用&lt;code&gt;@string/string_type&lt;/code&gt;引入字符串！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="databinding" scheme="http://jingbin.me/tags/databinding/"/>
    
  </entry>
  
  <entry>
    <title>Android - 仿网易云音乐歌单详情页</title>
    <link href="http://jingbin.me/2017/01/13/Android%20-%20%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95%E8%AF%A6%E6%83%85%E9%A1%B5/"/>
    <id>http://jingbin.me/2017/01/13/Android - 仿网易云音乐歌单详情页/</id>
    <published>2017-01-13T04:55:23.000Z</published>
    <updated>2017-01-14T13:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间模仿网易云音乐UI使用DataBinding做了一个App：<a href="http://www.jianshu.com/p/69a229fb6e1d" target="_blank" rel="external">CloudReader</a>，今天把其中的类似歌单详情页单独拿出来说一下，我觉得其中还是有些干货的，关联到的知识点还比较有价值，而且也有很多需要注意的地方。</p>
<p>本次项目地址：<a href="https://github.com/youlookwhat/ScrollShapeUI" target="_blank" rel="external">ScrollShapeUI</a></p>
<a id="more"></a>
<h3 id="效果图对比："><a href="#效果图对比：" class="headerlink" title="效果图对比："></a>效果图对比：</h3><ul>
<li><p>网易云音乐App原图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-761770bdf2e2ab04.gif?imageMogr2/auto-orient/strip" alt="网易云音乐App原图.gif"></p>
</li>
<li><p>模仿的效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-9aeef33cf3721aa6.gif?imageMogr2/auto-orient/strip" alt="模仿的效果图.gif"></p>
</li>
</ul>
<p>建议大家直接看<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">CloudReader项目应用</a>里的效果，里面的内容部分有加载中的loading图，效果更逼真。</p>
<h3 id="基本布局："><a href="#基本布局：" class="headerlink" title="基本布局："></a>基本布局：</h3><p>FrameLayout　<br>　—– MyNestedScrollView // 为了Api23下的滑动兼容<br>　　　—- LinearLayout // 内容部分<br>　—– RelativeLayout<br>　　　—- ImageView // Toolbar后面的背景图<br>　　　—- Toolbar // 标题栏</p>
<p>由于篇幅原因，不能做详细的介绍，这里就简单介绍实现这种效果的思路：</p>
<h3 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h3><ul>
<li>1、Activity设置自定义Shared Element切换动画</li>
<li>2、透明状态栏（透明Toolbar,使背景图上移）</li>
<li>3、Toolbar底部增加和背景一样的高斯模糊图，并上移图片（为了使背景图的底部作为Toolbar的背景）</li>
<li>4、上下滑动，通过NestedScrollView拿到移动的高度，同时调整Toolbar的背景图透明度</li>
</ul>
<h4 id="1、Activity设置自定义元素共享切换动画"><a href="#1、Activity设置自定义元素共享切换动画" class="headerlink" title="1、Activity设置自定义元素共享切换动画"></a>1、Activity设置自定义元素共享切换动画</h4><p>大家可以发现页面跳转时图片移动的是一个<strong>曲线路径</strong>，我们可以定制View的过渡切换效果，这是Material Design中比较常见的用法，Api21以上才有效。需要在开启页面时使用<code>ActivityOptions.makeSceneTransitionAnimation()</code>，其中定义共享的view和transitionName。然后在对应的Activity里创建<code>ArcMotion</code>对象。ArcMotion是<code>PathMotion</code>子类，是个曲线路径，对应代码片：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Activity设置自定义 Shared Element切换动画</span></div><div class="line"> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">        <span class="comment">//定义ArcMotion</span></div><div class="line">        ArcMotion arcMotion = <span class="keyword">new</span> ArcMotion();</div><div class="line">        arcMotion.setMinimumHorizontalAngle(<span class="number">50f</span>);</div><div class="line">        arcMotion.setMinimumVerticalAngle(<span class="number">50f</span>);</div><div class="line">        <span class="comment">//插值器，控制速度</span></div><div class="line">        Interpolator interpolator = AnimationUtils.loadInterpolator(<span class="keyword">this</span>, android.R.interpolator.fast_out_slow_in);</div><div class="line">        <span class="comment">//实例化自定义的ChangeBounds</span></div><div class="line">        CustomChangeBounds changeBounds = <span class="keyword">new</span> CustomChangeBounds();</div><div class="line">        changeBounds.setPathMotion(arcMotion);</div><div class="line">        changeBounds.setInterpolator(interpolator);</div><div class="line">        changeBounds.addTarget(binding.include.ivOnePhoto);</div><div class="line">        <span class="comment">//将切换动画应用到当前的Activity的进入和返回</span></div><div class="line">        getWindow().setSharedElementEnterTransition(changeBounds);</div><div class="line">        getWindow().setSharedElementReturnTransition(changeBounds);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// 开启</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(context, MovieDetailActivity.class);</div><div class="line">intent.putExtra(<span class="string">"bean"</span>, positionData);</div><div class="line">ActivityOptionsCompat options =</div><div class="line">			ActivityOptionsCompat.makeSceneTransitionAnimation(context,imageView, CommonUtils.getString(R.string.transition_book_img));<span class="comment">//与xml文件对应</span></div><div class="line"> ActivityCompat.startActivity(context, intent, options.toBundle());</div></pre></td></tr></table></figure>
<blockquote>
<p>值得注意的是：因为加载图片要一点时间，切换页面时就会出现闪烁的情况，而如果取的是缓存就不会有这样的问题，所以这里有个小技巧，就是起初Glide加载的图片就指定固定的大小（<code>.override(120,120)</code>），这样图片就会被缓存起来，等到跳转时就取缓存。具体还请大家看项目源码。</p>
</blockquote>
<h4 id="2、透明状态栏"><a href="#2、透明状态栏" class="headerlink" title="2、透明状态栏"></a>2、透明状态栏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为头部是View的界面设置状态栏透明</span></div><div class="line">StatusBarUtil.setTranslucentImageHeader(<span class="keyword">this</span>, <span class="number">0</span>, binding.titleToolBar);</div></pre></td></tr></table></figure>
<p>其中内容根布局不要设置<code>android:fitsSystemWindows=&quot;true&quot;</code>,这样会额外添加一个状态栏。其中<a href="https://github.com/youlookwhat/ScrollShapeUI/blob/master/app/src/main/java/com/example/jingbin/scrollshapeui/utils/StatusBarUtil.java" target="_blank" rel="external">StatusBarUtil</a>，是一个为Android App 设置状态栏的工具类。这里向大家推荐郭霖大神的一篇文章：<a href="http://blog.csdn.net/guolin_blog/article/details/51763825" target="_blank" rel="external">Android状态栏微技巧，带你真正理解沉浸式模式</a>，里面讲解了透明状态栏和沉浸式状态栏的渊源和有关设置用法。</p>
<h4 id="3、Toolbar的背景图"><a href="#3、Toolbar的背景图" class="headerlink" title="3、Toolbar的背景图"></a>3、Toolbar的背景图</h4><p>仔细分析后发现网易云音乐的Toolbar的背景其实显示的是高斯模糊图的底部，所以这里基本套路是Toolbar是透明的，后面背景图取的是高斯模糊图的底部一部分。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-fb6286fe506cadcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt=""></p>
<h5 id="调整Toolbar背景图位置"><a href="#调整Toolbar背景图位置" class="headerlink" title="调整Toolbar背景图位置"></a>调整Toolbar背景图位置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Toolbar的高度</span></div><div class="line"><span class="keyword">int</span> toolbarHeight = binding.titleToolBar.getLayoutParams().height;</div><div class="line"><span class="comment">// Toolbar+状态栏的高度　</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> headerBgHeight = toolbarHeight + StatusBarUtil.getStatusBarHeight(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line"><span class="comment">// 使背景图向上移动到图片的最底端，保留Toolbar+状态栏的高度</span></div><div class="line">binding.ivTitleHeadBg.setVisibility(View.VISIBLE);</div><div class="line">ViewGroup.LayoutParams params = binding.ivTitleHeadBg.getLayoutParams();</div><div class="line">ViewGroup.MarginLayoutParams ivTitleHeadBgParams = (ViewGroup.MarginLayoutParams) binding.ivTitleHeadBg.getLayoutParams();</div><div class="line"><span class="keyword">int</span> marginTop = params.height - headerBgHeight;</div><div class="line">ivTitleHeadBgParams.setMargins(<span class="number">0</span>, -marginTop, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">binding.ivTitleHeadBg.setImageAlpha(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h5 id="显示Toolbar背景图"><a href="#显示Toolbar背景图" class="headerlink" title="显示Toolbar背景图"></a>显示Toolbar背景图</h5><p>监听图片显示，在显示之后将其设置为透明色，然后在滑动的时候渐变。这里值得注意的是在设置图片时不要设置加载中的图片，不然初始化时达不到透明的效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 高斯模糊背景，加载后将背景设为透明</span></div><div class="line"> Glide.with(<span class="keyword">this</span>).load(NeteasePlaylistActivity.IMAGE_URL_MEDIUM)</div><div class="line">         <span class="comment">//.placeholder(R.drawable.stackblur_default)</span></div><div class="line">         .error(R.drawable.stackblur_default)</div><div class="line">         .bitmapTransform(<span class="keyword">new</span> BlurTransformation(<span class="keyword">this</span>, <span class="number">14</span>, <span class="number">3</span>))<span class="comment">// 设置高斯模糊</span></div><div class="line">         .listener(<span class="keyword">new</span> RequestListener&lt;String, GlideDrawable&gt;() &#123;<span class="comment">//监听加载状态</span></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onException</span><span class="params">(Exception e, String model, Target&lt;GlideDrawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, <span class="keyword">boolean</span> isFromMemoryCache, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</div><div class="line">         <span class="comment">// Toolbar背景设为透明</span></div><div class="line">         binding.titleToolBar.setBackgroundColor(Color.TRANSPARENT);</div><div class="line">         <span class="comment">// 背景图初始化为全透明</span></div><div class="line">         binding.ivTitleHeadBg.setImageAlpha(<span class="number">0</span>);</div><div class="line">         binding.ivTitleHeadBg.setVisibility(View.VISIBLE);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;).into(binding.ivTitleHeadBg);</div></pre></td></tr></table></figure>
<p>其中引入的库应为如下，将官方Glide的额外扩展了，使其可以支持高斯模糊。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'jp.wasabeef:glide-transformations:2.0.1'</span></div></pre></td></tr></table></figure></p>
<h4 id="4、上下滑动，渐变背景图透明度"><a href="#4、上下滑动，渐变背景图透明度" class="headerlink" title="4、上下滑动，渐变背景图透明度"></a>4、上下滑动，渐变背景图透明度</h4><p>由于<code>NestedScrollView</code>滚动监听只能在API23以上才能使用，这里为了兼容需要额外处理，定义滚动接口，具体：<a href="https://github.com/youlookwhat/ScrollShapeUI/blob/master/app/src/main/java/com/example/jingbin/scrollshapeui/view/MyNestedScrollView.java" target="_blank" rel="external">MyNestedScrollView</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据页面滑动距离改变Header透明度方法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollChangeHeader</span><span class="params">(<span class="keyword">int</span> scrolledY)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (scrolledY &lt; <span class="number">0</span>) &#123;</div><div class="line">        scrolledY = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">float</span> alpha = Math.abs(scrolledY) * <span class="number">1.0f</span> / (slidingDistance);</div><div class="line">    Drawable drawable = binding.ivTitleHeadBg.getDrawable();</div><div class="line">    <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (scrolledY &lt;= slidingDistance) &#123;</div><div class="line">            <span class="comment">// title部分的渐变</span></div><div class="line">            drawable.mutate().setAlpha((<span class="keyword">int</span>) (alpha * <span class="number">255</span>));</div><div class="line">            binding.ivTitleHeadBg.setImageDrawable(drawable);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drawable.mutate().setAlpha(<span class="number">255</span>);</div><div class="line">            binding.ivTitleHeadBg.setImageDrawable(drawable);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样基本的效果就实现啦，其中如有需要还可以做些额外的处理，如当背景图不透明时切换标题等~</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.jianshu.com/p/37e94f8b6f59" target="_blank" rel="external">http://www.jianshu.com/p/37e94f8b6f59</a></li>
<li><a href="https://github.com/pinguo-zhouwei/YunMusicUI" target="_blank" rel="external">https://github.com/pinguo-zhouwei/YunMusicUI</a></li>
<li><a href="http://blog.csdn.net/u011734444/article/details/51471182" target="_blank" rel="external">http://blog.csdn.net/u011734444/article/details/51471182</a></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本人思考并实践了很多实现这个页面的方法，目前为止这个方案是最好的，效果体验几乎是一样，其中涉及到的知识点有：1、页面跳转共享元素曲线动画；2、透明状态栏；3、Glide监听图片加载状态和加载固定大小图片等；4、NestedScrollView在Api23下的滑动兼容。如果有更好的方案还请联系我，本次项目的源代码：<a href="https://github.com/youlookwhat/ScrollShapeUI" target="_blank" rel="external">https://github.com/youlookwhat/ScrollShapeUI</a>。</p>
<blockquote>
<p>欢迎关注我的<a href="http://www.jianshu.com/u/e43c6e979831" target="_blank" rel="external">简书</a>和<a href="https://github.com/youlookwhat" target="_blank" rel="external">Gayhub</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间模仿网易云音乐UI使用DataBinding做了一个App：&lt;a href=&quot;http://www.jianshu.com/p/69a229fb6e1d&quot;&gt;CloudReader&lt;/a&gt;，今天把其中的类似歌单详情页单独拿出来说一下，我觉得其中还是有些干货的，关联到的知识点还比较有价值，而且也有很多需要注意的地方。&lt;/p&gt;
&lt;p&gt;本次项目地址：&lt;a href=&quot;https://github.com/youlookwhat/ScrollShapeUI&quot;&gt;ScrollShapeUI&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="cloudreader" scheme="http://jingbin.me/tags/cloudreader/"/>
    
  </entry>
  
  <entry>
    <title>更新日志-云阅</title>
    <link href="http://jingbin.me/2016/12/30/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97-%E4%BA%91%E9%98%85/"/>
    <id>http://jingbin.me/2016/12/30/更新日志-云阅/</id>
    <published>2016-12-30T09:45:31.000Z</published>
    <updated>2017-01-14T18:09:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，很高兴大家能看到这里，这里是<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">云阅开源项目</a>的当前所在版本的内容和下一版计划更新的内容，希望能帮到大家。</p>
<p>可以在<code>develop</code>分支上查看最新的提交，最后会合到<code>master</code>分支上。</p>
 <a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-48d22964c9afd7c3.gif?imageMogr2/auto-orient/strip" alt="版本更新.gif"></p>
<hr>
<h3 id="版本-V1-1"><a href="#版本-V1-1" class="headerlink" title="版本 V1.1"></a>版本 V1.1</h3><ul>
<li>1.书籍详情页面增加自定义元素共享切换动画，并可简单添加需要支持的详情页</li>
<li>2.代码优化</li>
<li>3.其他</li>
<li>另：<code>develop</code>分支上已更新了”删除多余的三方库，干货集中营item列表改为CardView样式”</li>
</ul>
<hr>
<h3 id="版本-V1-0"><a href="#版本-V1-0" class="headerlink" title="版本 V1.0"></a>版本 V1.0</h3><blockquote>
<p>此版的具体说明请见项目主页：<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">点击这里</a>。</p>
</blockquote>
<h4 id="干货区（gank-io）"><a href="#干货区（gank-io）" class="headerlink" title="干货区（gank.io）"></a>干货区（gank.io）</h4><ul>
<li>每日推荐</li>
<li>福利</li>
<li>干货订制</li>
<li>大安卓</li>
</ul>
<h4 id="电影区（豆瓣）"><a href="#电影区（豆瓣）" class="headerlink" title="电影区（豆瓣）"></a>电影区（豆瓣）</h4><ul>
<li>电影热映区 &amp; 豆瓣电影Top250</li>
</ul>
<h4 id="书籍区（豆瓣）"><a href="#书籍区（豆瓣）" class="headerlink" title="书籍区（豆瓣）"></a>书籍区（豆瓣）</h4><ul>
<li>综合</li>
<li>文学</li>
<li>生活</li>
</ul>
<h4 id="抽屉界面"><a href="#抽屉界面" class="headerlink" title="抽屉界面"></a>抽屉界面</h4><ul>
<li>项目主页</li>
<li>扫码下载</li>
<li>问题反馈</li>
<li>关于云阅</li>
</ul>
<hr>
<h3 id="下版本更新计划-待更新内容"><a href="#下版本更新计划-待更新内容" class="headerlink" title="下版本更新计划(待更新内容)"></a>下版本更新计划(待更新内容)</h3><p><img src="http://upload-images.jianshu.io/upload_images/1354448-fb01487f2b010800.gif?imageMogr2/auto-orient/strip" alt="乱世佳人.gif"></p>
<ul>
<li>每日推荐可输入日期来显示当日内容</li>
<li>保存图片按钮UI优化</li>
<li>toolbar标题栏文字滚动显示</li>
<li>增加干货、电影、书籍搜索功能。</li>
<li>书籍部分增加多个类别供更多数据选择，样式参考网易云音乐歌单筛选页</li>
<li>书籍部分adapter优化</li>
<li>每日推荐使用固定图是否太追求UI效果，改为一般的item阅读效果更佳？</li>
</ul>
<blockquote>
<p>感谢您的关注~</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，很高兴大家能看到这里，这里是&lt;a href=&quot;https://github.com/youlookwhat/CloudReader&quot;&gt;云阅开源项目&lt;/a&gt;的当前所在版本的内容和下一版计划更新的内容，希望能帮到大家。&lt;/p&gt;
&lt;p&gt;可以在&lt;code&gt;develop&lt;/code&gt;分支上查看最新的提交，最后会合到&lt;code&gt;master&lt;/code&gt;分支上。&lt;/p&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jingbin.me/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="cloudreader" scheme="http://jingbin.me/tags/cloudreader/"/>
    
      <category term="开源项目" scheme="http://jingbin.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>常见问题-云阅</title>
    <link href="http://jingbin.me/2016/12/25/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E4%BA%91%E9%98%85/"/>
    <id>http://jingbin.me/2016/12/25/常见问题-云阅/</id>
    <published>2016-12-25T09:40:38.000Z</published>
    <updated>2017-01-03T14:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，为了帮助大家更加愉快的使用<a href="https://github.com/youlookwhat/CloudReader" target="_blank" rel="external">云阅开源项目</a>，现将大家可能遇到的问题及产生原因列举在这里，希望能帮到大家。</p>
  <a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-f689de2ba9720db9.gif?imageMogr2/auto-orient/strip" alt=""></p>
<hr>
<h3 id="1-为什么我安装不上App？"><a href="#1-为什么我安装不上App？" class="headerlink" title="1.为什么我安装不上App？"></a>1.为什么我安装不上App？</h3><p>本APP只支持Android 4.4及以上系统版本，低于这之下的版本是安装不上的哦。</p>
<h3 id="2-搜索，调整栏目等其他按钮点击没效果？"><a href="#2-搜索，调整栏目等其他按钮点击没效果？" class="headerlink" title="2.搜索，调整栏目等其他按钮点击没效果？"></a>2.搜索，调整栏目等其他按钮点击没效果？</h3><p>由于项目需要做的功能点比较多，为了每个功能点做的精细，所以耗时较长，导致没有完善每个功能。后期将逐步的完善其中的功能，完善后会及时更新。</p>
<h3 id="3-为了网页一直显示“加载中…”？"><a href="#3-为了网页一直显示“加载中…”？" class="headerlink" title="3.为了网页一直显示“加载中…”？"></a>3.为了网页一直显示“加载中…”？</h3><p>在App中打开的网页皆是外链，由于网速慢，或限时访问等问题有可能会导致访问失败，这时不妨试试其他网页或等一段时间再访问。</p>
<h3 id="4-问题反馈中点击QQ跳转错误。"><a href="#4-问题反馈中点击QQ跳转错误。" class="headerlink" title="4.问题反馈中点击QQ跳转错误。"></a>4.问题反馈中点击QQ跳转错误。</h3><p>点击QQ直接跳转的是QQ会话页面，没有加好友可能导致此问题出现，可以加我的qq:770413277,然后再向我反馈即可。</p>
<h3 id="5-首页没有内容展示？"><a href="#5-首页没有内容展示？" class="headerlink" title="5.首页没有内容展示？"></a>5.首页没有内容展示？</h3><p>由于使用的代码家gank.io提供的api，双休时是不更新的，如果双休有数据取得则是之前的缓存。</p>
<h3 id="6-上下迅速滑动后轮播图会跳动。"><a href="#6-上下迅速滑动后轮播图会跳动。" class="headerlink" title="6.上下迅速滑动后轮播图会跳动。"></a>6.上下迅速滑动后轮播图会跳动。</h3><p>这是暂时的一个问题所在，因为没有产生比较大的问题，所以被延后处理，后期将修复。</p>
<h3 id="7-书籍或电影详情页一直访问失败？"><a href="#7-书籍或电影详情页一直访问失败？" class="headerlink" title="7.书籍或电影详情页一直访问失败？"></a>7.书籍或电影详情页一直访问失败？</h3><p>因为豆瓣api限制普通用于，每个ip每分钟请求次数是40次，超过ip会被暂时停用，一般为半小时左右，建议换到其他网络，或过一段时间再次访问。</p>
<h3 id="8-点击更多进入详情页后返回要快速返回两次才有效。"><a href="#8-点击更多进入详情页后返回要快速返回两次才有效。" class="headerlink" title="8.点击更多进入详情页后返回要快速返回两次才有效。"></a>8.点击更多进入详情页后返回要快速返回两次才有效。</h3><p>因为详情页是豆瓣提供的网页链接，我们这边无法处理，其他页面可能是正常的，谢谢。</p>
<h3 id="9-有比较多的书籍详情的部分内容缺失。"><a href="#9-有比较多的书籍详情的部分内容缺失。" class="headerlink" title="9.有比较多的书籍详情的部分内容缺失。"></a>9.有比较多的书籍详情的部分内容缺失。</h3><p>因为是展示的豆瓣提供的书籍页面，一切的数据内容都是豆瓣提供，如出现此类情况不能满足您的需要，请采用其他搜索引擎搜索，给您带来的不变深感抱歉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，为了帮助大家更加愉快的使用&lt;a href=&quot;https://github.com/youlookwhat/CloudReader&quot;&gt;云阅开源项目&lt;/a&gt;，现将大家可能遇到的问题及产生原因列举在这里，希望能帮到大家。&lt;/p&gt;
    
    </summary>
    
      <category term="开源项目" scheme="http://jingbin.me/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="cloudreader" scheme="http://jingbin.me/tags/cloudreader/"/>
    
      <category term="开源项目" scheme="http://jingbin.me/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>漫威电影宇宙</title>
    <link href="http://jingbin.me/2016/12/04/%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99/"/>
    <id>http://jingbin.me/2016/12/04/漫威宇宙/</id>
    <published>2016-12-04T10:33:34.000Z</published>
    <updated>2016-12-19T15:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20161204183656050" alt="漫威人物"></p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-00f5756578bf3609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="漫威1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-b81905fe1bd56424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="漫威2"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-dc9e3e6daf42bd63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="漫威3"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-0e63b234ca368f8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="漫威4"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-b32edaf7034f0c60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="漫威5"></p>
<h1 id="漫威电影宇宙"><a href="#漫威电影宇宙" class="headerlink" title="漫威电影宇宙"></a><a href="http://baike.baidu.com/link?url=0BLdaJHhuSUf8hljv9fmZX4Q7bEjneoYarz-7ijbZLocLqD0wwr2QoMFcJFQLrZwHRWPXzhRRFMh_haOWpmpuFLwHcj3bPrNZwQZFUCxV6OsvU9AfZKkrEaPYQY4lj3EJep0CGX-QH2h-GwDiWn3Wa#1" target="_blank" rel="external">漫威电影宇宙</a></h1><p>漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU），是由漫威影业（Marvel Studios）基于漫威漫画出版物中的角色独立制作的一系列电影所构成的共同的架空世界。它像漫画中的漫威主宇宙一样，是由共同的元素、设定、表演和角色通过跨界作品所建立的。</p>
<p>漫威电影宇宙独立于漫威宇宙（Earth-616）和终极宇宙（Earth-1610），编号为Earth-199999。</p>
<h2 id="平行宇宙"><a href="#平行宇宙" class="headerlink" title="平行宇宙"></a>平行宇宙</h2><p>   漫威平行宇宙，例如616，199999这些，都是漫威宏大宇宙观里不同平行世界的地球编号。也许你们已经知道，钢铁侠，雷神，美国队长，这些我们所熟悉的伟大漫画英雄共同战斗在同一个世界中，相互往来，互相穿插，这，也是美漫的魅力之一。而简单来说，相对于我们真正生活的这个世界而言，漫画人物所身处的世界就是一个平行宇宙。他们的纽约，也有克莱斯勒大厦高高耸立，但与我们不同的是，那里，是黑帮老大，金并的资产;他们的地球，也曾遭受过两次世界大战的创伤，但与我们不同的是，众多的超级英雄们投身进入与纳粹的战斗。</p>
<h2 id="地球199999"><a href="#地球199999" class="headerlink" title="地球199999"></a>地球199999</h2><p>MCU是漫威的复仇者联盟电影系列作品所在时空的简称，即Marvel Cinematic Universe，宇宙编号为Earth-199999。MCU 这个世界年龄很小，诞生至今，最多不过十年，但却用七年的成长书写了属于它的宇宙，千年的背景，未来的每周，它都会继续着讲述自己的故事，直到英雄落幕。</p>
<h2 id="推荐观看顺序"><a href="#推荐观看顺序" class="headerlink" title="推荐观看顺序"></a>推荐观看顺序</h2><p>时间轴仅为时间发展顺序，仅作参考：《美国队长》→《探员卡特》→《特工卡特》→《钢铁侠》→《钢铁侠2》=&gt;《无敌浩克》→《神盾顾问》→《寻找雷神锤子路上发生的趣事》→《雷神》→《复仇者联盟》→《47号物品》→《钢铁侠3》→《王者万岁》→《神盾局特工》1-7集→《雷神2：黑暗世界》→《神盾局特工》8-16集→《美国队长2》→《神盾局特工》17-22集→《银河护卫队》→《神盾局特工第二季》1-19集→《复仇者联盟2：奥创纪元》→《神盾局特工第二季》20-22集<br>（剧透部分已删，时间轴将《钢铁侠2》调整至《无敌浩克》之前，二者基本同时发生，从片尾来看《钢铁侠2》略早一点。将《顾问》调整至《无敌浩克》之后。）</p>
<blockquote>
<p>拷贝了很多百度百科的描述之后，开始正式记录了.. </p>
</blockquote>
<h1 id="漫威漫画电影"><a href="#漫威漫画电影" class="headerlink" title="漫威漫画电影"></a>漫威漫画电影</h1><p><img src="http://img.blog.csdn.net/20161204185854111" alt="漫威漫画电影"></p>
<h2 id="复仇者"><a href="#复仇者" class="headerlink" title="复仇者"></a>复仇者</h2><h3 id="复仇者联盟（2012年）"><a href="#复仇者联盟（2012年）" class="headerlink" title="复仇者联盟（2012年）"></a><a href="http://baike.baidu.com/item/%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F/17609141" target="_blank" rel="external">复仇者联盟（2012年）</a></h3><ul>
<li>基于 宇宙魔方的战斗。宇宙魔方，拥有无穷的能量，是钢铁人把美国队长找回来时在海洋里带回来的，神盾局意在研究它制造武器。结果来自外星球（神域）的人（雷神的星球，他是雷神的弟弟）的抢夺。神盾局应付不来，于是请来了 美国队长，钢铁人，绿巨人，绿箭侠，黑寡妇，雷神众多的英雄一起对付，虽然刚开始有摩擦，到最后终究是齐心协力战胜了。最后，是钢铁侠推着原子弹进入了外星球把原子弹扔过去了，和他女朋友商量怎样重建他的工业大厦。</li>
</ul>
<h3 id="复仇者联盟2：奥创纪元"><a href="#复仇者联盟2：奥创纪元" class="headerlink" title="复仇者联盟2：奥创纪元"></a><a href="http://baike.baidu.com/view/14403977.htm" target="_blank" rel="external">复仇者联盟2：奥创纪元</a></h3><ul>
<li>出现了双胞胎超能力的俩人（是美国队长2最后预示的），最初复仇者联盟成立之后一直在铲除九头蛇的人。遇到一个组织正在做奥创相关事情，这里面有一直存在里面的双胞胎姐弟。搞笑的一段是雷神在美国队长的盾牌上捶了一下把坦克给炸了。雷神的锤子没有人能拿得起，除了被钢铁侠创造出来的 幻，也是靠这个让大家服了，有一颗宝石在幻的头上，共有五颗宝石。他们去那组织带回来了奥创 ，即将完成的，然后放在斯塔克的大厦里，准备拿来创造新的纪元。然后被那个坏的把钢铁侠的人工智能机器人弄碎封闭了起来。最后双胞胎知道坏的那个想要毁灭地球，就背叛了他，弟弟为救“绿箭侠”牺牲了，姐姐使用魔法停住了火车，帮了很多。最后的奥创是被幻把电路的同化了。。剩下最后一个机器人，在谈话后也解决了。雷神和钢铁侠把在天空中的城市毁灭，才拯救了地球。</li>
</ul>
<h3 id="复仇者联盟3：无限之战I-2018年"><a href="#复仇者联盟3：无限之战I-2018年" class="headerlink" title="复仇者联盟3：无限之战I(2018年)"></a><a href="http://baike.baidu.com/view/15211374.htm" target="_blank" rel="external"><font color="red">复仇者联盟3：无限之战I(2018年)</font></a></h3><ul>
<li>复仇者联盟3：无限战争》是复仇者联盟系列电影的第三部，是漫威电影宇宙的第十九部电影，本片将与《银河护卫队2》剧情连接[1]  ，本片将会集齐所有漫威电影宇宙的超级英雄进行对抗灭霸，上演一场史无前例的拯救宇宙大战。<br>漫威电影有史以来最强反派：灭霸登场。</li>
</ul>
<h3 id="复仇者联盟3：无限之战II-2019年"><a href="#复仇者联盟3：无限之战II-2019年" class="headerlink" title="复仇者联盟3：无限之战II(2019年)"></a><a href="http://baike.baidu.com/view/15210240.htm" target="_blank" rel="external"><font color="red">复仇者联盟3：无限之战II(2019年)</font></a></h3><ul>
<li>《复仇者联盟3：无限战争（下）》（Avengers: Infinity War - Part II）是漫威影业出品的一部科幻动作电影，取材自漫威漫画，是漫威电影宇宙的第二十二部电影、同时也是《复仇者联盟》系列电影第三部的下集。由安东尼·罗素、乔·罗素兄弟执导，定于2019年5月3日美国上映。</li>
</ul>
<h2 id="银河护卫队"><a href="#银河护卫队" class="headerlink" title="银河护卫队"></a>银河护卫队</h2><h3 id="银河护卫队-2014年"><a href="#银河护卫队-2014年" class="headerlink" title="银河护卫队(2014年)"></a><a href="http://baike.baidu.com/link?url=LB4_cE9RUes8_OUh-w-yrONgxCOxBKq_CttSAziOItnmu_7UooW6CfuvNo3nLt0zdqWjeqwwp5jOR7UGe51GlAsFEI2w_WwNfIbJQkvfjMyRVNcb42Ls0njF1fwB9mVM3bM5zpZFnMUpECZ9L61PO_" target="_blank" rel="external">银河护卫队(2014年)</a></h3><ul>
<li>自以为是的冒险家“星爵”彼得·奎尔在偷走一块神秘球体后成为赏金猎人的头号目标，原来<br>邪恶反派罗南对此物体垂涎已久。为了逃脱无休止的追杀，奎尔被迫和四个格格不入的乌合之众结成同盟——手持机枪的火箭浣熊、树人格鲁特、凶残神秘的加美拉，以及复仇心切的毁灭者德拉克斯。然而当奎尔发现这颗球体蕴含的真正能量，以及它能给宇宙带来的巨大威胁时，他必须团结这群不入流的队友，破釜沉舟、决一死战，才有可能解救整个银河系。</li>
</ul>
<h3 id="银河护卫队：第二章-2017年"><a href="#银河护卫队：第二章-2017年" class="headerlink" title="银河护卫队：第二章(2017年)"></a><a href="http://baike.baidu.com/item/%E9%93%B6%E6%B2%B3%E6%8A%A4%E5%8D%AB%E9%98%9F2" target="_blank" rel="external">银河护卫队：第二章(2017年)</a></h3><ul>
<li>在《银河护卫队》中，星爵的父亲惊鸿一瞥，被称为“古老的外星人”而被人所惦记。而《银河护卫队2》或许会从这位神秘的人物身上开始自己故事的讲述。影片的导演詹姆斯·古恩表示，这部电影将继续把故事主线放在星爵一家的关系之上，这次，将讲述的是星爵的父亲。他说：“这会是一个关于父亲们（fathers）的故事，所以我很期待故事的进展和最终的成品。”另外，由于银河护卫队系列联系到漫威宇宙，《银河护卫队2》中可能会出现未曾出现的最后一颗无限宝石。</li>
</ul>
<h2 id="异人族（延期）"><a href="#异人族（延期）" class="headerlink" title="异人族（延期）"></a><a href="http://baike.baidu.com/view/15210240.htm" target="_blank" rel="external"><font color="red">异人族（延期）</font></a></h2><ul>
<li>地球时间数百万年前，宇宙两大种族Kree人和Skrull人发生了战争，为战略需要，Kree人来到太阳系，在天王星上设立了工作站。不久他们对当时地球生命的遗传潜能发生了兴趣，于是他们在当时的智人身上进行了一系列试验。这类试验的显然有双重意义，一是为了研究并防止自身进化中可能出现的停滞现象，同时为当时的战场制造一种强大的变种士兵。然而，当他们成功地创造出一群拥有非凡能力的人形物种时，不知什么原因，Kree人遗弃了他们的试验产物。</li>
</ul>
<ul>
<li>这个种群——异人族（Inhumans），在之后的日子里开始自我发展，他们发展出了自己的社会制度；与世隔离的生活使得他们拥有超越人类的先进技术。通过Terrigen雾，他们得到了各式各样的超能力，但同时也造成了基因的损坏与畸形。这导致一个长期的选育计划的实施，目的是为了减轻这些变异。他们的城市Attilan经常迁移，截至2005年的故事，Attilan已搬迁到了月球上的Blue Area。</li>
</ul>
<h2 id="浩克"><a href="#浩克" class="headerlink" title="浩克"></a>浩克</h2><h3 id="环球影业-绿巨人（2003年）"><a href="#环球影业-绿巨人（2003年）" class="headerlink" title="环球影业 绿巨人（2003年）"></a>环球影业 <a href="http://baike.baidu.com/link?url=873gAdzCIJoCrpfc9FRt2tzHpqQpy-5jZxEGtG3IQInoQT9PoVxd9ZONAOWWyaxTwJIwCCG6EhSqancP11SqbvqM5tiBsI5lq1Hfd6VqSGMFWApH3B8hkb9gkZVtjbH-" target="_blank" rel="external">绿巨人（2003年）</a></h3><ul>
<li>本名罗伯特·布鲁斯·班纳（Robert Bruce Banner），是一位天才核子物理学博士，在一次意外中为了保护同事而被自己制造出的伽玛炸弹（Gamma Bomb）放射线大量辐射，身体产生异变，后每当他情绪激动心跳加速的时候就会变成名为浩克的绿色怪物。由于变身后往往不受控制、所以为了不伤害自己周围的人、班纳游走于世界各地寻找控制愤怒的方法、即便如此班纳的浩克身份还是时常会造成毁灭性的破坏、因此常成为警方与有关单位追捕的对象。</li>
</ul>
<h3 id="漫威电影宇宙-无敌浩克（2008年）"><a href="#漫威电影宇宙-无敌浩克（2008年）" class="headerlink" title="漫威电影宇宙 无敌浩克（2008年）"></a>漫威电影宇宙 <a href="http://baike.baidu.com/link?url=L0MGkIldJsCyebfb8XKI46IqQdm5md77kt79CxULfosDXVJHkEeSqkwxKfk3Ca5qtuS0rW4kAe2vURCykEKToH6hyyublwySfxNV1P0I-toBd22BkSVqx6M4a-H5rb23" target="_blank" rel="external">无敌浩克（2008年）</a></h3><ul>
<li><p>故事讲述科学家布鲁斯·班纳（爱德华·诺顿饰）继续绝望地寻找能治愈他那被γ辐射毒害的体内细胞之疗法，以及解除那蕴藏体内、不受约束的另一个自己──绿巨人。</p>
</li>
<li><p>活在孤独及没有爱人的阴霾之下，布斯在治疗过程中还需过五关斩六将，一方面需逃避不断找寻他、扰人的复仇者霹雳将军罗斯（威廉·赫特饰）；另一方面要逃离一直欲捉拿他、利用他的异能之残暴军方。当布鲁斯在治疗上有了重大突破，变回常人的日子近在眼前之际，另一股同样拥有恐怖摧毁程度的力量突然出现。布斯眼看一切努力与心血快要毁于一旦，决定作出一次前所未有的反击。</p>
</li>
</ul>
<h2 id="钢铁侠"><a href="#钢铁侠" class="headerlink" title="钢铁侠"></a>钢铁侠</h2><h3 id="钢铁侠（2008年）"><a href="#钢铁侠（2008年）" class="headerlink" title="钢铁侠（2008年）"></a><a href="http://baike.baidu.com/link?url=VNxKkJ3oTb3PlqUiaJrqiPD57BL1fBCiVYIU-b6ZjkEse0PYoish9Phym0uFMAuykbub6anV1LAT8U9CCPQVc-Ho-j8vZ7XbKTxKYi0AfQ_" target="_blank" rel="external">钢铁侠（2008年）</a></h3><ul>
<li>被绑架时，被迫制造了第一个钢铁人，绑架的他是他的公司合伙人，然后挖走了他的供能芯片，最后基地爆炸把合伙人终结（女主引爆）。</li>
</ul>
<h3 id="钢铁侠2（2010年）"><a href="#钢铁侠2（2010年）" class="headerlink" title="钢铁侠2（2010年）"></a><a href="http://baike.baidu.com/item/%E9%92%A2%E9%93%81%E4%BE%A02" target="_blank" rel="external">钢铁侠2（2010年）</a></h3><ul>
<li>又一天才物理学家，因四十年前对他父亲造成惨败，怀恨在心，制造出一个仿冒的供能芯片，在赛车场和他决斗，被抓住后，被一位参议院解救，并利用他的资源，做了很多钢铁人（并会自爆）。最后和少尉的钢铁侠冲击波对冲炸掉了那个自制的仿冒钢铁侠。并在危急时刻解救了女主，抱到了阳台上，正式确定关系。</li>
</ul>
<h3 id="钢铁侠3（2013年）"><a href="#钢铁侠3（2013年）" class="headerlink" title="钢铁侠3（2013年）"></a><a href="http://baike.baidu.com/item/%E9%92%A2%E9%93%81%E4%BE%A03" target="_blank" rel="external">钢铁侠3（2013年）</a></h3><ul>
<li>因自己的自大，伤害了一位做人脑DNA研究的人（AIM），让他在阳台等了一晚上。后来变成恶人，和副总统合作，意在杀死总统。对方能是自己的NDA重组，不怕伤害，自动修复，身体能达到3000℃的高温，爆炸找不到弹片且威力巨大。将药打入女主的身体里，最后使得女主变体。干掉了攻击她的钢铁人，和那个恶人。最后，女主被治好，钢铁侠也取出了身体里一直存在的弹片（第一部被自己的炸弹爆炸植入）。</li>
</ul>
<h2 id="雷神"><a href="#雷神" class="headerlink" title="雷神"></a>雷神</h2><h3 id="雷神（2011年）"><a href="#雷神（2011年）" class="headerlink" title="雷神（2011年）"></a><a href="http://baike.baidu.com/link?url=FEn9jUM_35YKVLqTQziOBl_dh0LMp52EjDYhoMYZhIcQKyUdOcWtXowRmsgKJfx_i_Le5kMsVV6NiWOvkoof4t0VHIqEizMGHGG3qR7fdSa" target="_blank" rel="external">雷神（2011年）</a></h3><ul>
<li>《雷神》的故事发生在现今的地球以及艾斯卡的奇幻世界。故事的中心人物是拥有强大神力的雷神托尔（Thor），但是他自大鲁莽的行为掀起了一场古老的战争，他也因此被贬入凡间作为惩罚，被迫与人类一同生活。托尔必须学会如何成为一个真正的英雄，才能对抗来自神界的强大黑暗势力。《雷神》一片探讨一个人的传奇冒险，他从一个傲慢自大的神界王位继承人被贬入凡间，他必须成为一名超级英雄才能登上王位。</li>
</ul>
<h3 id="雷神2：黑暗世界（2013年）"><a href="#雷神2：黑暗世界（2013年）" class="headerlink" title="雷神2：黑暗世界（2013年）"></a><a href="http://baike.baidu.com/link?url=Hy3_rOlSP4NMWIRE04cBEMxG1trLM5bDiHX_DvoDmjiH47yNGmUr41fHIYkOK2ET7aFHxK54UM2YRVtVrmGyO9JQrTaJwPwXoXfTgu7lLFDX5cQxi9x9X8tZiNrBsfleXNWH7yU3lbQpzviOe0lLNC0EL4HHoBGyHrA85r8uUtrgF7mWxgppamgWbyriMwoW-3Sc5TlVhANKC-nabBqtkt-aMmpN4BIU99lvVnrVUO_" target="_blank" rel="external">雷神2：黑暗世界（2013年）</a></h3><ul>
<li>剧情承接《复仇者联盟》，讲诉了在纽约大战结束一年后，押送着弟弟洛基（<br>汤姆·希德勒斯顿 Tom Hiddleston 饰）回到神域接受审判的雷神托尔（克里斯·海姆斯沃斯 Chris Hemsworth 饰）将面对一股远古黑暗势力的挑战——复仇心切的黑暗精灵首领马勒凯斯（克里斯托弗·埃克莱斯顿 Christopher Eccleston 饰）率领神秘而强大的种族卷土重来，了解他们的人只有一个——洛基。托尔不得不向洛基寻求帮助，并与之结盟，踏上有生以来最危险的征程——这次旅途固然会令他与地球恋人简·福斯特（娜塔丽·波特曼 Natalie Portman 饰）久别重逢，但也将迫使他牺牲一切，唯此才能拯救整个宇宙。</li>
</ul>
<h3 id="雷神3：诸神黄昏（2017年）"><a href="#雷神3：诸神黄昏（2017年）" class="headerlink" title="雷神3：诸神黄昏（2017年）"></a><a href="http://baike.baidu.com/link?url=OSBBeT9iUH2VZSMhXLwF2Eg2LfVWRImWUQSBolZ4a2PDgQhBEuqN7J0iko187b7FxjpGsmet4wXmXNal_hZIAOlYF8sSrtpbddXMpfwBH5CjFtP_m_Dkg2sqstQIwz_GWZrohq0DkS8CikkAkhwxKAngyY-oOF-M1bd7iqe9efKQfp0YFsyN6aG-Ybv9rpQMBFzY2WFEvXCcg8Mu4MFuLwDQ-BW_cFjmcSPwL4fj_6G" target="_blank" rel="external"><font color="red">雷神3：诸神黄昏（2017年）</font></a></h3><ul>
<li>漫威旗下的超级英雄电影系列已经成为了迪士尼的摇钱树，目前，《雷神》系列第3部已经正在前期准备中。漫威日前宣布了担任这部续作的编剧人选：克里斯托弗·约斯特（《雷神2：黑暗世界》的编剧）与克雷格·凯尔。后者其实是漫威影业制片部的高级副总裁。</li>
</ul>
<h2 id="美国队长"><a href="#美国队长" class="headerlink" title="美国队长"></a>美国队长</h2><h3 id="1990年系列"><a href="#1990年系列" class="headerlink" title="1990年系列"></a>1990年系列</h3><h4 id="美国队长（1990年）"><a href="#美国队长（1990年）" class="headerlink" title="美国队长（1990年）"></a><a href="http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF/3472" target="_blank" rel="external">美国队长（1990年）</a></h4><ul>
<li>无具体记录</li>
</ul>
<h3 id="漫威电影宇宙-1"><a href="#漫威电影宇宙-1" class="headerlink" title="漫威电影宇宙"></a>漫威电影宇宙</h3><h4 id="美国队长：复仇者先锋（2011年）"><a href="#美国队长：复仇者先锋（2011年）" class="headerlink" title="美国队长：复仇者先锋（2011年）"></a><a href="http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF/3442263?fromtitle=%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF1&amp;type=syn" target="_blank" rel="external">美国队长：复仇者先锋（2011年）</a></h4><ul>
<li><p>美国队长小的时候目标明确:保卫国家。但因为身体不好一直难以入选当兵。他一起的叫“冬兵”，是美队3里面的称呼。比他高大，做到了中尉级别。然后队长被博士发觉，看他善良，深刻的一幕是:扔了一个手榴弹过去，其他人都跑开了，队长把手榴弹跑在怀里，让别人走开。然后队长进行实验，成了很强壮，能力很强的人。在“冬兵”的帮助下，打败了红骷髅将军，宇宙魔方掉在了海里，将军消失了。冬兵掉在了悬崖下，但他是经过实验的，被九头蛇的人发现了，用来作为杀手。出现在美队2。（自己记录）</p>
</li>
<li><p>斯蒂夫·罗杰斯是出生于经济大萧条时期的一个家境贫寒的脆弱青年。因为看到纳粹在欧洲肆虐侵略的新闻而想入伍参军。但因为体弱多病被拒绝了。无意中得知了斯蒂夫·罗杰斯真心愿望的切斯特·菲利普斯将军决定给他一个机会，让他参加“重生计划”。经过几个星期的测试，斯蒂夫·罗杰斯被注射了超级士兵的血清并被用紫外线照射轰击，终于拥有了人类可能拥有的最完美躯体。</p>
</li>
<li>接着他接受了身体和战术上的训练。三个月后，他得到了作为“美国队长”的第一份任务，带着坚不可摧的盾牌和深谙战术的头脑，他投入了与红骷髅的斗争，最终阻止了红骷髅的邪恶计划，但是自己也因此被冰封，直到70年后才醒来。</li>
</ul>
<h4 id="美国队长2（2014年）"><a href="#美国队长2（2014年）" class="headerlink" title="美国队长2（2014年）"></a><a href="http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF2" target="_blank" rel="external">美国队长2（2014年）</a></h4><ul>
<li><p>九头蛇的人渗透在神盾局。美国队长，猎鹰（有翅膀的那个），黑寡妇，神盾局局长（独眼龙）三人，闯入神盾局，安放三个芯片，使三个航母互相开火毁灭可。冬兵被派去打美国队长，但最后由于美国队长的一再劝说，美队掉入水中也是冬兵救的。（最后，钢铁侠中，一直针对他的一个官员也是九头蛇的，也被逮捕了。在《钢铁侠》中，那个官员被要求，给钢铁侠颁发奖章）（自己记录）</p>
</li>
<li><p>在经历了《复仇者联盟》的纽约大战后，美国队长史蒂夫·罗杰斯如今在华盛顿过着恬淡的生活，努力尝试着融入现代社会。然而当一名神盾局同事遭遇袭击后，史蒂夫被迫卷入了一场威胁全球安危的阴谋。他与黑寡妇携手出击，一边防备欲将自己灭口的杀手，一边努力揭露这个巨大阴谋的真面目。而当敌人的邪恶计划全局曝光后，美国队长和黑寡妇得到了一位新同盟“猎鹰”的协助。然而他们也发现自己将要面临的，是前所未遇、出乎意料的黑暗劲敌——冬兵。</p>
</li>
</ul>
<h4 id="美国队长3：内战（2016年）"><a href="#美国队长3：内战（2016年）" class="headerlink" title="美国队长3：内战（2016年）"></a><a href="http://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF3" target="_blank" rel="external">美国队长3：内战（2016年）</a></h4><ul>
<li><p>因为解救人时出现了很多伤害民众的事件，复仇者联盟被要求被组织制约。美队不同意，也许是之前被组织背叛过。钢铁侠同意。国王被炸身亡后，出现了冬兵的影子，误认为是冬兵行动了，化身“黑豹”要杀了冬兵，被美队救下。最后冬兵被抓，一名被意外杀害了父母的人，找到了冬兵的“激活码”，让冬兵制造了杀戮。钢铁侠领着一批人和美队引着的一批人对打。最后钢铁侠发现自己错了，一起和美队去抓那个背后的人。那个人给看了一段视频，放的是，钢铁侠的父母被 九头蛇操控了的冬兵杀害了的事实。然后就彻底开战了。打到最后钢铁侠被打道，美队用盾牌打掉了钢铁侠胸前的电源。钢铁侠说盾牌是他父亲造的，然后就把盾牌丢了。背后的人 被黑豹交给了神盾局。冬兵也被美国队长带到黑豹那冰冻了起来。（自己记录）</p>
</li>
<li><p>在奥创对这个世界造成了巨大的影响之后，复仇者联盟还是团结一致保护人类的。但是在一些政治角力的背后，政府中有人认为是有必要控制一下这些超级英雄的超自然能力和他们的行动了。于是，一项管控措施出台。这个措施就是要求复联按照政府的要求来行动。任务的开展、进程和结束，都要由政府主导。这个管控措施在复联中引起了极大的争议。意见最极端、最两极分化不可调和的，就是钢铁侠和美国队长之间的问题，于是，这两个同盟者之间的矛盾就此爆发了出来。而复联的“内战”也不可避免的爆发。</p>
</li>
</ul>
<h2 id="蚁人"><a href="#蚁人" class="headerlink" title="蚁人"></a>蚁人</h2><h3 id="蚁人（2015年）"><a href="#蚁人（2015年）" class="headerlink" title="蚁人（2015年）"></a><a href="http://baike.baidu.com/item/%E8%9A%81%E4%BA%BA/16272" target="_blank" rel="external">蚁人（2015年）</a></h3><ul>
<li>行骗为生的斯科特·朗（保罗·路德饰），在偷了生化学家汉克·皮姆博士（迈克尔·道格拉斯饰）发明的蚁人战服后，拥有了自由收缩身体大小的超能力。汉克·皮姆博士开发出一种“皮姆粒子”，并和斯科特·朗一同成为“蚁人”。斯科特也不得不接受自己的英雄身份，并帮助皮姆博士守护蚁人技术之谜。在强大的敌人威胁下，两人必须精心策划并执行一场惊天骗局来拯救世界维护和平。</li>
</ul>
<h3 id="蚁人与黄蜂女（2018年）"><a href="#蚁人与黄蜂女（2018年）" class="headerlink" title="蚁人与黄蜂女（2018年）"></a><a href="http://baike.baidu.com/item/%E8%9A%81%E4%BA%BA%E4%B8%8E%E9%BB%84%E8%9C%82%E5%A5%B3" target="_blank" rel="external"><font color="red">蚁人与黄蜂女（2018年）</font></a></h3><ul>
<li>《蚁人与黄蜂女》（Ant-Man and the Wasp），是漫威影业出品的一部科幻动作电影，取材自漫威漫画，是漫威电影宇宙的第二十部电影、同时也是《蚁人》系列电影的第二部。影片将在2018年7月6日上映。</li>
</ul>
<h2 id="奇异博士"><a href="#奇异博士" class="headerlink" title="奇异博士"></a>奇异博士</h2><h3 id="电视电影：奇异博士（1978年）"><a href="#电视电影：奇异博士（1978年）" class="headerlink" title="电视电影：奇异博士（1978年）"></a>电视电影：<a href="">奇异博士（1978年）</a></h3><ul>
<li>无记录</li>
</ul>
<h3 id="漫威电影宇宙：奇异博士（2016年）"><a href="#漫威电影宇宙：奇异博士（2016年）" class="headerlink" title="漫威电影宇宙：奇异博士（2016年）"></a>漫威电影宇宙：<a href="http://baike.baidu.com/item/%E5%A5%87%E5%BC%82%E5%8D%9A%E5%A3%AB/2492942" target="_blank" rel="external">奇异博士（2016年）</a></h3><ul>
<li>性格高傲的神经外科手术专家史蒂芬·斯特兰奇（本尼迪克特·康伯巴奇饰）事业有成，在遭遇一次车祸悲剧后，双手再也无法握住手术刀，不能继续他的医生职业，为了治疗他的伤，他远赴尼泊尔费尽千辛万苦见到了古一法师（蒂尔达·斯文顿饰），斯蒂芬-斯特兰奇把自己曾经的自负都抛在了一边，开始接触和学习鲜为人知的玄学、以及多维空间世界的学问。在纽约的格林威治村，变身奇异博士的斯特兰奇，现实世界和多维空间的中间人，他利用超自然能力和神器来保护着世界，更要与力量强大党羽众多的卡西利亚斯（麦斯·米科尔森饰）一决高下，来拯救即将崩塌的多维世界。</li>
</ul>
<h2 id="黑豹（2018年）"><a href="#黑豹（2018年）" class="headerlink" title="黑豹（2018年）"></a><a href="http://baike.baidu.com/link?url=WoGaI2zJBvkzAyoe1erev4GgpJ1ppcDLRC5A8hnpw01NEd8BmBXXeXrzJ9fzPZnaaYs7K54IpPGM4O2sJogoaK" target="_blank" rel="external">黑豹（2018年）</a></h2><ul>
<li>黑豹（Black Panther）是美国漫威漫画旗下超级英雄，初次登场于《神奇四侠》第52期（1966年7月），由编辑斯坦·李以及漫画家杰克·科比共同创造，是第一位在主流美国漫画公司登场的非讽刺黑人超级英雄。本名特查拉（T’Challa），是非洲国家瓦坎达（Wakanda）的国王。为了使自己的国家变得更加富强，少年时的特查拉王子便前往英国留学，后毕业于牛津大学，在其父——前任黑豹特查卡（T’Chaka）死后，接任瓦坎达的国王。同时，黑豹也是一名杰出的科学家，还是复仇者联盟的成员之一，此外他的前妻则是X战警成员暴风女。</li>
</ul>
<h2 id="惊奇队长（2019年）"><a href="#惊奇队长（2019年）" class="headerlink" title="惊奇队长（2019年）"></a><a href="http://baike.baidu.com/link?url=mvlhWgQSU41HaERjKeJHg1_KKdF7yEoMNajUDqsGAVmzXRFDSeFxNHw81bvDpe_K2t-jdzphJ8UAZmgR7ZdkyBvpjaeixRqB31pAMsrzuTWqSU8KoUS2ECKkkwbGk3i8" target="_blank" rel="external">惊奇队长（2019年）</a></h2><ul>
<li>黑寡妇的独立电影遥遥无期，《惊奇队长》则成为漫威旗下第一部以<br>女性为主角的超级英雄电影。漫威漫画中有男版和女版两位惊奇队长，而现任惊奇队长则是一名名为Carol Danvers的女士。凯文·费奇也在昨日的发布会表示这是一部以女惊奇队长为主角的电影。目前主演人选尚未确定。惊奇女士是复仇者联盟成员之一，因与外星人的接触而获得超乎于常人的力量和对痛苦的忍耐力，令人敬畏的物理伤害抵御能力，飞行能力和预知能力。</li>
</ul>
<h2 id="蜘蛛侠"><a href="#蜘蛛侠" class="headerlink" title="蜘蛛侠"></a>蜘蛛侠</h2><h3 id="蜘蛛侠-1"><a href="#蜘蛛侠-1" class="headerlink" title="蜘蛛侠"></a>蜘蛛侠</h3><h4 id="蜘蛛侠（2002年）"><a href="#蜘蛛侠（2002年）" class="headerlink" title="蜘蛛侠（2002年）"></a><a href="http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A0/7671442?fromtitle=%E8%9C%98%E8%9B%9B%E4%BE%A01&amp;fromid=6416692&amp;type=syn" target="_blank" rel="external">蜘蛛侠（2002年）</a></h4><ul>
<li>影片主要讲述彼特天性开朗，腼腆中仍包藏着一份单纯。拯救他的是一只哥伦比亚大学实验室的特殊蜘蛛，咬了他一口后，他眼镜消失了、脸蛋英俊了、肌肉发达了。遵循优良品种嫁接的原理，彼特当然也自动具有了撒网、织网、弹跳、飞跃、倒贴天花板的本事。彼特有了特异功能，叔父对他谆谆教诲：“能力越大，责任也越大。”</li>
</ul>
<h4 id="蜘蛛侠2（2004年）"><a href="#蜘蛛侠2（2004年）" class="headerlink" title="蜘蛛侠2（2004年）"></a><a href="http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A02" target="_blank" rel="external">蜘蛛侠2（2004年）</a></h4><ul>
<li>《蜘蛛侠2》的故事发生在第1集结束2年后，彼得·帕克继续过着自己的双重生活，平时是性情温和的大学生，晚上则化身为拥有超能力的英雄蜘蛛侠，可是这两者之间的微妙平衡却越来越难以维系，爱人、朋友和慈爱的阿姨都开始怀疑他的真实身份；同时他还多了个更可怕的敌人——章鱼博士，彼得·帕克必须用尽全力对付这位邪恶魔头的疯狂计划。</li>
</ul>
<h4 id="蜘蛛侠3（2007年）"><a href="#蜘蛛侠3（2007年）" class="headerlink" title=" 蜘蛛侠3（2007年）"></a><a href="http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A03/2721" target="_blank" rel="external"> 蜘蛛侠3（2007年）</a></h4><ul>
<li>影片讲述在经历了重重考验之后，代表正义的蜘蛛侠成为了人人敬仰的正义英雄，抱得美人归。但是，被“毒液”共生体寄生下的帕克开始变得目中无人，邪恶开始在他的心中反客为主。蜘蛛侠的道德准则越来越模糊。</li>
</ul>
<h3 id="超凡蜘蛛侠"><a href="#超凡蜘蛛侠" class="headerlink" title="超凡蜘蛛侠"></a>超凡蜘蛛侠</h3><h4 id="超凡蜘蛛俠（2012年）"><a href="#超凡蜘蛛俠（2012年）" class="headerlink" title="超凡蜘蛛俠（2012年）"></a><a href="http://baike.baidu.com/item/%E8%B6%85%E5%87%A1%E8%9C%98%E8%9B%9B%E4%BE%A0/10926252" target="_blank" rel="external">超凡蜘蛛俠（2012年）</a></h4><ul>
<li>作为这个世界上最具有吸引力、最受追捧的超级英雄之一，与“蜘蛛侠”有关的文化传奇终于展开了一个全新的故事篇章，这一次重点强调的则是彼得·帕克（安德鲁·加菲尔德饰）不为人知的另一面。作为一个总是没办法融入到周遭环境的高中生，彼得很小的时候就被父母遗弃了，由他的叔叔本（马丁·辛饰）和婶子梅（莎莉·菲尔德饰）抚养长大。与大多数他这个年纪的少年一样，在当今这样一个大环境下，彼得也在尝试着寻找到那个真实的自我，他想知道自己到底是谁，来自于何处；与此同时，他还一直在摸索当中，不知道应该如何与自己的初恋格温·斯泰西（艾玛·斯通饰）坦然的相处，他们一起在爱、承诺与秘密中奋力的挣扎着。 随着彼得在无意之中发现了一个神秘的公文包，显然是属于他的亲生父亲的，也迫使着他展开了一场探寻真相的揭秘之旅，他要弄明白他的父母失踪的真正原因。遵循着自己所能收集到的蛛丝马迹，彼得径直来到了他爸爸曾经的搭档科特·康纳斯博士（瑞斯·伊凡斯饰）的实验室……然后，意外发生了，彼得化身成为了“蜘蛛侠”，与科特的另外一个身份——“蜥蜴人”展开了激烈的碰撞与对决，他需要做出的是足以改变一生的决定和选择，那就是利用超能力重新塑造属于他的命运，然后成为一个真正意义上的英雄。</li>
</ul>
<h4 id="超凡蜘蛛俠2（2014年）"><a href="#超凡蜘蛛俠2（2014年）" class="headerlink" title=" 超凡蜘蛛俠2（2014年）"></a><a href="http://baike.baidu.com/item/%E8%B6%85%E5%87%A1%E8%9C%98%E8%9B%9B%E4%BE%A02" target="_blank" rel="external"> 超凡蜘蛛俠2（2014年）</a></h4><ul>
<li>彼得·帕克（安德鲁·加菲尔德饰）依然很忙，因为他一边要作为正常人谈恋爱，一边要变身蜘蛛侠打坏人。而格温（艾玛·斯通饰）高中还没毕业，彼得·帕克给格温父亲承诺过要以远离她的方式保护她，但他显然做不到。当一个新的大反派“电光人”（杰米·福克斯饰）出现后，彼得·帕克的生活更加不得安宁。一个老朋友哈利·奥斯本（戴恩·德哈恩饰）回归，帕克发现了关于他自己身世的新线索。</li>
</ul>
<h3 id="漫威电影宇宙-2"><a href="#漫威电影宇宙-2" class="headerlink" title="漫威电影宇宙"></a>漫威电影宇宙</h3><h4 id="蜘蛛侠：返校日（2017年）"><a href="#蜘蛛侠：返校日（2017年）" class="headerlink" title="蜘蛛侠：返校日（2017年）"></a><a href="http://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E4%BE%A0%EF%BC%9A%E8%BF%94%E6%A0%A1%E6%97%A5" target="_blank" rel="external">蜘蛛侠：返校日（2017年）</a></h4><ul>
<li>正在拍摄中的《蜘蛛侠：返校节》近日传出片场照，确认了一个新反派：除迈克尔·基顿饰演的秃鹫，反派团体“邪恶六人组”另外一位成员惊悚（Shocker）也会在电影中出现，由Bokeem Woodbine饰演。之前就有些传言称惊悚会现身，如今看来他的造型比起漫画，更像《超凡蜘蛛侠2》游戏中的样子。</li>
</ul>
<h2 id="刀锋战士"><a href="#刀锋战士" class="headerlink" title="刀锋战士"></a>刀锋战士</h2><h3 id="刀锋战士（1998年）"><a href="#刀锋战士（1998年）" class="headerlink" title="刀锋战士（1998年）"></a><a href="http://baike.baidu.com/item/%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB/10033222?fromtitle=%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB1&amp;fromid=1755275&amp;type=syn" target="_blank" rel="external">刀锋战士（1998年）</a></h3><ul>
<li><p>刀锋（韦斯利·斯奈普斯饰）自小就被专门打造新式武器的吸血鬼猎人亚伯拉罕·惠斯勒（克里斯·克里斯托佛森饰）收养，专门出入有吸血鬼出没的场所，拯救即将被消灭吞噬的人类，凭着他驾骑着机车，手持无敌火力的巨型火焰枪，以及无敌旋风刀和身后背负着的那把长剑，不死的无敌战神刀锋战士所向披靡，只要他一出现，躲藏在人群当中的吸血鬼将无所遁形。</p>
</li>
<li><p>于是，在这个未来的世界中，刀锋战士成了人类和吸血鬼双方争夺生存空间下最勇猛的正义战士，也因此，吸血鬼领袖狄肯·费斯（斯蒂芬·多尔夫饰）处心积虑要除去这心头大患，以完成他一统天下的大梦，他先利用刀锋战士的心理弱点给他致命的攻击，原来，刀锋出身时被吸血鬼血液浸满子宫，也成了半个吸血鬼，必须随时克制着自己对血的渴望。</p>
</li>
<li><p>狄肯·费斯先是邀请刀锋战士加入邪恶势力的一方，只要他们两方联手，相信没有人可以逃过他们的力量，然而刀锋战士作为献祭品以请出血王，增强自己的力量。在正邪双方的互斗之下，究竟谁才能获得最后的胜利。</p>
</li>
</ul>
<h3 id="刀锋战士2（2002年）"><a href="#刀锋战士2（2002年）" class="headerlink" title="刀锋战士2（2002年）"></a><a href="http://baike.baidu.com/item/%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB%E2%85%A1?fromtitle=%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB2&amp;fromid=316562&amp;type=syn" target="_blank" rel="external">刀锋战士2（2002年）</a></h3><ul>
<li><p>刀锋（韦斯利·斯奈普斯饰）的朋友惠斯勒（克里斯·克里斯托佛森饰）被一群吸血鬼捉去，被放进一个储藏罐里保鲜，供他们随时解渴。刀锋一路杀来救出了威斯勒，然后给他注入了抗病毒的药物，使他恢复了人的常态。但他们还没来得及叙旧，吸血鬼王国竟派信使来求援，他们请刀锋帮助打击一种威胁所有吸血鬼和人类的突变的吸血怪物，他们说这股吸血鬼新势力名为“收割机”。就这样，一种可以轻易使人变成怪物的名叫“收割机”的家伙使刀锋战士和本来势不两立的“采血包”吸血鬼暂时结为同盟。</p>
</li>
<li><p>“收割机”嗜血如命，但它们不是用嘴吸血，实际上，在它们的手掌中央有些细密的针管，就是说，只要它们把手放在你的身上就可以饱餐一顿。吸血鬼王国的内阁派出一直接受严格训练，本来是准备用来暗杀刀锋的突击队去和刀锋合作。为表示诚意，他们还特地派来美丽的妮莎（莱昂·维埃拉饰）协助刀锋战士。带着新机械师斯克斯和美女，刀锋战士准备向这些突变的吸血鬼恶棍开战了。</p>
</li>
</ul>
<h3 id="刀锋战士3（2004年）"><a href="#刀锋战士3（2004年）" class="headerlink" title="刀锋战士3（2004年）"></a><a href="http://baike.baidu.com/item/%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB3%EF%BC%9A%E4%B8%89%E4%BD%8D%E4%B8%80%E4%BD%93?fromtitle=%E5%88%80%E9%94%8B%E6%88%98%E5%A3%AB3&amp;fromid=317818&amp;type=syn" target="_blank" rel="external">刀锋战士3（2004年）</a></h3><ul>
<li><p>在遥远的沙漠深处，一些吸血鬼正在试图让能产下更多吸血鬼的恐<br>怖怪物复活，他就是德雷克（多米尼克·珀塞尔饰），这个可怕的吸血鬼拥有一种特殊的力量可以使自己在白天还能自由行动。如此以来，刀锋战士所面临的形式便更为严峻。此时，吸血鬼的领袖还对刀锋战士实施了一项恶毒的诽谤计划，他们把刀锋战士定义为了一个杀人怪物，制作了种种伪证并将它们送给了FBI，致使刀锋战士成为了FBI抓捕的对象。在刀锋战士和他的导师惠斯勒（克里斯·克里斯多佛森饰）与FBI探员坎伯兰得（詹姆斯·瑞马尔饰）以及他的手下进行了一次火药味十足的摊牌以后，刀锋战士极不情愿地与一群由人类组成的猎捕吸血鬼的小队结成了同盟，这个小队的头儿正是惠斯勒的漂亮女儿阿尔贝特（杰西卡·贝尔饰）和俏皮话满天飞的汉尼拔·金（瑞安·雷诺兹饰）。</p>
</li>
<li><p>当科学家萨姆菲尔德(娜塔莎·雷昂饰)一直在潜心研究以便可以制造出对付吸血鬼的终极溶液时，阿比盖尔带领的小队正与由强大的吸血鬼丹尼卡·塔罗斯(帕克·波西饰)所领导的一帮不死吸血鬼以及她那带有毒牙的随从们进行着一系列无情的厮杀。最终，刀锋战士发现他自己正在慢慢变成一个最为强大的吸血鬼，他的命运以及整个人类的命运都安危未定。</p>
</li>
</ul>
<h2 id="夜魔侠-艾丽卡"><a href="#夜魔侠-艾丽卡" class="headerlink" title="夜魔侠/艾丽卡"></a>夜魔侠/艾丽卡</h2><h3 id="夜魔侠（2003年）"><a href="#夜魔侠（2003年）" class="headerlink" title="夜魔侠（2003年）"></a><a href="http://baike.baidu.com/link?url=MFTYGfFu0zXx672TUTfhl58iK_SihFjrIH-jm0-L1evuCuM75aE1ZT5sdeyYMu-TGIKhHr5r8PQhzGS39N0euHkRtl2LgZEH5H6dj-R1n3mE98oOai5mroazTW0aSt9-" target="_blank" rel="external">夜魔侠（2003年）</a></h3><ul>
<li>又名超胆侠。影片主要讲述马特·默多克幼时意外双目失明，却也意外增强其余感官能力，在父亲遭歹徒袭击横死街头后，马特誓言为无辜受害者报复。白天是律师的他，晚上就化身超胆侠，将法律无法伸张的恶徒就地正法。</li>
</ul>
<h3 id="艾丽卡（2005年）"><a href="#艾丽卡（2005年）" class="headerlink" title="艾丽卡（2005年）"></a><a href="http://baike.baidu.com/item/%E8%89%BE%E4%B8%BD%E5%8D%A1/6465388" target="_blank" rel="external">艾丽卡（2005年）</a></h3><ul>
<li>影片围绕一个雇佣杀手Elektra Natchios，她是一个杀手组织Hand训练、培养出来的一个杀手中的精英。Elektra接受了最新的刺杀任务，而目标包括一个13岁的小女孩Abby，Elektra不忍下手，后来更和Abby成为朋友。</li>
</ul>
<h2 id="惩罚者"><a href="#惩罚者" class="headerlink" title="惩罚者"></a>惩罚者</h2><h3 id="惩罚者（2004年）"><a href="#惩罚者（2004年）" class="headerlink" title="惩罚者（2004年）"></a><a href="http://baike.baidu.com/item/%E6%83%A9%E7%BD%9A%E8%80%85/35747" target="_blank" rel="external"><font color="red">惩罚者（2004年）</font></a></h3><ul>
<li><p>弗兰克·卡斯特（Frank Castle）是原美国海军陆战队出身的军人，在越战退伍后担任部队训练教官，在与妻儿某日在公园聚餐时因目睹黑道私刑事件而一家三口当场惨遭黑道开枪灭口，侥幸伤重未死的弗兰克在出院后，运用自己的情报系统找出杀害妻儿的凶手并诉诸法律，但黑道却以各种管道和法律漏洞逃过制裁，对司法彻底感到绝望的弗兰克为了替妻儿报仇，决定以自己的方式诉诸武力来替妻儿讨回公道，并且对于任何罪犯都采取杀无赦的制裁手段。</p>
</li>
<li><p>他的做法太过于残暴，以至于很多的英雄都看不惯他的做法。</p>
</li>
<li><p>在大事件“内战”中，救了从钢铁侠那逃出来的蜘蛛侠，并送到了美国队长的据点。他还请求加入美国队长的队伍中，遭到了一些英雄的反对。途中，有两名罪犯也想加入美国队长的队伍中，惩罚者不由分说的杀了他们，这激怒了队长，队长打了他一顿，叫人把他送走了。</p>
</li>
<li><p>“黑暗王朝”时期，惩罚者被黑暗金刚狼戴肯所杀，但得到血石的力量暂时成为科学怪人，并与戴肯大战一场。目前，惩罚者已经恢复原来人体，继续自己的惩罚事业。</p>
</li>
</ul>
<h3 id="惩罚者2：战争特区（2009年）"><a href="#惩罚者2：战争特区（2009年）" class="headerlink" title="惩罚者2：战争特区（2009年）"></a><a href="http://baike.baidu.com/item/%E6%83%A9%E7%BD%9A%E8%80%852%EF%BC%9A%E6%88%98%E4%BA%89%E7%89%B9%E5%8C%BA?fromtitle=%E6%83%A9%E7%BD%9A%E8%80%852&amp;fromid=4370596&amp;type=syn" target="_blank" rel="external"><font color="red">惩罚者2：战争特区（2009年）</font></a></h3><ul>
<li><p>本想归隐田园，与家人共度天伦的FBI探员弗兰克·卡斯特，无奈的在黑帮杀掉妻儿之后走向了黑暗复仇的不归路。弗兰克·卡斯特大难不死，在悲痛过后开始成为这个城市里隐秘的“惩罚者”，在黑暗中打击那些猖狂的犯罪分子的头号先锋。在处决了城内走私行当的龙头老大之后，惩罚者的名声鹊起，因此也令城内不少罪犯闻风丧胆，而他也就继续穿着代表惩罚者的骷髅制服，穿梭在这个充满罪恶的都市中。</p>
</li>
<li><p>可偏偏就有不信邪的人出现，一名新崛起的黑帮份子比利开始向惩罚者叫嚣，并且还要统领城内各大帮派，大有和惩罚者正面对决的气势。一番激斗之后，比利最终还是败在惩罚者的枪下。</p>
</li>
<li><p>不过出乎所有人意料的是，比利并没有成为弗兰克的枪下游魂。他竟然幸存了下来。但他的脸已经严重损毁，看上去好似一副混乱至极的拼图。在复仇烈焰的灼烧下，比利正式埋葬了自己，化名为“拼图”重出江湖。这时又一个奇怪而恐怖的人物出现了，从某种程度上来说他与弗兰克很相似，不论是当初坚定的复仇意志，还是绝不留情干净利落的冷血手法，但“拼图”的野心可不仅仅限于此，他还要将城内的黑帮一一吞并，自然这些帮派的头目也成了他砧板之肉。虽然这在一定程度上等于协助了弗兰克的工作，但敌人就是敌人。而在弗兰克逐步调查“拼图”的过程中，他惊讶地发现，事实的真相远非一般人能够承担。不过对于惩罚者来说，回应暴力的只有更加强大的暴力。</p>
</li>
</ul>
<h2 id="恶灵骑士"><a href="#恶灵骑士" class="headerlink" title="恶灵骑士"></a>恶灵骑士</h2><h3 id="恶灵骑士（2007年）"><a href="#恶灵骑士（2007年）" class="headerlink" title="恶灵骑士（2007年）"></a><a href="http://baike.baidu.com/item/%E6%81%B6%E7%81%B5%E9%AA%91%E5%A3%AB/270996" target="_blank" rel="external">恶灵骑士（2007年）</a></h3><ul>
<li>初代恶灵骑士本名乔纳森·布雷泽（Jonathan Blaze），简称强尼·布雷泽（Johnny Blaze），原是一名摩托车特技车手，为了拯救患癌养父便和魔鬼墨菲斯托做了交易而被邪灵扎坦诺斯附身，随后得到了控制地狱火的力量和可以让罪恶感受到痛苦的审判之眼。强尼成为了追求复仇的恶灵骑士。</li>
</ul>
<h3 id="灵魂战车2：复仇时刻（2012年）"><a href="#灵魂战车2：复仇时刻（2012年）" class="headerlink" title="灵魂战车2：复仇时刻（2012年）"></a><a href="http://baike.baidu.com/item/%E7%81%B5%E9%AD%82%E6%88%98%E8%BD%A62%EF%BC%9A%E5%A4%8D%E4%BB%87%E6%97%B6%E5%88%BB" target="_blank" rel="external">灵魂战车2：复仇时刻（2012年）</a></h3><ul>
<li>该片讲述了强尼·布雷兹为救病重父亲和魔鬼做了交易，把灵魂卖给了魔鬼，布雷兹被一个古代恶魔附身，他化身为幽灵骑士。神父莫洛来到布雷兹的住处请布雷兹帮他找一个男孩，并答应作为回报，帮助布雷兹解除诅咒的故事。</li>
</ul>
<h2 id="X战警"><a href="#X战警" class="headerlink" title="X战警"></a>X战警</h2><h3 id="X战警-1"><a href="#X战警-1" class="headerlink" title="X战警"></a>X战警</h3><h4 id="X战警（2000年）"><a href="#X战警（2000年）" class="headerlink" title="X战警（2000年）"></a><a href="http://baike.baidu.com/link?url=Nr-y06z6BhoAEVeu4JJnuJdmIrngGQP9714oiZ486xmpIlOeTzmxD78jgi9XFRXW5v9JrTU0lMIxHWixe9mKB3PH41FhFFkljH2bWVwgDQa" target="_blank" rel="external">X战警（2000年）</a></h4><ul>
<li><p>镭射眼（X战警的队长，可由两眼射出致命雷射光）、琴葛蕾（有心电感应、隔空取物，及瞬间移动的能力）、暴风女（X战警的副队长，拥有控制气候的能力）是X战警的核心人物。</p>
</li>
<li><p>而X战警队伍来了一位危险人物——金刚狼（拥有超强的回复能力，两腕上有超合金的金钢爪）是个脾气暴躁，几乎不受控制的变种人，使X战警内部危机四伏。X战警让它训练新兵，并想吸收它加入自己的行列。但无人知道它的来历，不久又发现它的大部分思维受外人操纵。更糟的是，又一种突变生物“万磁王”出现了，它能控制磁力和地球引力。它曾被人类当作怪物巡回展出，饱受屈辱。它憎恨人类，认为突变生物比人类更优秀，应该主宰人类。它和“金钢狼”携手为实现这一目标而不择手段。</p>
</li>
<li><p>而誓死保卫人类的X战警，将会发现他们在尽力保卫人类之时，人类也对他们也产生了极大的恐惧，双方关系渐渐紧绷。再加上X战警得面对金钢狼一触即发的脾气，与万磁王的到处杀戮，X战警陷入了进退两难的重重危机中[2]  。</p>
</li>
</ul>
<h4 id="X战警2（2003年）"><a href="#X战警2（2003年）" class="headerlink" title="X战警2（2003年）"></a><a href="http://baike.baidu.com/item/X%E6%88%98%E8%AD%A62/68321" target="_blank" rel="external">X战警2（2003年）</a></h4><ul>
<li>故事开场紧接着第一集的结尾，“金刚狼”罗根为了找回自己过去的记忆离开了X教授的学校，隐姓埋名前往艾卡里湖（AkaliLake）工业中心；另一边，人类议会正忙于重建在变种人大战中受到重创的自由女神像；万磁王则继续在X教授精心打造的塑料监狱中服刑。从表面上看这个世界似乎渐渐回复了正常，但是X战警们没有察觉到，在这个世界的黑暗深处，新的阴谋正在悄悄临近，包括富有正义感的X战警在内的变种人。在普通人眼中代表着社会新物种对旧人类的挑战与威胁，因此他们必须在充满歧视和敌意的环境里挣扎求存。金刚狼的身世也将在本集中进一步揭开。</li>
</ul>
<h4 id="战警3：最后之战（2006年）"><a href="#战警3：最后之战（2006年）" class="headerlink" title="战警3：最后之战（2006年）"></a><a href="http://baike.baidu.com/item/X%E6%88%98%E8%AD%A6%EF%BC%9A%E8%83%8C%E6%B0%B4%E4%B8%80%E6%88%98?fromtitle=X%E6%88%98%E8%AD%A63&amp;fromid=6078384&amp;type=syn" target="_blank" rel="external">战警3：最后之战（2006年）</a></h4><ul>
<li><p>又称背水一战。在《X战警2》中，由于军方科学家的离间，人类对变种人的愤恨与压制彻底越过了底线，X教授与其带领的身怀绝技的X特警们面对着和解的难题与反抗的抉择，而一心企图令变种人称霸世界的万磁王摆脱囚禁后变得更为强大而狡猾。</p>
</li>
<li><p>三方都吸收了更庞大的新鲜力量，一场前所未有的人种之战剑拔弩张。与此同时，金刚狼和独眼龙还没能从痛失我爱中自拔，珍葛蕾却如凤凰涅磐般奇迹地回到战友中间。众人欣喜之外，却发觉她的性格变得狂乱分裂，甚至有倒戈相向的倾向，让X教授等对水坝一役后她死里逃生的经历不禁生疑。而在黑凤凰缺席的时间里，风暴女和金刚狼通力合作，日渐生情。沿着上集的线索，逐渐觉醒的金刚狼也破译了自己的基因密码。四人再聚首，感情的纠葛与身世的秘密和变种人的未来一样愈发扑朔迷离。人类已经按捺不住对自身势力受胁迫的恐惧，向变种人正式宣战。X教授虽坚持和平发展论，但在生死存亡之际，不得不与万磁王再次联手，为变种人的生存权利作最后一搏。而变种人内部关系也因为对仇恨的不同解读而势成水火，一位重要角色将因此牺牲。X战警必须自保并防止万磁王的野心在变种人中蔓延。</p>
</li>
</ul>
<h4 id="X战警：第一战（2011年）"><a href="#X战警：第一战（2011年）" class="headerlink" title="X战警：第一战（2011年）"></a><a href="http://baike.baidu.com/link?url=Qz1ZOROJhGKrmEf8wf36-2Ya6TObvxyeMuqnYmdT0hVXUni6mTTnwulcwQcFL77uY5bEU59X-nsQHjV0BTeCJB7Ztw-fCVdbyBHutDojwn1Mr71DcOXel2q6B4O3QlD4DBVA4Lp7DTbw1-MoAK-h3K" target="_blank" rel="external">X战警：第一战（2011年）</a></h4><ul>
<li>影片将背景设在60年代古巴导弹危机发生时，讲述在变种人未被世人所知的时候，Charles Xavier和Erik Lensherr还没有被人称作“X教授”和“万磁王”。他们只是变种人中最早发现自己超能力的两个年轻人。他们那时也不是对手，而是非常亲密的朋友。两人以及其他几个变种人在一起工作，试图阻止“末日”的到来。但在这个过程中，两人之间出现了裂缝，最终，在万磁王的兄弟会与X教授率领的X战警之间，一场永恒之战开始了。</li>
</ul>
<h4 id="X战警：逆转未来（2014年）"><a href="#X战警：逆转未来（2014年）" class="headerlink" title="X战警：逆转未来（2014年）"></a><a href="http://baike.baidu.com/item/X%E6%88%98%E8%AD%A6%EF%BC%9A%E9%80%86%E8%BD%AC%E6%9C%AA%E6%9D%A5?fromtitle=x%E6%88%98%E8%AD%A64&amp;type=syn" target="_blank" rel="external">X战警：逆转未来（2014年）</a></h4><ul>
<li><p>故事发生在并不遥远的未来，X战警遭遇了史上最大的生存危机，他们必须回到过去拯救自己的命运。X战警也许在我们这个时代，是有着最先进基因的生物，但在不久的未来，他们都被“特拉斯克工业”创始人玻利瓦尔·特拉斯克所制造并指挥的新型特种战斗机器人“哨兵”所猎杀，并有着被灭绝的危险。</p>
</li>
<li><p>哨兵机器人可以检测出任何形式的变种类型，而他们的基因则能够让他们瞬间变换和改造自身，从而击败X战警。这使得X战警的唯一希望，便是回到过去，在特拉斯克的研究最终导致他们的灭绝之前，改变历史。</p>
</li>
<li><p>利用幻影猫凯蒂的能力，金刚狼罗根穿越时空开始了这个艰辛的旅程。这一次，他必须联合年轻的变种人领袖X教授，以及他一生的对手万磁王，去找到魔形女，并阻止特拉斯克。时间已经迫在眉睫，在过去，亦在未来，X战警同哨兵机器人的大决战即将展开。</p>
</li>
</ul>
<h4 id="X戰警：天啟（2016年）"><a href="#X戰警：天啟（2016年）" class="headerlink" title="X戰警：天啟（2016年）"></a><a href="http://baike.baidu.com/item/X%E6%88%98%E8%AD%A6%EF%BC%9A%E5%A4%A9%E5%90%AF" target="_blank" rel="external">X戰警：天啟（2016年）</a></h4><ul>
<li><p>天启出生于埃及第一王朝，是地球上最古老、最强大的变种人沙巴泊，曾拥有无数信众，但后来遭人背叛，被人活埋。几千年后，强大无匹而且永生不朽的天启从数千年的深埋中获释，愤怒的他发现同类不再被视为神祇，他对人类世界充满厌恶，决定摧毁它重造一个新世界。为了实现自己的野心，天启四处游走，开始搜集他的s仆人——天启四骑士。因为天启的力量，暴风女、灵碟、天使、万磁王的超能力得到巨幅提升，同时他也计划将他的意识移入X教授体内，从而组建一支变种人的军队。</p>
</li>
<li><p>天启的阴谋遭到正义的X战警们的顽强抵抗，X教授、魔形女、琴·格雷、镭射眼、夜行者、野兽、快银等变种人联起手来，与这个看似无法阻挡的敌人进行一场史诗对决。</p>
</li>
</ul>
<h3 id="金刚狼"><a href="#金刚狼" class="headerlink" title="金刚狼"></a>金刚狼</h3><h4 id="X战警前传：金刚狼（2009年）"><a href="#X战警前传：金刚狼（2009年）" class="headerlink" title="X战警前传：金刚狼（2009年）"></a><a href="http://baike.baidu.com/subview/275163/13580586.htm#viewPageContent" target="_blank" rel="external">X战警前传：金刚狼（2009年）</a></h4><ul>
<li><p>《X战警前传》是由加文·胡德执导的科幻片，休·杰克曼、李佛·薛伯等主演。《X战警前传》包括2009 《X战警前传：金刚狼》（X-Men Origins: Wolverine）、2011《X战警：第一战》（X-Men: First Class）、2014 《X战警：逆转未来》（X-Men: Days of Future Past）三部影片。</p>
</li>
<li><p>金刚狼的原名是詹姆斯·霍莱特，出生于19世纪末加拿大的一个富裕家庭，他天生体弱但是骨骼清奇，而且他的家庭并不和睦，所以小詹姆斯性格内向而且孤僻。他一直就这样平静而枯燥地生活着，直到有一天晚上，园丁罗根杀死了父亲，丧父之痛让小詹姆斯激发了体内的奇特能力，他从身体里长出了由骨骼形成的“骨爪”，小詹姆斯用“骨爪”杀死了罗根。然而没想到的是，其实罗根才是小詹姆斯的生父，生父在临死前告诉了金刚狼他的身世。</p>
</li>
<li><p>于是小詹姆斯和哥哥维克多两人出逃。之后，两人参加了多次的战争，从一战一直打到越南战役。后来兄弟二人被史崔克将军招募，从事特种工作，厌倦了杀人的金刚狼后来脱离组织，才到了加拿大的林场当伐木工，改名为罗根。在逃亡中的罗根一直对自己天生的异能感到既恐惧又厌恶，于是自暴自弃。直到有一次，他在森林中偶遇并且爱上一名印第安血统女子“银狐”凯娅。凯娅后来被金刚狼的哥哥维克多（剑齿虎）所杀，愤怒的金刚狼决定接受史崔克将军的条件，同意进行变种人的改造实验。
　</p>
</li>
<li>罗根给自己起名为“金刚狼”，并且本身骨骼被改造成不可摧毁，天生的骨爪变成了金刚爪。被改造的金刚狼还被“X武器”组织洗脑，金刚狼苏醒后杀死了“X武器”组织的人之后逃跑，谁知道剑齿虎此时前来追杀，于是金刚狼与剑齿虎大战一场，金刚狼险胜之后离开。之后遇到了X教授，被得到了收留，开始了自己的X战警生涯，戎马一生。</li>
</ul>
<h4 id="金刚狼（2013年）"><a href="#金刚狼（2013年）" class="headerlink" title="金刚狼（2013年）"></a><a href="http://baike.baidu.com/item/%E9%87%91%E5%88%9A%E7%8B%BC2" target="_blank" rel="external">金刚狼（2013年）</a></h4><ul>
<li>位于加拿大的深山老林，背负着永生之苦的金刚狼罗根（休·杰克曼饰）隐居于此，但每日恶梦不断。在一次与猎人的冲突中，他得到东瀛女子雪绪（福岛莉拉饰）的帮助，雪绪是罗根二战期间的旧相识矢志田市朗派来的下属，似乎不久于人世的老友渴望死去之间再见罗根一面。跨越重洋的罗根终于见到了虚弱的矢志田市朗，对方希望他能够保护自己的孙女真理子（冈本多绪饰）。随着老人谢世，葬礼上突然战火点燃。罗根在雪绪的帮助下拼死救出真理子，两人一起逃亡，并因此互生情愫。而矢志田市朗的儿子矢志田信玄（真田广之饰）似乎另有所图。在逃亡途中，罗根意外发现他丧失了自愈的能力，金刚狼最大的危机降临。</li>
</ul>
<h4 id="金刚狼3-罗根（2017年）"><a href="#金刚狼3-罗根（2017年）" class="headerlink" title="金刚狼3:罗根（2017年）"></a><a href="http://baike.baidu.com/link?url=3OcdDcDZUUrYfE_61LF7Vs6A5HYknZyrpgJiNTNLVmXNw5kfSZtp-M8P_yE48Q2l2AcPRkMDjG2HClGPqK2xTSzfimkMGPpY3ZrBOMq1bAj255485JMHg_eUVMWpeDEQ" target="_blank" rel="external">金刚狼3:罗根（2017年）</a></h4><ul>
<li><p>影片讲述了《X战警：逆转未来》未来逆转的一年后。也就是新2024年的故事</p>
</li>
<li><p>许多年过去了，变种人渐渐消失。金刚狼罗根迟暮，带着老年X教授独自生活。一天，一个小女孩出现在罗根的生活中，X教授告诉罗根她很像他，并请罗根保护她。随着小女孩的出现，一个阴谋浮出水面，原来她竟是金刚狼的复制体：X-23。与此同时，一个右手为机械手的生化人唐纳德·皮尔斯追踪到了X-23，同时也发现了罗根和教授的踪迹。为了保护自己最后的同伴兼家人，罗根与唐纳德·皮尔斯，以及幕后黑手，展开了他人生中，也是最后一次，殊死之战……</p>
</li>
</ul>
<h3 id="死侍"><a href="#死侍" class="headerlink" title="死侍"></a>死侍</h3><h4 id="死侍（2016年）"><a href="#死侍（2016年）" class="headerlink" title="死侍（2016年）"></a><a href="">死侍（2016年）</a></h4><h3 id="牌王"><a href="#牌王" class="headerlink" title="牌王"></a>牌王</h3><h1 id="漫威漫画改编电影列表"><a href="#漫威漫画改编电影列表" class="headerlink" title="漫威漫画改编电影列表"></a>漫威漫画改编电影列表</h1><blockquote>
<p>先停止更新，复制了很长时间，累了.</p>
</blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%BC%AB%E5%A8%81%E6%BC%AB%E7%94%BB%E6%94%B9%E7%BC%96%E7%94%B5%E5%BD%B1%E5%88%97%E8%A1%A8" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E6%BC%AB%E5%A8%81%E6%BC%AB%E7%94%BB%E6%94%B9%E7%BC%96%E7%94%B5%E5%BD%B1%E5%88%97%E8%A1%A8</a></li>
</ul>
<h1 id="站外链接"><a href="#站外链接" class="headerlink" title="站外链接"></a>站外链接</h1><ul>
<li><a href="http://mt.sohu.com/20160506/n448061336.shtml" target="_blank" rel="external">【当贝市场】漫威系列电影、电视剧系列的正确顺序</a></li>
<li><a href="http://www.gamersky.com/wenku/201606/759888_14.shtml" target="_blank" rel="external">灭霸前十都进不去？漫威电影宇宙反派人气排行榜</a></li>
<li><a href="http://entertainment.anhuinews.com/system/2016/12/14/007526824_09.shtml" target="_blank" rel="external">冯小刚给周星驰演戏 这片场照绝版了(走错片场了)</a></li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote>
<p>记得看的第一部印象深刻的漫威电影的是《绿巨人》，当时觉得看的很振奋，纯属打斗场景，后来有机会接触了这系列的电影，知道是漫威宇宙，于是找到了这系列的全部电影，并一一全部看了。自己感到共鸣的并不是打斗的多么精彩，而是每个英雄为拯救人类的那种精神。</p>
<p>听见有人说美国英雄系列电影的一些套路就是：主角刚开始是个毫不起眼的角色，然后经历了一场灾难，获得了某种特殊能力，最初并不想用这种能力来帮助人类，经历很多事情的催化之后，明白自己应该承担起这份责任，保护人类，保护地球。（大概就是介么个意思）</p>
<p>开始认真看漫威系列电影的时候，看的是《钢铁侠》三部曲，然后是美国队长，刚开始每看完一部就写完这部的故事情节，最后因为看的太多了，一天可能看完好几部，就没有坚持下去，但觉得是个遗憾，因为不写下来，之后有一些主要情节可能都忘记了，跟别人谈论时，明明当时看的很认真，但是不知道从哪说起，花几分钟时间记录很重要，可以回顾故事情节的同时，也好日后好跟别人吹牛掰。哈哈</p>
<p>所以，这里记下电影的主要故事情节，有些是自己写的，有些则是网上摘录的。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161204183656050&quot; alt=&quot;漫威人物&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="漫威电影宇宙" scheme="http://jingbin.me/categories/%E6%BC%AB%E5%A8%81%E7%94%B5%E5%BD%B1%E5%AE%87%E5%AE%99/"/>
    
    
      <category term="漫威电影宇宙" scheme="http://jingbin.me/tags/%E6%BC%AB%E5%A8%81%E7%94%B5%E5%BD%B1%E5%AE%87%E5%AE%99/"/>
    
  </entry>
  
  <entry>
    <title>Android 关于WebView全方面的使用（项目应用篇）</title>
    <link href="http://jingbin.me/2016/12/04/Android%20%E5%85%B3%E4%BA%8EWebView%E5%85%A8%E6%96%B9%E9%9D%A2%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8%E7%AF%87%EF%BC%89/"/>
    <id>http://jingbin.me/2016/12/04/Android 关于WebView全方面的使用（项目应用篇）/</id>
    <published>2016-12-04T09:36:54.000Z</published>
    <updated>2016-12-05T13:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><strong>与JS交互</strong></li>
<li>拨打电话、发送短信、发送邮件</li>
<li>上传图片(版本兼容)</li>
<li>进度条设置</li>
<li>字体大小设置</li>
<li>返回网页上一层、显示网页标题</li>
<li>全屏播放网络视频</li>
</ul>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-c47f48be7ab5ecec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="首页"></p>
<h2 id="文章说明"><a href="#文章说明" class="headerlink" title="文章说明"></a>文章说明</h2><p>WebView的使用已经是老生常谈了，看到很多文章说了用法，但我很少看到全的或者是项目中可以直接使用的，都是看了很多后，自己把功能都集合在一起。这里是一份比较全面的WebView项目应用篇，其中已经解决了应用时出现的很多bug，希望能对大家有帮助。</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><strong><a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebViewStudy</a></strong></p>
<h2 id="内容详细介绍"><a href="#内容详细介绍" class="headerlink" title="内容详细介绍"></a>内容详细介绍</h2><h3 id="电话短信邮件"><a href="#电话短信邮件" class="headerlink" title="电话短信邮件"></a>电话短信邮件</h3><p><img src="http://upload-images.jianshu.io/upload_images/1354448-8c5b14fbf8fbdea8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="电话短信邮件&amp;与JS交互测试.png"></p>
<p>给WebView设置WebViewClient：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient(<span class="keyword">this</span>));</div></pre></td></tr></table></figure>
<p>其中<code>MyWebViewClient</code>内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">* 监听网页链接:</div><div class="line">* - 优酷视频直接跳到自带浏览器 </div><div class="line">* - 根据标识:打电话、发短信、发邮件 </div><div class="line">* - 进度条的显示 </div><div class="line">* - 加载完成后，添加javascript监听 </div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IWebPageView iWebPageView;</div><div class="line">    <span class="keyword">private</span> WebViewActivity activity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyWebViewClient</span><span class="params">(IWebPageView iWebPageView)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.iWebPageView = iWebPageView;</div><div class="line">        activity = (WebViewActivity) iWebPageView;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="comment">// 优酷视频跳转浏览器播放</span></div><div class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"http://v.youku.com/"</span>)) &#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">            intent.setAction(<span class="string">"android.intent.action.VIEW"</span>);</div><div class="line">            intent.addCategory(<span class="string">"android.intent.category.DEFAULT"</span>);</div><div class="line">            intent.addCategory(<span class="string">"android.intent.category.BROWSABLE"</span>);</div><div class="line">            Uri content_url = Uri.parse(url);</div><div class="line">            intent.setData(content_url);</div><div class="line">            activity.startActivity(intent);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 电话、短信、邮箱</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(WebView.SCHEME_TEL) || url.startsWith(<span class="string">"sms:"</span>) || url.startsWith(WebView.SCHEME_MAILTO)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">                intent.setData(Uri.parse(url));</div><div class="line">                activity.startActivity(intent);</div><div class="line">            &#125; <span class="keyword">catch</span> (ActivityNotFoundException ignored) &#123;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        iWebPageView.startProgress();</div><div class="line">        view.loadUrl(url);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (activity.progress90) &#123;</div><div class="line">            iWebPageView.hindProgressBar();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            activity.pageFinish = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!CheckNetwork.isNetworkConnected(activity)) &#123;</div><div class="line">            iWebPageView.hindProgressBar();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// html加载完成之后，添加监听图片的点击js函数</span></div><div class="line">        iWebPageView.addImageClickListener();</div><div class="line">        <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 视频全屏播放按返回页面被放大的问题</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleChanged</span><span class="params">(WebView view, <span class="keyword">float</span> oldScale, <span class="keyword">float</span> newScale)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScaleChanged(view, oldScale, newScale);</div><div class="line">        <span class="keyword">if</span>(newScale - oldScale &gt; <span class="number">7</span>) &#123;</div><div class="line">            view.setInitialScale((<span class="keyword">int</span>)(oldScale / newScale * <span class="number">100</span>)); <span class="comment">//异常放大，缩回去。</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为有很多配置，这里把各个功能模块通过接口<code>IWebPageView</code>分离了出来，这样逻辑更清晰。</p>
<h3 id="与JS交互"><a href="#与JS交互" class="headerlink" title="与JS交互"></a>与JS交互</h3><p>相信大家已经看到了上面”—-点击了图片”的Toast，这里需要先给WebView设置JavascriptInterface：<br><code>webView.addJavascriptInterface(new ImageClickInterface(this), &quot;injectedObject&quot;);</code></p>
<p>其中<code>ImageClickInterface</code>相关代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageClickInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageClickInterface</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">imageClick</span><span class="params">(String imgUrl, String hasLink)</span> </span>&#123;</div><div class="line">        Toast.makeText(context, <span class="string">"----点击了图片"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="comment">// 查看大图</span></div><div class="line"><span class="comment">//        Intent intent = new Intent(context, ViewBigImageActivity.class);</span></div><div class="line"><span class="comment">//        intent.putStringArrayListExtra("imgUrl",imgUrl);</span></div><div class="line"><span class="comment">//        context.startActivity(intent);</span></div><div class="line"><span class="comment">//        Log.e("----点击了图片 url: ", "" + imgUrl);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加入监听：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addImageClickListener</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 这段js函数的功能就是，遍历所有的img节点，</span></div><div class="line">       <span class="comment">// 并添加onclick函数，函数的功能是在图片点击的时候调用本地java接口并传递对应src和has_link里的值过去</span></div><div class="line">        webView.loadUrl(<span class="string">"javascript:(function()&#123;"</span> +</div><div class="line">                <span class="string">"var objs = document.getElementsByTagName(\"img\");"</span> +</div><div class="line">                <span class="string">"for(var i=0;i&lt;objs.length;i++)"</span> +</div><div class="line">                <span class="string">"&#123;"</span> +</div><div class="line">                <span class="string">"objs[i].onclick=function()&#123;window.injectedObject.imageClick(this.getAttribute(\"src\"),this.getAttribute(\"has_link\"));&#125;"</span> +</div><div class="line">                <span class="string">"&#125;"</span> +</div><div class="line">                <span class="string">"&#125;)()"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>我们来看一下网页对应的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"[./callsms_files/753b877c-c098-43e9-85cc-6df5bbdaaafe](./callsms_files/753b877c-c098-43e9-85cc-6df5bbdaaafe)"</span> style=<span class="string">"width: 100%"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>大家可能觉得有点怪异..因为这是保存的本地网页，如是线上的话，是这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">'[http://7xk154.com1.z0.glb.clouddn.com/article/753b877c-c098-43e9-85cc-6df5bbdaaafe](http://7xk154.com1.z0.glb.clouddn.com/article/753b877c-c098-43e9-85cc-6df5bbdaaafe)'</span> style=<span class="string">'width: 100%'</span>&gt;</div></pre></td></tr></table></figure></p>
<p>这里传递过去的是一个图片<code>url</code>的值，没有的属性传过去的则是null。这样我们就可以对其进行具体的操作了。</p>
<h3 id="字体大小设置"><a href="#字体大小设置" class="headerlink" title="字体大小设置"></a>字体大小设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 设置字体默认缩放大小(改变网页字体大小,setTextSize  api14被弃用)*/</span></div><div class="line">ws.setTextZoom(<span class="number">100</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>其中<code>100</code>为默认缩放比，通过设置缩放比来控制字体大小。</p>
</blockquote>
<h3 id="上传图片-版本兼容-amp-全屏播放网络视频-amp-显示网页标题"><a href="#上传图片-版本兼容-amp-全屏播放网络视频-amp-显示网页标题" class="headerlink" title="上传图片(版本兼容) &amp; 全屏播放网络视频 &amp; 显示网页标题"></a>上传图片(版本兼容) &amp; 全屏播放网络视频 &amp; 显示网页标题</h3><p>这里因为篇幅原因，里面的代码很多，就不贴出来了，大家可以点击<a href="https://github.com/youlookwhat/WebViewStudy/blob/master/app/src/main/java/com/example/jingbin/webviewstudy/config/MyWebChromeClient.java" target="_blank" rel="external">MyWebChromeClient.java</a>，查看具体代码。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1354448-59c17e13bb486d7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="上传图片.png"></p>
<h3 id="返回网页上一层"><a href="#返回网页上一层" class="headerlink" title="返回网页上一层"></a>返回网页上一层</h3><p>返回网页上一层及退出全屏等操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Overridepublic</span> </div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;    </div><div class="line">  <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;        </div><div class="line">      <span class="comment">//全屏播放退出全屏        </span></div><div class="line">      <span class="keyword">if</span> (webChromeClient.inCustomView()) &#123;            </div><div class="line">              hideCustomView();            </div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;            </div><div class="line">        <span class="comment">//返回网页上一页        </span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (webView.canGoBack()) &#123;            </div><div class="line">              webView.goBack();            </div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;            </div><div class="line">         <span class="comment">//退出网页        </span></div><div class="line">         &#125; <span class="keyword">else</span> &#123;            </div><div class="line">              webView.loadUrl(<span class="string">"about:blank"</span>);            </div><div class="line">              finish();        </div><div class="line">        &#125;    </div><div class="line">     &#125;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="进度条设置"><a href="#进度条设置" class="headerlink" title="进度条设置"></a>进度条设置</h3><p>这里用的是先加载到90%再加载到100%, 具体为什么相信大家都懂吧…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 进度条 假装加载到90%</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProgress90</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">900</span>; i++) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> progress = i + <span class="number">1</span>;</div><div class="line">            mProgressBar.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    mProgressBar.setProgress(progress);</div><div class="line">                    <span class="keyword">if</span> (progress == <span class="number">900</span>) &#123;</div><div class="line">                        progress90 = <span class="keyword">true</span>;</div><div class="line">                        <span class="keyword">if</span> (pageFinish) &#123;</div><div class="line">                            startProgress90to100();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;, (i + <span class="number">1</span>) * <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>再加载到100%:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载到90%后再加载到100%</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">progressChanged</span><span class="params">(<span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (progress90) &#123;</div><div class="line">            <span class="keyword">int</span> progress = newProgress * <span class="number">100</span>;</div><div class="line">            <span class="keyword">if</span> (progress &gt; <span class="number">900</span>) &#123;</div><div class="line">                mProgressBar.setProgress(progress);</div><div class="line">                <span class="keyword">if</span> (progress == <span class="number">1000</span>) &#123;</div><div class="line">                    mProgressBar.setVisibility(View.GONE);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><blockquote>
<p>如很多细节不知缘由的查看这里</p>
</blockquote>
<ul>
<li><a href="https://developer.android.com/reference/android/webkit/WebSettings.html" target="_blank" rel="external">https://developer.android.com/reference/android/webkit/WebSettings.html</a></li>
<li><a href="http://www.jianshu.com/p/32d48ca7d0e0" target="_blank" rel="external">http://www.jianshu.com/p/32d48ca7d0e0</a></li>
<li><a href="http://www.apkfuns.com/android-webview%E4%B8%8Ejavascript%E4%BA%A4%E4%BA%92.html" target="_blank" rel="external">http://www.apkfuns.com/android-webview%E4%B8%8Ejavascript%E4%BA%A4%E4%BA%92.html</a></li>
</ul>
<h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h2><ul>
<li><a href="http://blog.csdn.net/u013320868/article/details/52837671" target="_blank" rel="external">WebView加载网页不显示图片解决办法</a></li>
<li><a href="http://blog.csdn.net/guozhiganggang/article/details/52097975" target="_blank" rel="external">webview: 视频全屏播放按返回页面被放大的问题</a></li>
<li><a href="https://chromium.googlesource.com/chromium/src/+/dc26192a317d9511ce983fd4b26b1130fe25761a" target="_blank" rel="external">Failed to init browser shader disk cache.</a></li>
<li><a href="http://forum.xda-developers.com/showthread.php?t=2212632" target="_blank" rel="external">EGL_BAD_DISPLAY</a></li>
<li><a href="https://chromium.googlesource.com/chromium/src.git/+/46.0.2478.0/content/browser/android/java/gin_java_bridge_message_filter.cc" target="_blank" rel="external">Unknown frame routing id: 3</a></li>
<li>找不到assets目录下资源：注意assets在哪层文件夹下！与AndroidManifest.xml同级</li>
<li>视频播放宽度比webview设置的宽度大，超过屏幕：设置ws.setLoadWithOverviewMode(false);</li>
<li>onDestroy时的清除资源操作</li>
</ul>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>最后再附一遍项目地址😆：<strong><a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebViewStudy</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;与JS交互&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;拨打电话、发送短信、发送邮件&lt;/li&gt;
&lt;li&gt;上传图片(版本兼容)&lt;/li&gt;
&lt;li&gt;进度条设置&lt;/li&gt;
&lt;li&gt;字体大小设置&lt;/li&gt;
&lt;li&gt;返回网页上一层、显示网页标题&lt;/li&gt;
&lt;li&gt;全屏播放网络视频&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="webview" scheme="http://jingbin.me/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>Android 关于Glide的拓展使用(高斯模糊、加载监听、圆角图片)</title>
    <link href="http://jingbin.me/2016/11/29/Android%20%E5%85%B3%E4%BA%8EGlide%E7%9A%84%E4%BD%BF%E7%94%A8(%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A%E3%80%81%E5%8A%A0%E8%BD%BD%E7%9B%91%E5%90%AC%E3%80%81%E5%9C%86%E8%A7%92%E5%9B%BE%E7%89%87)/"/>
    <id>http://jingbin.me/2016/11/29/Android 关于Glide的使用(高斯模糊、加载监听、圆角图片)/</id>
    <published>2016-11-29T04:07:32.000Z</published>
    <updated>2017-01-10T04:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1354448-c373098272fca1e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1040" alt="stackblur_default.png"></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>引入的库应为如下，将官方的额外扩展了，使其可以支持高斯模糊。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'jp.wasabeef:glide-transformations:2.0.1'</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><h3 id="基本加载"><a href="#基本加载" class="headerlink" title="基本加载"></a>基本加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Glide.with(context)</div><div class="line">	.load(url)</div><div class="line">	.into(imageView);</div></pre></td></tr></table></figure>
<h3 id="设置加载中和加载失败的情况"><a href="#设置加载中和加载失败的情况" class="headerlink" title="设置加载中和加载失败的情况"></a>设置加载中和加载失败的情况</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(context)</div><div class="line">	.load(url)</div><div class="line">	.placeholder(R.drawable.loading) <span class="comment">//占位符 也就是加载中的图片，可放个gif</span></div><div class="line">	.error(R.drawable.failed) <span class="comment">//失败图片</span></div><div class="line">	.into(view);</div></pre></td></tr></table></figure>
<h3 id="只加载动画"><a href="#只加载动画" class="headerlink" title="只加载动画"></a>只加载动画</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Glide.with(context)</div><div class="line">	.load(url)</div><div class="line">	.asGif() <span class="comment">// 只能加载gif文件</span></div><div class="line">	.into(imageView);</div></pre></td></tr></table></figure>
<h3 id="添加图片淡入加载的效果"><a href="#添加图片淡入加载的效果" class="headerlink" title="添加图片淡入加载的效果"></a>添加图片淡入加载的效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Glide.with(context)</div><div class="line">	.load(url)</div><div class="line">	.placeholder(R.drawable.loading)</div><div class="line">	.error(R.drawable.failed) </div><div class="line">	.crossFade(<span class="number">1000</span>) <span class="comment">// 可设置时长，默认“300ms”</span></div><div class="line">	.into(view);</div></pre></td></tr></table></figure>
<h3 id="加载高斯模糊图"><a href="#加载高斯模糊图" class="headerlink" title="加载高斯模糊图"></a>加载高斯模糊图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Glide.with(context)</div><div class="line">	.load(url)</div><div class="line">	.placeholder(R.drawable.loading)</div><div class="line">	.error(R.drawable.failed) </div><div class="line">	.crossFade(<span class="number">1000</span>)</div><div class="line">	.bitmapTransform(<span class="keyword">new</span> BlurTransformation(context,<span class="number">23</span>,<span class="number">4</span>))  <span class="comment">// “23”：设置模糊度(在0.0到25.0之间)，默认”25";"4":图片缩放比例,默认“1”。</span></div><div class="line">	.into(view);</div></pre></td></tr></table></figure>
<h3 id="加载监听器RequestListener"><a href="#加载监听器RequestListener" class="headerlink" title="加载监听器RequestListener"></a>加载监听器RequestListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>).load(internetUrl).listener(<span class="keyword">new</span> RequestListener&lt;String, GlideDrawable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onException</span><span class="params">(Exception e, String model, Target&lt;GlideDrawable&gt; target, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</div><div class="line">                Toast.makeText(getApplicationContext(),<span class="string">"资源加载异常"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//这个用于监听图片是否加载完成</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, <span class="keyword">boolean</span> isFromMemoryCache, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</div><div class="line">                Toast.makeText(getApplicationContext(),<span class="string">"图片加载完成"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).into(imageView);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果需要加载完成后设置图片透明度为0，则不能设置<code>.placeholder(R.drawable.url)</code>，否则达不到你想要的效果。</p>
</blockquote>
<h3 id="图片缓存机制"><a href="#图片缓存机制" class="headerlink" title="图片缓存机制"></a>图片缓存机制</h3><p>Glide缓存策略</p>
<p>Glide默认开启磁盘缓存和内存缓存，当然也可以对单张图片进行设置特定的缓存策略。<br>设置图片不加入到内存缓存</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Glide.with( context )</div><div class="line">	.load( eatFoodyImages[<span class="number">0</span>] )</div><div class="line">	.skipMemoryCache( <span class="keyword">true</span> )</div><div class="line">	.into( imageViewInternet );</div></pre></td></tr></table></figure>
<p>设置图片不加入到磁盘缓存</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Glide.with( context )</div><div class="line">	.load( eatFoodyImages[<span class="number">0</span>] )</div><div class="line">	.diskCacheStrategy( DiskCacheStrategy.NONE )</div><div class="line">	.into( imageViewInternet );</div></pre></td></tr></table></figure>
<p>Glide支持多种磁盘缓存策略：</p>
<p>DiskCacheStrategy.NONE :不缓存图片<br>DiskCacheStrategy.SOURCE :缓存图片源文件<br>DiskCacheStrategy.RESULT:缓存修改过的图片<br>DiskCacheStrategy.ALL:缓存所有的图片，默认</p>
<h3 id="加载圆角图片"><a href="#加载圆角图片" class="headerlink" title="加载圆角图片"></a>加载圆角图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideCircleTransform</span> <span class="keyword">extends</span> <span class="title">BitmapTransformation</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlideCircleTransform</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">transform</span><span class="params">(BitmapPool pool, Bitmap toTransform, <span class="keyword">int</span> outWidth, <span class="keyword">int</span> outHeight)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> circleCrop(pool, toTransform);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">circleCrop</span><span class="params">(BitmapPool pool, Bitmap source)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> size = Math.min(source.getWidth(), source.getHeight());</div><div class="line">        <span class="keyword">int</span> x = (source.getWidth() - size) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> y = (source.getHeight() - size) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// TODO this could be acquired from the pool too</span></div><div class="line">        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);</div><div class="line">        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);</div><div class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);</div><div class="line">        &#125;</div><div class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(result);</div><div class="line">        Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">        paint.setShader(<span class="keyword">new</span> BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">float</span> r = size / <span class="number">2f</span>;</div><div class="line">        canvas.drawCircle(r, r, r, paint);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getClass().getName();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Glide.with(mContext)</div><div class="line">    .load(imageUrl)</div><div class="line">    .transform(<span class="keyword">new</span> GlideCircleTransform(mContext))</div><div class="line">    .into(holder.imageView);</div></pre></td></tr></table></figure>
<h3 id="获得图片缓存路径"><a href="#获得图片缓存路径" class="headerlink" title="获得图片缓存路径"></a>获得图片缓存路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getImagePath</span><span class="params">(String imgUrl)</span> </span>&#123;    </div><div class="line">      String path = <span class="keyword">null</span>;    </div><div class="line">      FutureTarget&lt;File&gt; future = Glide.with(ViewBigImageActivity.<span class="keyword">this</span>)</div><div class="line">             .load(imgUrl)</div><div class="line">             .downloadOnly(<span class="number">500</span>, <span class="number">500</span>);    </div><div class="line">     <span class="keyword">try</span> &#123;        </div><div class="line">            File cacheFile = future.get();        </div><div class="line">            path = cacheFile.getAbsolutePath();    </div><div class="line">     &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123; </div><div class="line">            e.printStackTrace();    </div><div class="line">     &#125;    </div><div class="line">     <span class="keyword">return</span> path;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：应在子线程中执行。</p>
</blockquote>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 子线程获得图片路径</span></div><div class="line">        <span class="keyword">final</span> String imagePath = getImagePath(imageUrl);</div><div class="line">        <span class="comment">// 主线程更新</span></div><div class="line">        MainActivity.<span class="keyword">this</span>.runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// 操作代码</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/zhihui_520/article/details/51822336" target="_blank" rel="external">http://blog.csdn.net/zhihui_520/article/details/51822336</a></li>
<li><a href="http://blog.csdn.net/u010694658/article/details/52689317" target="_blank" rel="external">http://blog.csdn.net/u010694658/article/details/52689317</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1354448-c373098272fca1e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1040&quot; alt=&quot;stackblur_default.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引入的库应为如下，将官方的额外扩展了，使其可以支持高斯模糊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;jp.wasabeef:glide-transformations:2.0.1&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="开源库使用" scheme="http://jingbin.me/tags/%E5%BC%80%E6%BA%90%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>收集“新奇的网站”</title>
    <link href="http://jingbin.me/2016/11/23/%E6%94%B6%E9%9B%86%E2%80%9C%E6%96%B0%E5%A5%87%E7%9A%84%E7%BD%91%E7%AB%99%E2%80%9D/"/>
    <id>http://jingbin.me/2016/11/23/收集“新奇的网站”/</id>
    <published>2016-11-23T14:36:23.000Z</published>
    <updated>2017-01-07T10:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="产品原型制作"><a href="#产品原型制作" class="headerlink" title="产品原型制作"></a>产品原型制作</h3><ul>
<li><a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch，最佳原型制作工具</a></li>
<li><a href="https://dribbble.com/designers" target="_blank" rel="external">Dribbble，养成一双发现并懂得美的眼睛(美图)</a></li>
<li><a href="http://www.calltoidea.com/" target="_blank" rel="external">新奇-Get quickly inspiration!（页面）</a></li>
<li><a href="https://pixabay.com/" target="_blank" rel="external">免费的高清图片</a></li>
<li><a href="https://dribbble.com/" target="_blank" rel="external">dribbble 全球最优质的设计作品聚集地</a></li>
</ul>
<h3 id="UI设计师推荐"><a href="#UI设计师推荐" class="headerlink" title="UI设计师推荐"></a>UI设计师推荐</h3><ul>
<li><a href="http://www.zcool.com.cn/" target="_blank" rel="external">站酷(ZCOOL)-设计师互动平台</a></li>
<li><a href="http://www.woofeng.cn/" target="_blank" rel="external">黄蜂网</a></li>
<li><a href="http://www.ui.cn/" target="_blank" rel="external">UI中国-专业界面交互平台</a></li>
<li><a href="https://www.behance.net/" target="_blank" rel="external">behance 展示和发现创意作品</a></li>
</ul>
<a id="more"></a>
<h3 id="颜色搭配及icon制作"><a href="#颜色搭配及icon制作" class="headerlink" title="颜色搭配及icon制作"></a>颜色搭配及icon制作</h3><ul>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">ColorHunt-色彩搭配</a></li>
<li><a href="https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html" target="_blank" rel="external">icon在线制作</a></li>
<li><a href="http://www.iconfont.cn/plus" target="_blank" rel="external">icon图标库</a></li>
<li><a href="https://android-material-icon-generator.bitdroid.de/" target="_blank" rel="external">MD的icon制作网站</a></li>
<li><a href="http://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="external">RGB颜色值转换成十六进制颜色码</a></li>
</ul>
<h3 id="GitHub美化"><a href="#GitHub美化" class="headerlink" title="GitHub美化"></a>GitHub美化</h3><ul>
<li><a href="http://shields.io/" target="_blank" rel="external">README的标签</a></li>
<li><a href="https://github.com/fehmicansaglam/progressed.io" target="_blank" rel="external">README的进度tag</a></li>
<li><a href="http://ezgif.com/" target="_blank" rel="external">mp4转gif</a></li>
<li><a href="http://sspai.com/27937" target="_blank" rel="external">带壳截图</a></li>
</ul>
<h3 id="移动应用分发"><a href="#移动应用分发" class="headerlink" title="移动应用分发"></a>移动应用分发</h3><ul>
<li><a href="http://fir.im/" target="_blank" rel="external">Fir.im</a></li>
<li><a href="http://developer.wandoujia.com/" target="_blank" rel="external">豌豆荚</a></li>
<li><a href="http://developer.android.com/distribute/tools/launch-checklist.html" target="_blank" rel="external">play store</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;产品原型制作&quot;&gt;&lt;a href=&quot;#产品原型制作&quot; class=&quot;headerlink&quot; title=&quot;产品原型制作&quot;&gt;&lt;/a&gt;产品原型制作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sketchapp.com/&quot;&gt;Sketch，最佳原型制作工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/designers&quot;&gt;Dribbble，养成一双发现并懂得美的眼睛(美图)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.calltoidea.com/&quot;&gt;新奇-Get quickly inspiration!（页面）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pixabay.com/&quot;&gt;免费的高清图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/&quot;&gt;dribbble 全球最优质的设计作品聚集地&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UI设计师推荐&quot;&gt;&lt;a href=&quot;#UI设计师推荐&quot; class=&quot;headerlink&quot; title=&quot;UI设计师推荐&quot;&gt;&lt;/a&gt;UI设计师推荐&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zcool.com.cn/&quot;&gt;站酷(ZCOOL)-设计师互动平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.woofeng.cn/&quot;&gt;黄蜂网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ui.cn/&quot;&gt;UI中国-专业界面交互平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.behance.net/&quot;&gt;behance 展示和发现创意作品&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="http://jingbin.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://jingbin.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="创意灵感" scheme="http://jingbin.me/tags/%E5%88%9B%E6%84%8F%E7%81%B5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>可能是讲解Android事件分发最好的文章</title>
    <link href="http://jingbin.me/2016/11/22/%E5%8F%AF%E8%83%BD%E6%98%AF%E8%AE%B2%E8%A7%A3Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%80%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>http://jingbin.me/2016/11/22/可能是讲解Android事件分发最好的文章/</id>
    <published>2016-11-22T14:37:52.000Z</published>
    <updated>2017-01-10T04:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是在简书上看到的一篇文章，感觉非常好，就转了过来，这是老外写的，这个作者翻译过来的。 综合之前在CSDN写过的一篇类似的文章[<a href="http://blog.csdn.net/jingbin_/article/details/52818301" target="_blank" rel="external">Android 简述事件分发机制</a>]，差不多这个知识点就清晰了。</p>
<blockquote>
<p>我几乎看过国内讲解Android事件分发的所有文章，但遗憾的是都没有这篇讲的好，原因有二：它阐明了具体的事件分发机制的设计意图，让人既知其然，又知其所以然；它没有贴源码，吓唬本宝宝。所以我决定将它翻译出来，造福广大Android开发者。原文请点击<a href="http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/" target="_blank" rel="external">这里</a></p>
</blockquote>
<a id="more"></a>
<p>有时，你必须要自己处理触摸事件（touch events）而不能依赖于有可用的onSomethingListener。我就遇到过这样的时候，当时我很想有一篇文章能简单地解释触摸事件是怎样在视图层次（view hierarchy）中传播的，从而可以将之作为进一步深入学习的起点。这篇博客是我的一次尝试，它看起来有点长，但这是因为我是按照触摸事件的传播过程一步一步来写的。</p>
<h2 id="一些假设"><a href="#一些假设" class="headerlink" title="一些假设"></a>一些假设</h2><p>我们只考虑最重要的四个触摸事件，即：<strong>DOWN,MOVE,UP和CANCEL</strong>。<strong>一个手势（gesture）</strong>是一个事件列，以一个DOWN事件开始（当用户触摸屏幕时产生），后跟0个或多个MOVE事件（当用户四处移动手指时产生），最后跟一个单独的UP或CANCEL事件（当用户手指离开屏幕或者系统告诉你手势（gesture）由于其他原因结束时产生）。当我们说到“<strong>手势剩余部分</strong>”时指的是手势后续的MOVE事件和最后的UP或CANCEL事件。</p>
<p>在这里我也不考虑多点触摸手势（我们只假设用一个手指）并且忽略多个MOVE事件可以被归为一组这一实际情况。最后，我们假设文中的view都没有注册onTouchListener。</p>
<p>我们将要讨论的视图层次是这样的：最外层是一个ViewGroup A，包含一个或多个子view（children），其中一个子view是ViewGroup B，ViewGroupB中又包含一个或多个子view，其中一个子view是 View C,C不是一个ViewGroup。这里我们忽略同层级view之间可能的交叉叠加。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1371984-8cbcd729711f25ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="android-touch.png"></p>
<p>假设用户首先触摸到的屏幕上的点是C上的某个点，该点被标记为触摸点（touch point），DOWN事件就在该点产生。然后用户移动手指并最后离开屏幕，此过程中手指是否离开C的区域无关紧要，关键是手势（gesture）是从哪里开始的。</p>
<h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><p>假设上面的A,B,C都没有覆写默认的事件传播行为，那么下面就是事件传播的过程：</p>
<ul>
<li>DOWN事件被传到C的onTouchEvent方法中，该方法返回false，表示“我不关心这个手势（gesture）”。</li>
<li>因此，DOWN事件被传到B的onTouchEvent方法中，该方法同样返回false，表示B也不关心这个手势。</li>
<li>同样，因为B不关心这个手势，DOWN事件被传到A的onTouchEvent方法中，该方法也返回false。</li>
</ul>
<p>由于没有view关心这个手势（gesture），它们将不再会从“手势剩余部分”中接收任何事件。</p>
<h2 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h2><p>现在，让我们假设C实际上是关心这个手势（gesture）的，原因可能是C被设置成可点击的（clickable）或者你覆写了C的onTouchEvent方法。</p>
<ul>
<li>DOWN事件被传递给C的onTouchEvent方法，该方法可以做任何它想做的事情，最后返回true。</li>
<li>因为C说它正在处理这个手势（gesture），则DOWN事件将不再被传递给B和A的onTouchEvent方法。</li>
<li>因为C说它正在处理这个手势（gesture），所以“手势剩余部分”的事件也将传递给C的onTouchEvent方法，此时该方法返回true或false都无关紧要了，但是为保持一致最好还是返回true。</li>
</ul>
<p><strong>个人理解</strong>：从这里可以看出，各个View的onTouchEvent方法对DOWN事件的处理，代表了该View对以此DOWN开始的整个手势（gesture）的处理意愿，返回true代表愿意处理该gesture，返回false代表不愿意处理该gesture。</p>
<h2 id="onInterceptTouchEvent"><a href="#onInterceptTouchEvent" class="headerlink" title="onInterceptTouchEvent"></a>onInterceptTouchEvent</h2><p>现在我们将讨论一个新的方法：onInterceptTouchEvent，它只存在于ViewGroup中，普通的View中没有这个方法。在任何一个view的onTouchEvent被调用之前，它的父辈们（ancestors）将先获得拦截这个事件的一次机会，换句话说，它们可以窃取该事件。在刚才的“处理事件”部分中，我们遗漏了这一过程，现在，让我们把它加上：</p>
<ul>
<li>DOWN事件被传给A的onInterceptTouchEvent，该方法返回false，表示它不想拦截。</li>
<li>DOWN又被传递给B的onInterceptTouchEvent，它也不想拦截，因此该方法也返回false。</li>
<li>现在，DOWN事件被传递到C的onTouchEvent方法，该方法返回true，因为它想处理以该事件为首的手势（gesture）。</li>
<li>现在，该手势的下一个事件MOVE到来了。这个MOVE事件再一次被传递给A的onInterceptTouchEvent方法，该方法再一次返回false，B也同样如此。</li>
<li>然后，MOVE事件被传递给C的onTouchEvent，就像在前一部分中一样。</li>
<li>“手势剩余部分”中其他事件的处理过程和上面一样，假如A和B的onInterceptTouchEvent方法继续返回false的话。</li>
</ul>
<p>这里有两点需要注意：</p>
<ul>
<li>虽然ViewGroup A和B的onInterceptTouchEvent方法对DOWN事件返回了false，后续的事件依然会传递给它们的onInterceptTouchEvent方法，这一点与onTouchEvent的行为是不一样的。</li>
<li>假如DOWN事件传给C的onTouchEvent方法时，它返回了false，DOWN事件会继续向上传递给B和A的onTouchEvent，即使它们在onInterceptTouchEvent方法中说它们不想拦截这个DOWN事件，但没办法，没有子View愿意处理该事件。</li>
</ul>
<p><strong>个人理解</strong>：感谢@编程世界的孩子 的提醒，由此可见，DOWN事件的处理实际上经历了一下一上两个过程，下是指A-&gt;B的onInterceptTouchEvent，上是指C-&gt;B-&gt;A的onTouchEvent，当然，任意一步的方法中返回true,都能阻止它继续传播。</p>
<h2 id="拦截事件"><a href="#拦截事件" class="headerlink" title="拦截事件"></a>拦截事件</h2><p>现在，让我们更进一步，假设B没有拦截DOWN事件，但它拦截了接下来的MOVE事件。原因可能是B是一个scrolling view。当用户仅仅在它的区域内点击（tap）时，被点击到的元素应当能处理该点击事件。但是当用户手指移动了一定的距离后，就不能再视该手势（gesture）为点击了——很明显，用户是想scroll。这就是为什么B要接管该手势（gesture）。</p>
<p>下面是事件被处理的顺序：</p>
<ul>
<li>DOWN事件被依次传到A和B的onInterceptTouchEvent方法中，它们都返回的false，因为它们目前还不想拦截。</li>
<li>DOWN事件传递到C的onTouchEvent方法，返回了true。</li>
<li>在后续到来MOVE事件时，A的onInterceptTouchEvent方法仍然返回false。</li>
<li>B的onInterceptTouchEvent方法收到了该MOVE事件，此时B注意到用户手指移动距离已经超过了一定的threshold（或者称为slop）。因此，B的onInterceptTouchEvent方法决定返回true，从而接管该手势（gesture）后续的处理。</li>
<li>然后，这个MOVE事件将会被系统变成一个CANCEL事件，这个CANCEL事件将会传递给C的onTouchEvent方法。</li>
<li>现在，又来了一个MOVE事件，它被传递给A的onInterceptTouchEvent方法，A还是不关心该事件，因此onInterceptTouchEvent方法继续返回false。</li>
<li>此时，该MOVE事件将不会再传递给B的onInterceptTouchEvent方法，该方法一旦返回一次true，就再也不会被调用了。事实上，该MOVE以及“手势剩余部分”都将传递给B的onTouchEvent方法（除非A决定拦截“手势剩余部分”）。</li>
<li><p>C再也不会收到该手势（gesture）产生的任何事件了。</p>
<p>下面的一些小事情可能会令你感到吃惊：</p>
</li>
<li><p>如果一个ViewGroup拦截了最初的DOWN事件，该事件仍然会传递到该ViewGroup的onTouchEvent方法中。</p>
</li>
<li>另一方面，如果ViewGroup拦截了一个半路的事件（比如，MOVE），这个事件将会被系统变成一个CANCEL事件，并传递给之前处理该手势（gesture）的子View，而且不会再传递（无论是被拦截的MOVE还是系统生成的CANCEL）给ViewGroup的onTouchEvent方法。只有再到来的事件才会传递到ViewGroup的onTouchEvent方法中。</li>
</ul>
<p>从此开始，你可以更进一步。比如对mouthful-method （实在不知道该怎么翻译啦！）requestDisallowInterceptTouchEvent,C可以用该方法阻止B窃取事件。如果你想更加疯狂一点，你可以在你自己的ViewGroup中直接覆写dispatchTouchEvent方法，并对传递进来的事件做任何你想做的处理。但这样的话你可能会破坏一些约定，所以应当小心。</p>
<p>文／milter（简书作者)<br>原文链接：<a href="http://www.jianshu.com/p/2be492c1df96" target="_blank" rel="external">http://www.jianshu.com/p/2be492c1df96</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是在简书上看到的一篇文章，感觉非常好，就转了过来，这是老外写的，这个作者翻译过来的。 综合之前在CSDN写过的一篇类似的文章[&lt;a href=&quot;http://blog.csdn.net/jingbin_/article/details/52818301&quot;&gt;Android 简述事件分发机制&lt;/a&gt;]，差不多这个知识点就清晰了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我几乎看过国内讲解Android事件分发的所有文章，但遗憾的是都没有这篇讲的好，原因有二：它阐明了具体的事件分发机制的设计意图，让人既知其然，又知其所以然；它没有贴源码，吓唬本宝宝。所以我决定将它翻译出来，造福广大Android开发者。原文请点击&lt;a href=&quot;http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="Android基础知识点" scheme="http://jingbin.me/tags/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Mac搭建Hexo博客流程记录，排雷完成</title>
    <link href="http://jingbin.me/2016/11/19/Mac%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95%EF%BC%8C%E6%8E%92%E9%9B%B7%E5%AE%8C%E6%88%90/"/>
    <id>http://jingbin.me/2016/11/19/Mac搭建Hexo博客流程记录，排雷完成/</id>
    <published>2016-11-18T19:02:13.000Z</published>
    <updated>2016-11-20T17:42:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过一天的辛苦作战，总算基础的东西出来了。踩了太多的坑，综合我踩坑的经过，明白到，选好一篇引导文很重要！有些步骤不要先做了，不然后面会把你坑的很惨..</p>
<h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>很多博客都已经详细讲述了Hexo博客框架的好处和怎么做，下面的<a href="#jump">推荐文章</a>里会给出链接。但有些过于复杂，让初次配置的人有点雨里雾里；有些又太简单，出了问题就会不知道怎么回事。下面是自己的搭建记录，及<a href="#ask">所遇问题的解决</a>。</p>
<p>在此感谢<a href="https://madongqiang2201.github.io/" target="_blank" rel="external">小马哥Mark</a>和 <a href="http://wingjay.com/" target="_blank" rel="external">wingjay</a>先前分享的教程，有些段落是从你们里搬运过来的，希望博主见谅，如有侵权，请联系我删除。</p>
<p>Ok，现在开始：</p>
<a id="more"></a>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>在不购买服务器的前提下，我们的网站需要挂在GitHub Pages上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。</p>
<ul>
<li>首先你需要拥有一个<a href="https://github.com/" target="_blank" rel="external">GitHub</a>账号。</li>
<li>然后进入<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，一步步做，完成后就能在浏览器打开<code>http://username.github.io</code>了。</li>
</ul>
<p>至此，我们已经利用GitHub Pages搭建好了个人博客雏形了。下面要做的，就是个性化了。</p>
<blockquote>
<p>注意：如果你<code>http://username.github.io</code>首页就要是博客首页的话，建议初次配置选择首页，就是<a href="http://jingbin.me">这样</a>。完成后可以把<code>index.html</code>给删了，因为到最后你发现那是没用的，它将会给你造成干扰。</p>
</blockquote>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">中文文档</a>或<a href="https://hexo.io/docs/" target="_blank" rel="external">英文文档</a>。完成该步后，你的电脑便拥有了Git、Node.js和Hexo。</p>
<h3 id="测试安装状态"><a href="#测试安装状态" class="headerlink" title="测试安装状态"></a>测试安装状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line"> v4.2.4</div><div class="line"></div><div class="line">$ npm -v</div><div class="line"><span class="number">2.14</span>.12</div><div class="line"></div><div class="line">$ hexo -v</div></pre></td></tr></table></figure>
<h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p>确定拥有了Git、Node.js和Hexo后，进行下一步：</p>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p> 新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<p>这样Hexo会在该文件夹创建本地博客所需的一切资源。这样本地博客就搭建好了，输入以下命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s --debug <span class="comment">// 启动本地hexo 服务器，默认localhost:4000可以访问，可以看到调试信息</span></div></pre></td></tr></table></figure>
<p>这样就开启了一个本地博客服务器，打开浏览器，在地址栏输入<code>localhost:4000</code>，就可以查看本地博客了，hexo默认生成了一片hello world博客。出现问题可以看terminal终端错误信息。按<code>control + c</code>关闭调试。</p>
<blockquote>
<p>注意：以上hexo开头的命令，执行目录必须是你创建的博客文件夹目录。使用hexo s 也可以，只是没有了调试信息。</p>
</blockquote>
<h3 id="同步Hexo博客到Github"><a href="#同步Hexo博客到Github" class="headerlink" title="同步Hexo博客到Github"></a>同步Hexo博客到Github</h3><p>现在你已经可以在本机查看你的博客了，但是要想让别人通过网络可以查看你的博客，还需要一步，那就是将你的博客发布到github仓库。在terminal终端，将当前目录切换到你的本地博客目录，执行以下命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>安装完成之后，打开本地博客目录的<code>_config.yml</code>文件，编辑其中的<code>deploy</code>节点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https:<span class="comment">//github.com/youlookwhat/youlookwhat.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：字段前需加空格，hexo有严格的格式规范。</p>
</blockquote>
<p>保存配置之后，你可以不着急传到仓库，先刷新本地博客，看是否还是原样，如有问题可以看到terminal终端上的错误信息，然后检查没问题为止。</p>
<p>确认无误之后，在本地博客目录执行以下命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean <span class="comment">// clean本地项目，防止缓存</span></div><div class="line">hexo g <span class="comment">// 全拼是：hexo generate，可以简写成 hexo g; 根据你编辑的md格式的博客，生成静态网页</span></div><div class="line">hexo d  <span class="comment">// 全拼是：hexo deploy，可以简写成 hexo d; 将本地博客发布到github</span></div></pre></td></tr></table></figure>
<p>然后，在浏览器地址栏输入<code>username.github.io</code>就可以访问你的博客了，别人也可以通过这个地址访问你的博客。如果错误请重复看以前流程，或参考其他文章，也可以<a href="#here">联系我</a>.</p>
<h2 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h2><ul>
<li><a href="http://theme-next.iissnan.com/getting-started.html#validate-next-theme" target="_blank" rel="external">Next主题</a></li>
</ul>
<p>Hexo主题非常多，可以参考<a href="https://hexo.io/themes/" target="_blank" rel="external">丰富多彩的Hexo主题</a>，本文选Next为主题，NexT主题是一套简约的主题，设置完成之后，就像我的博客现在的样子，里面有详细的配置说明，这里就不重述了。</p>
<p>配置后调试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<p>确认无误后上传：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：因为hexo有严格的格式规范，所以建议配置时及时调试页面。</p>
</blockquote>
<h2 id="优化环节"><a href="#优化环节" class="headerlink" title="优化环节"></a>优化环节</h2><ul>
<li>域名设置</li>
<li><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">fork me on github</a></li>
<li>配置SSH key</li>
<li>给博文添加tag和分类(<a href="http://theme-next.iissnan.com/theme-settings.html#author-sites" target="_blank" rel="external">主题</a>)</li>
<li>手动实现某条博文置顶</li>
</ul>
<h3 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h3><p>大家可以看：<a href="http://wingjay.com/2015/12/07/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%A4%A9%E4%B9%8B%E5%86%85%E6%90%AD%E5%BB%BA%E4%BB%A5%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%90%8D%E5%AD%97%E4%B8%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E5%BE%88cool%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">替换自己的域名</a> ,里面讲述的详细。</p>
<blockquote>
<p>注意：在<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>买了域名以后直接在里面配置，<a href="http://www.sudu.cn/service/detail/1/0/0/3/10036.html" target="_blank" rel="external">这里</a>只是参考用的。</p>
</blockquote>
<h3 id="其它四条"><a href="#其它四条" class="headerlink" title="其它四条"></a>其它四条</h3><p>大家可以看：<a href="https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">其他遗漏的点</a> </p>
<blockquote>
<p>注意：配置后进入调试模式测试一下，这样错了就可以马上更正。</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p> cd 到仓库所在文件夹目录下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo init       <span class="comment">//在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件</span></div><div class="line">hexo <span class="keyword">new</span> “my <span class="keyword">new</span> blog title”   <span class="comment">//新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span></div><div class="line">hexo s --debug    <span class="comment">// 启动本地hexo 服务器，默认localhost:4000可以访问</span></div><div class="line">hexo clean      <span class="comment">// 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存</span></div><div class="line">hexo generate   <span class="comment">// 可以简写成hexo g 根据markdown文件生成静态文件</span></div><div class="line">hexo deploy     <span class="comment">// 或者简写成hexo d 将本地修改，部署到远端</span></div><div class="line">hexo version    <span class="comment">// 显示hexo版本</span></div></pre></td></tr></table></figure>
<h2 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a><span id="jump">推荐文章</span></h2><ul>
<li><a href="https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">Mac搭建Hexo博客及NexT主题配置优化</a></li>
<li><a href="http://wingjay.com/2015/12/07/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%A4%A9%E4%B9%8B%E5%86%85%E6%90%AD%E5%BB%BA%E4%BB%A5%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%90%8D%E5%AD%97%E4%B8%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E5%BE%88cool%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">如何在一天之内搭建以你自己名字为域名又具备cool属性的个人博客</a></li>
<li><a href="http://www.jianshu.com/p/1cd86fac2585" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://www.arao.me/2015/hexo-next-theme-optimize-base/#为你的hexo网站NexT主题增加留言页" target="_blank" rel="external">动动手指，NexT主题与Hexo更搭哦（基础篇）</a></li>
</ul>
<h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a><span id="ask">所遇问题</span></h2><ul>
<li>按照步骤来，及时调试，确认无误后再执行下一步。有一句话说的好，步子跨大了容易扯着蛋。</li>
<li>建议将基础的先搭建出来，主题细节可以之后再慢慢配置。</li>
<li>编辑站点<code>_config.yml</code>文件其中的<code>deploy</code>节点时，注意<code>repo</code>的值。</li>
<li>替换域名时：<ul>
<li>直接在万维网设置解析方式；</li>
<li>在仓库Setting的要设置跳转链接；</li>
<li>CNAME会被覆盖，安装CNAME工具<a href="https://github.com/leecrossley/hexo-generator-cname" target="_blank" rel="external">hexo-generator-cname</a></li>
</ul>
</li>
<li>为博客文章添加阅读量统计功能，参照<a href="http://www.tuicool.com/articles/EbquI3B" target="_blank" rel="external">这里</a>，注意顺序，我在其中被坑过。</li>
<li>设置网站图标时，就是上传“.ico”文件时，确认成功后浏览器会有缓存，显示不出来，关掉浏览器清除缓存就好了（可放在最后）。</li>
<li>设置代码高亮主题测试时没事，上传后会有延迟，等等就好了（本人这样）。</li>
<li>设置搜索栏，进入<a href="https://swiftype.com/users/sign_up" target="_blank" rel="external">swiftype官网</a>，注册不上，应该收费了- -.</li>
<li>设置侧边栏社交链接时，<code>social:</code><strong>下面字段前要有两个空格，切记</strong>。</li>
</ul>
<h2 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a>相关网址</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a>、<a href="http://youlookwhat.duoshuo.com/admin/" target="_blank" rel="external">多说</a>、<a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>、<a href="https://leancloud.cn/app.html#/general" target="_blank" rel="external">leancloud</a>、<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fhome.console.aliyun.com%2Fnew#/" target="_blank" rel="external">阿里云</a>、<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">fork me</a>、<a href="http://www.ico.la/" target="_blank" rel="external">ico制作</a></p>
<h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a><span id="here">联系我</span></h2><ul>
<li><a href="http://www.jianshu.com/users/e43c6e979831/latest_articles" target="_blank" rel="external">我的简书</a></li>
<li><a href="http://blog.csdn.net/jingbin_" target="_blank" rel="external">我的CSDN</a></li>
<li><a href="https://github.com/youlookwhat" target="_blank" rel="external">我的个人博客</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一天的辛苦作战，总算基础的东西出来了。踩了太多的坑，综合我踩坑的经过，明白到，选好一篇引导文很重要！有些步骤不要先做了，不然后面会把你坑的很惨..&lt;/p&gt;
&lt;h2 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h2&gt;&lt;p&gt;很多博客都已经详细讲述了Hexo博客框架的好处和怎么做，下面的&lt;a href=&quot;#jump&quot;&gt;推荐文章&lt;/a&gt;里会给出链接。但有些过于复杂，让初次配置的人有点雨里雾里；有些又太简单，出了问题就会不知道怎么回事。下面是自己的搭建记录，及&lt;a href=&quot;#ask&quot;&gt;所遇问题的解决&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在此感谢&lt;a href=&quot;https://madongqiang2201.github.io/&quot;&gt;小马哥Mark&lt;/a&gt;和 &lt;a href=&quot;http://wingjay.com/&quot;&gt;wingjay&lt;/a&gt;先前分享的教程，有些段落是从你们里搬运过来的，希望博主见谅，如有侵权，请联系我删除。&lt;/p&gt;
&lt;p&gt;Ok，现在开始：&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://jingbin.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://jingbin.me/tags/hexo/"/>
    
  </entry>
  
</feed>
