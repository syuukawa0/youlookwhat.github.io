<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jing Bin&#39;blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jingbin.me/"/>
  <updated>2016-11-25T15:28:27.000Z</updated>
  <id>http://jingbin.me/</id>
  
  <author>
    <name>肖子理</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开发中所遇问题归纳</title>
    <link href="http://jingbin.me/2016/11/23/%E5%BC%80%E5%8F%91%E4%B8%AD%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E5%BD%92%E7%BA%B3/"/>
    <id>http://jingbin.me/2016/11/23/开发中所遇问题归纳/</id>
    <published>2016-11-23T14:36:23.000Z</published>
    <updated>2016-11-25T15:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="issues"><a href="#issues" class="headerlink" title="issues"></a>issues</h1><ul>
<li><p>databinding</p>
<ul>
<li><p><code>layout</code>节点写了<code>xmlns:android=&quot;http://schemas.android.com/apk/res/android</code>后，子布局不能写</p>
</li>
<li><p><code>include</code>子布局时子布局根节点也要声明id，不然引用不到子布局id</p>
</li>
<li><p><code>databinding</code>绑定子布局，先绑定后父布局再<code>addView()</code></p>
</li>
<li><p>注入<code>databinding</code>后，AndriodStudio包结构变乱。解决：Android Studio2.2会出现此情况，升级到2.2.2就可以了。</p>
</li>
<li><p><code>databinding</code>绑定<code>bean</code>时，里面的子类也需要继承<code>BaseObservable</code>,否则会报错。</p>
</li>
<li><p><code>recyclerview</code>的<code>viewhodler</code>里，获得绑定<code>view</code>的<code>databinding</code>:<code>DataBindingUtil.getBinding(this.itemView);</code>。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>兼容5.0以下水波纹效果：新建drawable-21文件，里面放ripple文件，其他正常，<a href="http://blog.csdn.net/u012156512/article/details/50585193" target="_blank" rel="external">详情</a>。</li>
<li><code>listview</code>某图标显示亮或不亮的问题：先全部不亮，再根据条件变亮。</li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;issues&quot;&gt;&lt;a href=&quot;#issues&quot; class=&quot;headerlink&quot; title=&quot;issues&quot;&gt;&lt;/a&gt;issues&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;databinding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;layout&lt;/code&gt;节点写了&lt;code&gt;xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&lt;/code&gt;后，子布局不能写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;include&lt;/code&gt;子布局时子布局根节点也要声明id，不然引用不到子布局id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;databinding&lt;/code&gt;绑定子布局，先绑定后父布局再&lt;code&gt;addView()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注入&lt;code&gt;databinding&lt;/code&gt;后，AndriodStudio包结构变乱。解决：Android Studio2.2会出现此情况，升级到2.2.2就可以了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;databinding&lt;/code&gt;绑定&lt;code&gt;bean&lt;/code&gt;时，里面的子类也需要继承&lt;code&gt;BaseObservable&lt;/code&gt;,否则会报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;recyclerview&lt;/code&gt;的&lt;code&gt;viewhodler&lt;/code&gt;里，获得绑定&lt;code&gt;view&lt;/code&gt;的&lt;code&gt;databinding&lt;/code&gt;:&lt;code&gt;DataBindingUtil.getBinding(this.itemView);&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;兼容5.0以下水波纹效果：新建drawable-21文件，里面放ripple文件，其他正常，&lt;a href=&quot;http://blog.csdn.net/u012156512/article/details/50585193&quot;&gt;详情&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listview&lt;/code&gt;某图标显示亮或不亮的问题：先全部不亮，再根据条件变亮。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="yunyue" scheme="http://jingbin.me/tags/yunyue/"/>
    
  </entry>
  
  <entry>
    <title>收集“新奇的网站”</title>
    <link href="http://jingbin.me/2016/11/23/%E6%94%B6%E9%9B%86%E2%80%9C%E6%96%B0%E5%A5%87%E7%9A%84%E7%BD%91%E7%AB%99%E2%80%9D/"/>
    <id>http://jingbin.me/2016/11/23/收集“新奇的网站”/</id>
    <published>2016-11-23T14:36:23.000Z</published>
    <updated>2016-11-24T02:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="产品原型制作"><a href="#产品原型制作" class="headerlink" title="产品原型制作"></a>产品原型制作</h3><ul>
<li><a href="https://www.sketchapp.com/" target="_blank" rel="external">Sketch，最佳原型制作工具</a></li>
<li><a href="https://dribbble.com/designers" target="_blank" rel="external">Dribbble，养成一双发现并懂得美的眼睛(美图)</a></li>
<li><a href="http://www.calltoidea.com/" target="_blank" rel="external">新奇-Get quickly inspiration!（页面）</a></li>
<li><a href="https://pixabay.com/" target="_blank" rel="external">免费的高清图片</a></li>
</ul>
<h3 id="UI设计师推荐"><a href="#UI设计师推荐" class="headerlink" title="UI设计师推荐"></a>UI设计师推荐</h3><ul>
<li><a href="http://www.zcool.com.cn/" target="_blank" rel="external">站酷(ZCOOL)-设计师互动平台</a></li>
<li><a href="http://www.woofeng.cn/" target="_blank" rel="external">黄蜂网</a></li>
<li><a href="http://www.ui.cn/" target="_blank" rel="external">UI中国-专业界面交互平台</a></li>
<li><a href="https://www.behance.net/" target="_blank" rel="external">behance 展示和发现创意作品</a></li>
</ul>
<h3 id="颜色搭配及icon制作"><a href="#颜色搭配及icon制作" class="headerlink" title="颜色搭配及icon制作"></a>颜色搭配及icon制作</h3><ul>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">ColorHunt-色彩搭配</a></li>
<li><a href="https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html" target="_blank" rel="external">icon在线制作</a></li>
<li><a href="http://www.iconfont.cn/plus" target="_blank" rel="external">icon图标库</a></li>
<li><a href="http://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="external">RGB颜色值转换成十六进制颜色码</a></li>
</ul>
<a id="more"></a>
<h3 id="移动应用分发"><a href="#移动应用分发" class="headerlink" title="移动应用分发"></a>移动应用分发</h3><ul>
<li><a href="http://fir.im/" target="_blank" rel="external">Fir.im</a></li>
<li><a href="http://developer.wandoujia.com/" target="_blank" rel="external">豌豆荚</a></li>
<li><a href="http://developer.android.com/distribute/tools/launch-checklist.html" target="_blank" rel="external">play store</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;产品原型制作&quot;&gt;&lt;a href=&quot;#产品原型制作&quot; class=&quot;headerlink&quot; title=&quot;产品原型制作&quot;&gt;&lt;/a&gt;产品原型制作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sketchapp.com/&quot;&gt;Sketch，最佳原型制作工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/designers&quot;&gt;Dribbble，养成一双发现并懂得美的眼睛(美图)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.calltoidea.com/&quot;&gt;新奇-Get quickly inspiration!（页面）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pixabay.com/&quot;&gt;免费的高清图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UI设计师推荐&quot;&gt;&lt;a href=&quot;#UI设计师推荐&quot; class=&quot;headerlink&quot; title=&quot;UI设计师推荐&quot;&gt;&lt;/a&gt;UI设计师推荐&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zcool.com.cn/&quot;&gt;站酷(ZCOOL)-设计师互动平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.woofeng.cn/&quot;&gt;黄蜂网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ui.cn/&quot;&gt;UI中国-专业界面交互平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.behance.net/&quot;&gt;behance 展示和发现创意作品&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;颜色搭配及icon制作&quot;&gt;&lt;a href=&quot;#颜色搭配及icon制作&quot; class=&quot;headerlink&quot; title=&quot;颜色搭配及icon制作&quot;&gt;&lt;/a&gt;颜色搭配及icon制作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.colorhunt.co/&quot;&gt;ColorHunt-色彩搭配&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://romannurik.github.io/AndroidAssetStudio/icons-launcher.html&quot;&gt;icon在线制作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iconfont.cn/plus&quot;&gt;icon图标库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sioe.cn/yingyong/yanse-rgb-16/&quot;&gt;RGB颜色值转换成十六进制颜色码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="http://jingbin.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://jingbin.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="创意灵感" scheme="http://jingbin.me/tags/%E5%88%9B%E6%84%8F%E7%81%B5%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>可能是讲解Android事件分发最好的文章</title>
    <link href="http://jingbin.me/2016/11/22/%E5%8F%AF%E8%83%BD%E6%98%AF%E8%AE%B2%E8%A7%A3Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%80%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>http://jingbin.me/2016/11/22/可能是讲解Android事件分发最好的文章/</id>
    <published>2016-11-22T14:37:52.000Z</published>
    <updated>2016-11-22T15:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是在简书上看到的一篇文章，感觉非常好，就转了过来，这是老外写的，这个作者翻译过来的。 综合之前在CSDN写过的一篇类似的文章[<a href="http://blog.csdn.net/jingbin_/article/details/52818301" target="_blank" rel="external">Android 简述事件分发机制</a>]，差不多这个知识点就清晰了。</p>
<blockquote>
<p>我几乎看过国内讲解Android事件分发的所有文章，但遗憾的是都没有这篇讲的好，原因有二：它阐明了具体的事件分发机制的设计意图，让人既知其然，又知其所以然；它没有贴源码，吓唬本宝宝。所以我决定将它翻译出来，造福广大Android开发者。原文请点击<a href="http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/" target="_blank" rel="external">这里</a></p>
</blockquote>
<p>有时，你必须要自己处理触摸事件（touch events）而不能依赖于有可用的onSomethingListener。我就遇到过这样的时候，当时我很想有一篇文章能简单地解释触摸事件是怎样在视图层次（view hierarchy）中传播的，从而可以将之作为进一步深入学习的起点。这篇博客是我的一次尝试，它看起来有点长，但这是因为我是按照触摸事件的传播过程一步一步来写的。</p>
<h2 id="一些假设"><a href="#一些假设" class="headerlink" title="一些假设"></a>一些假设</h2><p>我们只考虑最重要的四个触摸事件，即：<strong>DOWN,MOVE,UP和CANCEL</strong>。<strong>一个手势（gesture）</strong>是一个事件列，以一个DOWN事件开始（当用户触摸屏幕时产生），后跟0个或多个MOVE事件（当用户四处移动手指时产生），最后跟一个单独的UP或CANCEL事件（当用户手指离开屏幕或者系统告诉你手势（gesture）由于其他原因结束时产生）。当我们说到“<strong>手势剩余部分</strong>”时指的是手势后续的MOVE事件和最后的UP或CANCEL事件。</p>
<a id="more"></a>
<p>在这里我也不考虑多点触摸手势（我们只假设用一个手指）并且忽略多个MOVE事件可以被归为一组这一实际情况。最后，我们假设文中的view都没有注册onTouchListener。</p>
<p>我们将要讨论的视图层次是这样的：最外层是一个ViewGroup A，包含一个或多个子view（children），其中一个子view是ViewGroup B，ViewGroupB中又包含一个或多个子view，其中一个子view是 View C,C不是一个ViewGroup。这里我们忽略同层级view之间可能的交叉叠加。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1371984-8cbcd729711f25ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="android-touch.png"></p>
<p>假设用户首先触摸到的屏幕上的点是C上的某个点，该点被标记为触摸点（touch point），DOWN事件就在该点产生。然后用户移动手指并最后离开屏幕，此过程中手指是否离开C的区域无关紧要，关键是手势（gesture）是从哪里开始的。</p>
<h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><p>假设上面的A,B,C都没有覆写默认的事件传播行为，那么下面就是事件传播的过程：</p>
<ul>
<li>DOWN事件被传到C的onTouchEvent方法中，该方法返回false，表示“我不关心这个手势（gesture）”。</li>
<li>因此，DOWN事件被传到B的onTouchEvent方法中，该方法同样返回false，表示B也不关心这个手势。</li>
<li>同样，因为B不关心这个手势，DOWN事件被传到A的onTouchEvent方法中，该方法也返回false。</li>
</ul>
<p>由于没有view关心这个手势（gesture），它们将不再会从“手势剩余部分”中接收任何事件。</p>
<h2 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h2><p>现在，让我们假设C实际上是关心这个手势（gesture）的，原因可能是C被设置成可点击的（clickable）或者你覆写了C的onTouchEvent方法。</p>
<ul>
<li>DOWN事件被传递给C的onTouchEvent方法，该方法可以做任何它想做的事情，最后返回true。</li>
<li>因为C说它正在处理这个手势（gesture），则DOWN事件将不再被传递给B和A的onTouchEvent方法。</li>
<li>因为C说它正在处理这个手势（gesture），所以“手势剩余部分”的事件也将传递给C的onTouchEvent方法，此时该方法返回true或false都无关紧要了，但是为保持一致最好还是返回true。</li>
</ul>
<p><strong>个人理解</strong>：从这里可以看出，各个View的onTouchEvent方法对DOWN事件的处理，代表了该View对以此DOWN开始的整个手势（gesture）的处理意愿，返回true代表愿意处理该gesture，返回false代表不愿意处理该gesture。</p>
<h2 id="onInterceptTouchEvent"><a href="#onInterceptTouchEvent" class="headerlink" title="onInterceptTouchEvent"></a>onInterceptTouchEvent</h2><p>现在我们将讨论一个新的方法：onInterceptTouchEvent，它只存在于ViewGroup中，普通的View中没有这个方法。在任何一个view的onTouchEvent被调用之前，它的父辈们（ancestors）将先获得拦截这个事件的一次机会，换句话说，它们可以窃取该事件。在刚才的“处理事件”部分中，我们遗漏了这一过程，现在，让我们把它加上：</p>
<ul>
<li>DOWN事件被传给A的onInterceptTouchEvent，该方法返回false，表示它不想拦截。</li>
<li>DOWN又被传递给B的onInterceptTouchEvent，它也不想拦截，因此该方法也返回false。</li>
<li>现在，DOWN事件被传递到C的onTouchEvent方法，该方法返回true，因为它想处理以该事件为首的手势（gesture）。</li>
<li>现在，该手势的下一个事件MOVE到来了。这个MOVE事件再一次被传递给A的onInterceptTouchEvent方法，该方法再一次返回false，B也同样如此。</li>
<li>然后，MOVE事件被传递给C的onTouchEvent，就像在前一部分中一样。</li>
<li>“手势剩余部分”中其他事件的处理过程和上面一样，假如A和B的onInterceptTouchEvent方法继续返回false的话。</li>
</ul>
<p>这里有两点需要注意：</p>
<ul>
<li>虽然ViewGroup A和B的onInterceptTouchEvent方法对DOWN事件返回了false，后续的事件依然会传递给它们的onInterceptTouchEvent方法，这一点与onTouchEvent的行为是不一样的。</li>
<li>假如DOWN事件传给C的onTouchEvent方法时，它返回了false，DOWN事件会继续向上传递给B和A的onTouchEvent，即使它们在onInterceptTouchEvent方法中说它们不想拦截这个DOWN事件，但没办法，没有子View愿意处理该事件。</li>
</ul>
<p><strong>个人理解</strong>：感谢@编程世界的孩子 的提醒，由此可见，DOWN事件的处理实际上经历了一下一上两个过程，下是指A-&gt;B的onInterceptTouchEvent，上是指C-&gt;B-&gt;A的onTouchEvent，当然，任意一步的方法中返回true,都能阻止它继续传播。</p>
<h2 id="拦截事件"><a href="#拦截事件" class="headerlink" title="拦截事件"></a>拦截事件</h2><p>现在，让我们更进一步，假设B没有拦截DOWN事件，但它拦截了接下来的MOVE事件。原因可能是B是一个scrolling view。当用户仅仅在它的区域内点击（tap）时，被点击到的元素应当能处理该点击事件。但是当用户手指移动了一定的距离后，就不能再视该手势（gesture）为点击了——很明显，用户是想scroll。这就是为什么B要接管该手势（gesture）。</p>
<p>下面是事件被处理的顺序：</p>
<ul>
<li>DOWN事件被依次传到A和B的onInterceptTouchEvent方法中，它们都返回的false，因为它们目前还不想拦截。</li>
<li>DOWN事件传递到C的onTouchEvent方法，返回了true。</li>
<li>在后续到来MOVE事件时，A的onInterceptTouchEvent方法仍然返回false。</li>
<li>B的onInterceptTouchEvent方法收到了该MOVE事件，此时B注意到用户手指移动距离已经超过了一定的threshold（或者称为slop）。因此，B的onInterceptTouchEvent方法决定返回true，从而接管该手势（gesture）后续的处理。</li>
<li>然后，这个MOVE事件将会被系统变成一个CANCEL事件，这个CANCEL事件将会传递给C的onTouchEvent方法。</li>
<li>现在，又来了一个MOVE事件，它被传递给A的onInterceptTouchEvent方法，A还是不关心该事件，因此onInterceptTouchEvent方法继续返回false。</li>
<li>此时，该MOVE事件将不会再传递给B的onInterceptTouchEvent方法，该方法一旦返回一次true，就再也不会被调用了。事实上，该MOVE以及“手势剩余部分”都将传递给B的onTouchEvent方法（除非A决定拦截“手势剩余部分”）。</li>
<li><p>C再也不会收到该手势（gesture）产生的任何事件了。</p>
<p>下面的一些小事情可能会令你感到吃惊：</p>
</li>
<li><p>如果一个ViewGroup拦截了最初的DOWN事件，该事件仍然会传递到该ViewGroup的onTouchEvent方法中。</p>
</li>
<li>另一方面，如果ViewGroup拦截了一个半路的事件（比如，MOVE），这个事件将会被系统变成一个CANCEL事件，并传递给之前处理该手势（gesture）的子View，而且不会再传递（无论是被拦截的MOVE还是系统生成的CANCEL）给ViewGroup的onTouchEvent方法。只有再到来的事件才会传递到ViewGroup的onTouchEvent方法中。</li>
</ul>
<p>从此开始，你可以更进一步。比如对mouthful-method （实在不知道该怎么翻译啦！）requestDisallowInterceptTouchEvent,C可以用该方法阻止B窃取事件。如果你想更加疯狂一点，你可以在你自己的ViewGroup中直接覆写dispatchTouchEvent方法，并对传递进来的事件做任何你想做的处理。但这样的话你可能会破坏一些约定，所以应当小心。</p>
<p>文／milter（简书作者)<br>原文链接：<a href="http://www.jianshu.com/p/2be492c1df96" target="_blank" rel="external">http://www.jianshu.com/p/2be492c1df96</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是在简书上看到的一篇文章，感觉非常好，就转了过来，这是老外写的，这个作者翻译过来的。 综合之前在CSDN写过的一篇类似的文章[&lt;a href=&quot;http://blog.csdn.net/jingbin_/article/details/52818301&quot;&gt;Android 简述事件分发机制&lt;/a&gt;]，差不多这个知识点就清晰了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我几乎看过国内讲解Android事件分发的所有文章，但遗憾的是都没有这篇讲的好，原因有二：它阐明了具体的事件分发机制的设计意图，让人既知其然，又知其所以然；它没有贴源码，吓唬本宝宝。所以我决定将它翻译出来，造福广大Android开发者。原文请点击&lt;a href=&quot;http://balpha.de/2013/07/android-development-what-i-wish-i-had-known-earlier/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时，你必须要自己处理触摸事件（touch events）而不能依赖于有可用的onSomethingListener。我就遇到过这样的时候，当时我很想有一篇文章能简单地解释触摸事件是怎样在视图层次（view hierarchy）中传播的，从而可以将之作为进一步深入学习的起点。这篇博客是我的一次尝试，它看起来有点长，但这是因为我是按照触摸事件的传播过程一步一步来写的。&lt;/p&gt;
&lt;h2 id=&quot;一些假设&quot;&gt;&lt;a href=&quot;#一些假设&quot; class=&quot;headerlink&quot; title=&quot;一些假设&quot;&gt;&lt;/a&gt;一些假设&lt;/h2&gt;&lt;p&gt;我们只考虑最重要的四个触摸事件，即：&lt;strong&gt;DOWN,MOVE,UP和CANCEL&lt;/strong&gt;。&lt;strong&gt;一个手势（gesture）&lt;/strong&gt;是一个事件列，以一个DOWN事件开始（当用户触摸屏幕时产生），后跟0个或多个MOVE事件（当用户四处移动手指时产生），最后跟一个单独的UP或CANCEL事件（当用户手指离开屏幕或者系统告诉你手势（gesture）由于其他原因结束时产生）。当我们说到“&lt;strong&gt;手势剩余部分&lt;/strong&gt;”时指的是手势后续的MOVE事件和最后的UP或CANCEL事件。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jingbin.me/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jingbin.me/tags/Android/"/>
    
      <category term="Android基础知识点" scheme="http://jingbin.me/tags/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Mac搭建Hexo博客流程记录，排雷完成</title>
    <link href="http://jingbin.me/2016/11/19/Mac%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95%EF%BC%8C%E6%8E%92%E9%9B%B7%E5%AE%8C%E6%88%90/"/>
    <id>http://jingbin.me/2016/11/19/Mac搭建Hexo博客流程记录，排雷完成/</id>
    <published>2016-11-18T19:02:13.000Z</published>
    <updated>2016-11-20T17:42:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过一天的辛苦作战，总算基础的东西出来了。踩了太多的坑，综合我踩坑的经过，明白到，选好一篇引导文很重要！有些步骤不要先做了，不然后面会把你坑的很惨..</p>
<h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>很多博客都已经详细讲述了Hexo博客框架的好处和怎么做，下面的<a href="#jump">推荐文章</a>里会给出链接。但有些过于复杂，让初次配置的人有点雨里雾里；有些又太简单，出了问题就会不知道怎么回事。下面是自己的搭建记录，及<a href="#ask">所遇问题的解决</a>。</p>
<p>在此感谢<a href="https://madongqiang2201.github.io/" target="_blank" rel="external">小马哥Mark</a>和 <a href="http://wingjay.com/" target="_blank" rel="external">wingjay</a>先前分享的教程，有些段落是从你们里搬运过来的，希望博主见谅，如有侵权，请联系我删除。</p>
<p>Ok，现在开始：</p>
<a id="more"></a>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>在不购买服务器的前提下，我们的网站需要挂在GitHub Pages上。GitHub Pages是面向用户、组织和项目开放的公共静态页面搭建托管服务，可用于搭建个人博客。</p>
<ul>
<li>首先你需要拥有一个<a href="https://github.com/" target="_blank" rel="external">GitHub</a>账号。</li>
<li>然后进入<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，一步步做，完成后就能在浏览器打开<code>http://username.github.io</code>了。</li>
</ul>
<p>至此，我们已经利用GitHub Pages搭建好了个人博客雏形了。下面要做的，就是个性化了。</p>
<blockquote>
<p>注意：如果你<code>http://username.github.io</code>首页就要是博客首页的话，建议初次配置选择首页，就是<a href="http://jingbin.me">这样</a>。完成后可以把<code>index.html</code>给删了，因为到最后你发现那是没用的，它将会给你造成干扰。</p>
</blockquote>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>参考<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">中文文档</a>或<a href="https://hexo.io/docs/" target="_blank" rel="external">英文文档</a>。完成该步后，你的电脑便拥有了Git、Node.js和Hexo。</p>
<h3 id="测试安装状态"><a href="#测试安装状态" class="headerlink" title="测试安装状态"></a>测试安装状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line"> v4.2.4</div><div class="line"></div><div class="line">$ npm -v</div><div class="line"><span class="number">2.14</span>.12</div><div class="line"></div><div class="line">$ hexo -v</div></pre></td></tr></table></figure>
<h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p>确定拥有了Git、Node.js和Hexo后，进行下一步：</p>
<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p> 新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<p>这样Hexo会在该文件夹创建本地博客所需的一切资源。这样本地博客就搭建好了，输入以下命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s --debug <span class="comment">// 启动本地hexo 服务器，默认localhost:4000可以访问，可以看到调试信息</span></div></pre></td></tr></table></figure>
<p>这样就开启了一个本地博客服务器，打开浏览器，在地址栏输入<code>localhost:4000</code>，就可以查看本地博客了，hexo默认生成了一片hello world博客。出现问题可以看terminal终端错误信息。按<code>control + c</code>关闭调试。</p>
<blockquote>
<p>注意：以上hexo开头的命令，执行目录必须是你创建的博客文件夹目录。使用hexo s 也可以，只是没有了调试信息。</p>
</blockquote>
<h3 id="同步Hexo博客到Github"><a href="#同步Hexo博客到Github" class="headerlink" title="同步Hexo博客到Github"></a>同步Hexo博客到Github</h3><p>现在你已经可以在本机查看你的博客了，但是要想让别人通过网络可以查看你的博客，还需要一步，那就是将你的博客发布到github仓库。在terminal终端，将当前目录切换到你的本地博客目录，执行以下命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>安装完成之后，打开本地博客目录的<code>_config.yml</code>文件，编辑其中的<code>deploy</code>节点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https:<span class="comment">//github.com/youlookwhat/youlookwhat.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：字段前需加空格，hexo有严格的格式规范。</p>
</blockquote>
<p>保存配置之后，你可以不着急传到仓库，先刷新本地博客，看是否还是原样，如有问题可以看到terminal终端上的错误信息，然后检查没问题为止。</p>
<p>确认无误之后，在本地博客目录执行以下命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean <span class="comment">// clean本地项目，防止缓存</span></div><div class="line">hexo g <span class="comment">// 全拼是：hexo generate，可以简写成 hexo g; 根据你编辑的md格式的博客，生成静态网页</span></div><div class="line">hexo d  <span class="comment">// 全拼是：hexo deploy，可以简写成 hexo d; 将本地博客发布到github</span></div></pre></td></tr></table></figure>
<p>然后，在浏览器地址栏输入<code>username.github.io</code>就可以访问你的博客了，别人也可以通过这个地址访问你的博客。如果错误请重复看以前流程，或参考其他文章，也可以<a href="#here">联系我</a>.</p>
<h2 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h2><ul>
<li><a href="http://theme-next.iissnan.com/getting-started.html#validate-next-theme" target="_blank" rel="external">Next主题</a></li>
</ul>
<p>Hexo主题非常多，可以参考<a href="https://hexo.io/themes/" target="_blank" rel="external">丰富多彩的Hexo主题</a>，本文选Next为主题，NexT主题是一套简约的主题，设置完成之后，就像我的博客现在的样子，里面有详细的配置说明，这里就不重述了。</p>
<p>配置后调试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<p>确认无误后上传：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：因为hexo有严格的格式规范，所以建议配置时及时调试页面。</p>
</blockquote>
<h2 id="优化环节"><a href="#优化环节" class="headerlink" title="优化环节"></a>优化环节</h2><ul>
<li>域名设置</li>
<li><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">fork me on github</a></li>
<li>配置SSH key</li>
<li>给博文添加tag和分类(<a href="http://theme-next.iissnan.com/theme-settings.html#author-sites" target="_blank" rel="external">主题</a>)</li>
<li>手动实现某条博文置顶</li>
</ul>
<h3 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h3><p>大家可以看：<a href="http://wingjay.com/2015/12/07/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%A4%A9%E4%B9%8B%E5%86%85%E6%90%AD%E5%BB%BA%E4%BB%A5%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%90%8D%E5%AD%97%E4%B8%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E5%BE%88cool%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">替换自己的域名</a> ,里面讲述的详细。</p>
<blockquote>
<p>注意：在<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>买了域名以后直接在里面配置，<a href="http://www.sudu.cn/service/detail/1/0/0/3/10036.html" target="_blank" rel="external">这里</a>只是参考用的。</p>
</blockquote>
<h3 id="其它四条"><a href="#其它四条" class="headerlink" title="其它四条"></a>其它四条</h3><p>大家可以看：<a href="https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">其他遗漏的点</a> </p>
<blockquote>
<p>注意：配置后进入调试模式测试一下，这样错了就可以马上更正。</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p> cd 到仓库所在文件夹目录下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo init       <span class="comment">//在指定目录执行该命令，会将当前目录初始化为hexo站点，生成hexo站点所需的一切文件</span></div><div class="line">hexo <span class="keyword">new</span> “my <span class="keyword">new</span> blog title”   <span class="comment">//新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span></div><div class="line">hexo s --debug    <span class="comment">// 启动本地hexo 服务器，默认localhost:4000可以访问</span></div><div class="line">hexo clean      <span class="comment">// 清除缓存，如果对本地文件做了修改，同步到远程验证修改的效果之前，先clean，清除缓存</span></div><div class="line">hexo generate   <span class="comment">// 可以简写成hexo g 根据markdown文件生成静态文件</span></div><div class="line">hexo deploy     <span class="comment">// 或者简写成hexo d 将本地修改，部署到远端</span></div><div class="line">hexo version    <span class="comment">// 显示hexo版本</span></div></pre></td></tr></table></figure>
<h2 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a><span id="jump">推荐文章</span></h2><ul>
<li><a href="https://madongqiang2201.github.io/2016/07/21/Mac%E4%B8%8BHexo%EF%BC%8Bgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">Mac搭建Hexo博客及NexT主题配置优化</a></li>
<li><a href="http://wingjay.com/2015/12/07/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%A4%A9%E4%B9%8B%E5%86%85%E6%90%AD%E5%BB%BA%E4%BB%A5%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%90%8D%E5%AD%97%E4%B8%BA%E5%9F%9F%E5%90%8D%E7%9A%84%E5%BE%88cool%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">如何在一天之内搭建以你自己名字为域名又具备cool属性的个人博客</a></li>
<li><a href="http://www.jianshu.com/p/1cd86fac2585" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://www.arao.me/2015/hexo-next-theme-optimize-base/#为你的hexo网站NexT主题增加留言页" target="_blank" rel="external">动动手指，NexT主题与Hexo更搭哦（基础篇）</a></li>
</ul>
<h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a><span id="ask">所遇问题</span></h2><ul>
<li>按照步骤来，及时调试，确认无误后再执行下一步。有一句话说的好，步子跨大了容易扯着蛋。</li>
<li>建议将基础的先搭建出来，主题细节可以之后再慢慢配置。</li>
<li>编辑站点<code>_config.yml</code>文件其中的<code>deploy</code>节点时，注意<code>repo</code>的值。</li>
<li>替换域名时：<ul>
<li>直接在万维网设置解析方式；</li>
<li>在仓库Setting的要设置跳转链接；</li>
<li>CNAME会被覆盖，安装CNAME工具<a href="https://github.com/leecrossley/hexo-generator-cname" target="_blank" rel="external">hexo-generator-cname</a></li>
</ul>
</li>
<li>为博客文章添加阅读量统计功能，参照<a href="http://www.tuicool.com/articles/EbquI3B" target="_blank" rel="external">这里</a>，注意顺序，我在其中被坑过。</li>
<li>设置网站图标时，就是上传“.ico”文件时，确认成功后浏览器会有缓存，显示不出来，关掉浏览器清除缓存就好了（可放在最后）。</li>
<li>设置代码高亮主题测试时没事，上传后会有延迟，等等就好了（本人这样）。</li>
<li>设置搜索栏，进入<a href="https://swiftype.com/users/sign_up" target="_blank" rel="external">swiftype官网</a>，注册不上，应该收费了- -.</li>
<li>设置侧边栏社交链接时，<code>social:</code><strong>下面字段前要有两个空格，切记</strong>。</li>
</ul>
<h2 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a>相关网址</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a>、<a href="http://youlookwhat.duoshuo.com/admin/" target="_blank" rel="external">多说</a>、<a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>、<a href="https://leancloud.cn/app.html#/general" target="_blank" rel="external">leancloud</a>、<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fhome.console.aliyun.com%2Fnew#/" target="_blank" rel="external">阿里云</a>、<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">fork me</a>、<a href="http://www.ico.la/" target="_blank" rel="external">ico制作</a></p>
<h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a><span id="here">联系我</span></h2><ul>
<li><a href="http://www.jianshu.com/users/e43c6e979831/latest_articles" target="_blank" rel="external">我的简书</a></li>
<li><a href="http://blog.csdn.net/jingbin_" target="_blank" rel="external">我的CSDN</a></li>
<li><a href="https://github.com/youlookwhat" target="_blank" rel="external">我的个人博客</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一天的辛苦作战，总算基础的东西出来了。踩了太多的坑，综合我踩坑的经过，明白到，选好一篇引导文很重要！有些步骤不要先做了，不然后面会把你坑的很惨..&lt;/p&gt;
&lt;h2 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h2&gt;&lt;p&gt;很多博客都已经详细讲述了Hexo博客框架的好处和怎么做，下面的&lt;a href=&quot;#jump&quot;&gt;推荐文章&lt;/a&gt;里会给出链接。但有些过于复杂，让初次配置的人有点雨里雾里；有些又太简单，出了问题就会不知道怎么回事。下面是自己的搭建记录，及&lt;a href=&quot;#ask&quot;&gt;所遇问题的解决&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在此感谢&lt;a href=&quot;https://madongqiang2201.github.io/&quot;&gt;小马哥Mark&lt;/a&gt;和 &lt;a href=&quot;http://wingjay.com/&quot;&gt;wingjay&lt;/a&gt;先前分享的教程，有些段落是从你们里搬运过来的，希望博主见谅，如有侵权，请联系我删除。&lt;/p&gt;
&lt;p&gt;Ok，现在开始：&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://jingbin.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://jingbin.me/tags/hexo/"/>
    
  </entry>
  
</feed>
